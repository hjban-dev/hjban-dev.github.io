{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019-08-05-nodejs-01-webapp","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Nodejs 간단한 웹 앱 만들기","tags":["Nodejs"]},"fields":{"slug":"2019-08-05-nodejs-01-webapp"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nNodejs를 이용해서 간단한 서버 에플리케이션을 만들어 본다.</p>\n</blockquote>\n<h1>nodejs 간단한 웹 앱 만들기</h1>\n<h2>nodejs 서버연결</h2>\n<h3>서버연결을 위한 코드</h3>\n<p><a href=\"https://nodejs.org/en/about/\">node.org > about</a> 에서 파일 복사 후 <code>webserver.js</code> 생성 후 붙여넣기\nhttp 내부 모듈을 불러와서 hostname의 port로 서버 생성 후 연결 (밑에서 해석)</p>\n<pre><code class=\"language-javascript\">const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>터미널에서 <code>node webserver.js</code> 실행\n서버 종료할 때는 Ctrl + C </p>\n<pre><code>$ node webserver.js\nServer running at http://127.0.0.1:3000/\n</code></pre>\n<p>웹브라우저를 통해 <a href=\"http://127.0.0.1:3000/\">http://127.0.0.1:3000/</a> (로컬호스트)의 3000번 포트 경로에 접속하면 브라우저에 <code>hello world</code> 가 출력</p>\n<h3>내용</h3>\n<ul>\n<li>webserver.js 자바스크립트의 코드가 웹 브라우저를 통해서 요청한 내용을 받아서 서버 생성 후 hello world 라는 텍스트를 노출을 명령</li>\n<li>우리의 웹브라우저는 화면에 hello world를 출력  </li>\n</ul>\n<hr>\n<h2>nodejs 서버연결을 위한 코드 해석하기</h2>\n<h3>서버연결을 위한 코드와 해석</h3>\n<pre><code class=\"language-javascript\">const http = require('http'); // http 내부 모듈 추출\n// require()는 javascript 표준 API는 아님. Node.js에서 모듈을 불러오는 특별한 목적을 가진 내장 함수 \n\nconst hostname = '127.0.0.1'; // 서버 컴퓨터의 ip\nconst port = 3000; // 목적 포트. 컴퓨터에는 0 ~ 65535번의 포트(port) 존재\n\n// createServer 명령을 통해 서버 한대를 만든다.\nconst server = http.createServer((req, res) => { \n  // 매개 변수로 요청의미의 req, 응답의미의 res\n  // 사용자에게 응답한다는 의미의 res에 속성 및 메서드 연결\n  res.statusCode = 200; // 통신 성공\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  // 만든 서버가 컴퓨터에 리스닝을 하도록 함\n  // 첫번째 매개변수는 포트번호, 두번째 매개변수는 ip \n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>","id":"dac86f03-5019-5cd7-a54c-a6110da9b2e4"}},"pageContext":{"slug":"2019-08-05-nodejs-01-webapp"}}}