{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019-08-05-nodejs-02-module","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Nodejs 모듈과 NPM","tags":["Nodejs"]},"fields":{"slug":"2019-08-05-nodejs-02-module"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nNodejs를 이용해서 간단한 서버 애플리케이션을 만들어 본다.</p>\n</blockquote>\n<h1>모듈과 NPM - nodejs 모듈</h1>\n<h2>모듈 기초</h2>\n<ul>\n<li><code>모듈 = 부품</code> 한 덩어리</li>\n<li>웹서버를 처음부터 끝까지 만드는 것은 어렵고 복잡한 일 / nodejs 에서는 기본적인 웹서버를 만들어 놓고(내부 모듈), 사용자가 쓸 수 있도록 함 </li>\n</ul>\n<h3>Nodejs의 내부 모듈</h3>\n<ul>\n<li>내부 모듈은 노드 설치시 기본으로 설치. require() 사용하여 불러올 수 있음</li>\n<li>내장 모듈에 대한 정보 > <a href=\"http://nodejs.org/api\">nodejs api</a></li>\n</ul>\n<hr>\n<h2>http 모듈 호출 코드</h2>\n<pre><code class=\"language-javascript\">const http = require('http');\n// 사용자가 nodejs에서 제공하는(내부모듈) http 라는 모듈(부품)이 필요하면 require 함수를 통해서 http 모듈을 가져오고 상수에 담는다.\n</code></pre>\n<p>http 모듈 사용 설명서 : <a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/http.html\">nodejs document</a></p>\n<ul>\n<li>http.createServer() 메소드 : http 모듈의 Server객체를 리턴</li>\n<li>http.createServer().listen() 메소드</li>\n</ul>\n<p><code>모듈을 사용하기 위해서는 require라는 함수로 호출</code>한다.<br>\nnodejs는 기본적으로 앱을 만들기 위한 부품을 기본적으로 제공한다. (ex. http, path, os)<br>\n모듈의 사용설명서는 nodejs 사이트의 <a href=\"https://nodejs.org/dist/latest-v6.x/docs/api/\">document</a>에서 확인 가능하다.</p>\n<h2>path 모듈 호출 코드</h2>\n<pre><code class=\"language-javascript\">const path = require('path'); //내부모듈 path 불러옴\n\nconst curPath = path.join('/Users/newDir', 'app.exe'); //path모듈 내부의 메서드 join()사용\n// 매개변수를 합쳐 하나의 패스로 만들어줌. 구분자는 알아서 조정\nconsole.log(curPath); //\\Users\\newDir\\app.exe\n\nconst filename = \"C:\\Users\\newDir\\app.exe\";\nconst dirname = path.dirname(filename); // 경로명 -> C:\\Users\\newDir\nconst basename = path.basename(filename); // 파일이름 -> app.exe\nconst extname = path.extname(filename); // 확장자명 -> .exe \nconsole.log(dirname, basename, extname); \n</code></pre>\n<p>http 모듈 사용 설명서 : <a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/path.html\">nodejs document</a></p>\n<h3>터미널</h3>\n<pre><code class=\"language-shell\">$ node path.js\n\\Users\\newDir\\app.exe\nC:\\Users\\newDir app.exe .exe\n</code></pre>\n<hr>\n<h2>npm 소개</h2>\n<ul>\n<li><strong>npm = Node Package Manager</strong> (command , cmd 라고 부르기도 함)</li>\n<li>node.js 를 설치하면 자동으로 함께 설치</li>\n<li>\n<p>npm은 Node 계의 <strong>앱스토어</strong>!</p>\n<ul>\n<li>모듈의 설치, 삭제, 버전관리</li>\n</ul>\n</li>\n<li>외부 모듈 사용시에 npm에서 설치 필요</li>\n<li><a href=\"https://www.npmjs.com/\">npm 사이트</a></li>\n</ul>\n<h3>명령 프롬프트 기본 명령어</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">명령어</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">dir</td>\n<td align=\"left\">현재 폴더의 요소를 출력합니다.</td>\n</tr>\n<tr>\n<td align=\"left\">cd 폴더명</td>\n<td align=\"left\">특정 폴더로 이동합니다.</td>\n</tr>\n<tr>\n<td align=\"left\">..</td>\n<td align=\"left\">상위폴더</td>\n</tr>\n<tr>\n<td align=\"left\">mkdir 폴더명</td>\n<td align=\"left\">폴더 생성</td>\n</tr>\n<tr>\n<td align=\"left\">D:</td>\n<td align=\"left\">D 드라이버로 이동.</td>\n</tr>\n</tbody>\n</table>\n<h2>npm 사용법</h2>\n<h3>npm 초기화</h3>\n<ul>\n<li>cmd 창에 <code>npm init</code> 입력</li>\n<li>\n<p>새 npm 패키지 설정이라는 말은 = package.json 파일 생성</p>\n<ul>\n<li><strong>package.json</strong>은 프로젝트에 대한 표. 해당 프로젝트의 이름, 버전, 사용되는 모듈 등의 정보가 적혀있고, 이 파일 하나로 모듈 의존성 모듈 관리도 진행할 수 있다. </li>\n<li><u>어떤 오픈 소스를 다운 받을 때 package.json만 있다면 해당 프로젝트가 사용하는 모듈이 어떤 것인지 알 수 있다.</u></li>\n</ul>\n</li>\n</ul>\n<h3>npm 에서 외부 모듈 설치</h3>\n<ul>\n<li>\n<p>cmd 창에 <code>npm install 모듈명 --save</code> 입력</p>\n<ul>\n<li>--save 명령어를 입력으로 package.json 에서 설치된 모듈과 버전 확인이 가능하다.</li>\n</ul>\n</li>\n</ul>","id":"7f32fc96-91fb-56f5-b5d3-4a6652467d41"}},"pageContext":{"slug":"2019-08-05-nodejs-02-module"}}}