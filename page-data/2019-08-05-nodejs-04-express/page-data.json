{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019-08-05-nodejs-04-express","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Express 모듈 설치와 사용","tags":["Nodejs"]},"fields":{"slug":"2019-08-05-nodejs-04-express"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nExpress 모듈 설치 후 Express에서 제공하는 미들웨어와 라우터 사용 웹 서버 만들기</p>\n</blockquote>\n<h1>Express 모듈 설치와 사용</h1>\n<ul>\n<li>Express는 자체적인 기능을 갖춘 라우팅 및 미들웨어 웹 프레임워크</li>\n</ul>\n<h2>Express 모듈 정의</h2>\n<ul>\n<li>Node.js만 사용하여 웹 앱을 만드는 것은 어렵고 복잡함</li>\n<li>위 사항들을 간단하게 만들어주는 다양한 도구 중 가장 대표적인 것이 Express</li>\n<li><a href=\"http://expressjs.com/ko/\">express 홈페이지</a> 참고</li>\n</ul>\n<h3>Express 설치</h3>\n<ul>\n<li>터미널에서 <code>npm init</code>을 통해 해당 프로젝트 폴더를 npm 패키지로 만든다.</li>\n<li><code>npm install express --save</code> 입력 후 package.json 에서 확인</li>\n<li>node_modules 폴더에 파일이 설치되고 완료! </li>\n</ul>\n<hr>\n<h3>코드작성</h3>\n<p>require() 함수로 설치된 express 모듈 추출<br>\n상수 app 으로 웹 서버를 시작</p>\n<pre><code class=\"language-javascript\">const express = require('express');\nconst app = express(); // express의 인스턴스\n\napp.use(function(req, res){\n  res.send('hello Node user!');\n});\n\n// 웹 서버 로컬호스트 3000번 포트 실행\napp.listen(3000, function(){\n  console.log('connected 3000 port!');\n});\n</code></pre>\n<h3>코드실행</h3>\n<ul>\n<li>터미널에서 node app.js 입력하여 파일을 실행</li>\n<li>브라우저에 <a href=\"http://localhost:3000\">http://localhost:3000</a> 로 접속하여 결과 확인</li>\n</ul>\n<hr>\n<h2>express() 메소드 호출으로 만든 app 객체의 주요 메서드</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메서드 이름</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">use(path, function)</td>\n<td align=\"left\">미들웨어 함수를 사용</td>\n</tr>\n<tr>\n<td align=\"left\">app.get(path, callback [, callback ...])</td>\n<td align=\"left\">특정 패스로 요청된 정보 처리</td>\n</tr>\n<tr>\n<td align=\"left\">app.set(name, value)</td>\n<td align=\"left\">서버 설정 속성 지정. 지정한 속성을 get() 메서드로 확인할 수 있음.</td>\n</tr>\n<tr>\n<td align=\"left\">app.get(name)</td>\n<td align=\"left\">app.set() 메서드로 서버 설정을 위해 지정했던 속성 확인</td>\n</tr>\n</tbody>\n</table>\n<p>get(path, callback [, callback ...]) 메서드는 요청방식 처리 메서드로 다음장에서 더 알아봅시다.</p>\n<h3>코드작성</h3>\n<p><strong>아래 코드는 웹 서버 실행을 위해 익숙해져야 함.</strong></p>\n<pre><code class=\"language-javascript\">var express = require('express');\nvar app = express();\n\napp.get('/',function(req, res){\n  // get 요청 방식으로 접근한 서버 호스트 접속했을 때 실행\n  res.send('hello Node.js user!');\n});\napp.get('/login',function(req, res){\n  // get 요청 방식으로 접근한 서버 호스트/login 접속했을 때 실행\n  res.send('&#x3C;h1>login please. Node.js user!&#x3C;/h1>');\n});\n\napp.listen(3000, function(){\n  console.log('connected 3000 port!');\n});\n</code></pre>\n<p>브라우저에 <a href=\"http://localhost:3000\">http://localhost:3000</a>, <a href=\"http://localhost:3000/login\">http://localhost:3000/login</a> 로 접속하여 결과 확인</p>","id":"73b49509-a114-5ab6-b862-4ebaf84442c8"}},"pageContext":{"slug":"2019-08-05-nodejs-04-express"}}}