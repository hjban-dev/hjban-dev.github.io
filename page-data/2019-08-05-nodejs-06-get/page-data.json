{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019-08-05-nodejs-06-get","result":{"data":{"markdownRemark":{"frontmatter":{"title":"GET방식을 이용한 정보의 전달, 쿼리스트링","tags":["Nodejs"]},"fields":{"slug":"2019-08-05-nodejs-06-get"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nURL을 통해서 애플리케이션에 정보를 전달하는 방법에 대해서 알아본다.</p>\n</blockquote>\n<h1>GET방식을 이용한 정보의 전달, 쿼리스트링</h1>\n<h2>GET방식 소개</h2>\n<ul>\n<li>사용자의 접속(요청)에 따라서 어플리케이션이 응답한 정보를 웹브라우저에 <code>URL을 확인하여 정보를 가져오는 것</code>을 GET 방식이라 한다.</li>\n<li>경우에 따라서는 쿼리스트링을 통해서 어떠한 정보를 앱에 요청해서 가져오기도 한다.</li>\n</ul>\n<h3>주소 문자열 요청 파라미터</h3>\n<ul>\n<li>주소문자열은 protocol, host, query string등으로 구분된다.</li>\n</ul>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/querystring.jpg\" alt=\"\" width=\"438\">\n<figcaption>URL의 구성요소</figcaption>\n</figure>\n</center>\n<h2>Express의 query 객체의 사용 - 쿼리스트링</h2>\n<ul>\n<li>하나의 path(라우터) 에서 경우에 따라 다른 결과를 보여줄 떄 쿼리스트링이 사용된다.</li>\n<li>url 내의 쿼리스트링을 가져오려면 <code>req.query</code> 를 사용해야한다.</li>\n</ul>\n<pre><code class=\"language-javascript\">var url = 'http://localhost:3000/topic?id=2'\n// 위 주소에서 query.id = 2 가 된다.\n// id는 바뀔 수 있음 ex) http://localhost:3000/topic?page=2\n</code></pre>\n<ul>\n<li>\n<p>express api reference <a href=\"http://expressjs.com/en/4x/api.html#req\">req.query</a> 참고</p>\n<ul>\n<li>cmd에서 express 설치 필요 (npm install express --save)</li>\n</ul>\n</li>\n<li>&#x26; 기호로 나눠진 복수의 쿼리스트링을 가져오는 것도 가능하다.</li>\n</ul>\n<pre><code class=\"language-javascript\">app.get('/topic', function(req, res) {\n  // url이 http://test.com/topic?id=neju&#x26;name=money 일때\n  res.send(req.query.id+' , '+req.query.name); // neju , money 출력\n})\n</code></pre>\n<h3>query 객체의 활용</h3>\n<pre><code class=\"language-javascript\">app.get('/topic', function(req, res){\n  var topic = [\n    'javascript is...',\n    'nodejs is...',\n    'express is...'\n  ];\n  var output = `\n    &#x3C;li>&#x3C;a href=\"/topic?id=0\">js&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a href=\"/topic?id=1\">nodejs&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a href=\"/topic?id=2\">express&#x3C;/a>&#x3C;/li>\n    ${topic[req.query.id]}\n    `\n  // 선택한 링크에 따라서 다른 정보를 출력하는 동적인 애플리케이션\n  res.send(output);\n})\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/query-ex1.jpg\" alt=\"\" width=\"370\">\n<figcaption>url query에 따른 정보 출력</figcaption>\n</figure>\n</center>\n<h3>쿼리스트링이 아닌 path 방식의 URL의 사용</h3>\n<pre><code class=\"language-javascript\">app.get('/topic/:id', function(req, res){\n  // path 방식 /:id 를 통해 기존의 /topic?id=2 값을 /topic/2 로 가져올 수 있다.\n  var topics = [\n    'Javascript is....',\n    'Nodejs is...',\n    'Express is...'\n  ];\n  var output = `\n  &#x3C;a href=\"/topic/0\">JavaScript&#x3C;/a>&#x3C;br>\n  &#x3C;a href=\"/topic/1\">Nodejs&#x3C;/a>&#x3C;br>\n  &#x3C;a href=\"/topic/2\">Express&#x3C;/a>&#x3C;br>&#x3C;br>\n  ${topics[req.params.id]}\n  ` \n  // path 방식을 사용하는 url의 경우 params를 통해서 값을 가져올 수 있음\n  res.send(output);\n})\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/query-ex2.jpg\" alt=\"\" width=\"370\">\n<figcaption>url path 방식에 따른 정보 출력</figcaption>\n</figure>\n</center>\n<p>path 방식으로 복수 정보 처리 가능</p>\n<pre><code class=\"language-javascript\">app.get('/topic/:id/:mode', function(req, res){\n  res.send(req.params.id+' , '+req.params.mode)\n});\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/query-ex3.jpg\" alt=\"\" width=\"370\">\n<figcaption>url path 방식에 따른 복수 정보 출력</figcaption>\n</figure>\n</center>\n<ul>\n<li>Restful api 등을 통해서 시맨틱 URL을 잘 사용하는 방법에 대해서 익힐 수 있다.</li>\n</ul>","id":"2f7f6e68-51ff-5c22-b54d-d2ec737c059e"}},"pageContext":{"slug":"2019-08-05-nodejs-06-get"}}}