{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019-08-08-nodejs-09-session","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Nodejs Session 생성 및 사용","tags":["Nodejs"]},"fields":{"slug":"2019-08-08-nodejs-09-session"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nSession 개념을 세우고 사용하는 법을 알아본다  </p>\n</blockquote>\n<h1>Nodejs Session 생성 및 사용</h1>\n<h2>Session 배경</h2>\n<ul>\n<li>쿠키보다 더 안전하고 많은 데이터를 저장하는 저장 방식</li>\n<li>데이터를 <code>웹 서버</code>에 저장 웹 브라우저는 Session ID만 갖고 있어서 쿠키보다 더 안전  </li>\n</ul>\n<h2>Express-Session <a href=\"https://www.npmjs.com/package/express-session\">적용방법</a></h2>\n<ul>\n<li>\n<p>설치 <code>npm install express-session --save</code></p>\n<ul>\n<li>package.json 에서 설치 확인</li>\n</ul>\n</li>\n<li>app.js에 해당 모듈 추가 <code>expressSession = require('express-session');</code></li>\n<li>\n<p>express 프로세스 app에 express-session 미들웨어 연결( 외우는게 좋다 )<br>\n<code>app.use(session({ secret , resave , saveUninitialized }))</code></p>\n<ul>\n<li>secret - 필수항목 이 값으로 세션을 암호화 하여 저장.</li>\n<li>resave - 세션을 언제나 저장할 지 정하는 값 false를 권장하지만 필요에 따라 true로 설정</li>\n<li>saveUninitialized - 세션이 저장할 내용이 없어도 uninitialized 상태로 미리 저장.<br>\nex) 방문자 추적할 때 사용  </li>\n</ul>\n</li>\n</ul>\n<h3>session 저장하는 방법</h3>\n<pre><code class=\"language-javascript\">req.session.객체명 // 객체 방식 선호\n</code></pre>\n<h3>session 삭제하는 방법</h3>\n<pre><code class=\"language-javascript\">req.session.destroy(function(err) {}) // 세션 삭제\n</code></pre>\n<h4>session 생성 및 삭제 예제</h4>\n<pre><code class=\"language-javascript\">var express = require('express');\nvar app = express();\nvar sessionParser = require('express-session'); // 모듈 추출\nvar router = express.Router();\n\nvar port = process.env.port || 3000; // 삼항 연산자로 포트번호 지정\n\n// express-session 미들웨어 연결 (외울 필요 있음)\napp.use(sessionParser({\n  secret: 'my key', // 암호화 하여 저장.\n  resave: true, // 언제나 저장할 지 정하는 값\n  saveUninitialized: true // 저장할 내용이 없어도 uninitialized 상태로 미리 저장\n}));\n\nrouter.route('/confirm').get(function (req, res) {\n  let msg = `세션이 존재하지 않습니다.`\n  if (req.session.user) {\n    msg = `${req.session.user.age}살 ${req.session.user.name}님 안녕! 세션의 생성된 시간 : ${req.session.user.createCurTime}`;\n  }\n  res.send(msg);\n});\n\nrouter.route('/').get(function (req, res) {\n  if(req.session.user){\n    console.log(`세션이 이미 존재합니다.`);\n  }else{\n    // session 생성\n    req.session.user = {\n      \"name\" : \"neju money\",\n      \"age\" : 25,\n      \"createCurTime\" : new Date()\n    }\n    console.log(`세션 생성`);\n  }\n  res.redirect(`/confirm`);\n});\n\n// session 삭제 후 redirect\nrouter.route('/destroy').get(function(req,res){\n  req.session.destroy();\n  console.log(`session을 삭제하였습니다.`);\n  res.redirect(`/confirm`);\n});\n\napp.use('/', router);\napp.listen(port, function () {\n  console.log(`${port}번 포트로 서버가 작동합니다.`);\n});\n</code></pre>\n<ul>\n<li>\n<p>session 활용하여 로그인, 로그아웃 기능도 구현 가능</p>\n<ul>\n<li>public 폴더에 login.html 생성 내부에 input이 포함된 form 태그 구현</li>\n<li>body-parser로 id, nickname, pw 등 정보 추출</li>\n<li>session 정보 저장 후 환영 정보 전송</li>\n<li>환영 정보에 로그아웃 버튼에 세션 삭제 기능 추가</li>\n</ul>\n</li>\n</ul>","id":"afc2638c-f7f3-5736-9907-bdeb03587d1c"}},"pageContext":{"slug":"2019-08-08-nodejs-09-session"}}}