{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019-08-12-react-01-jsx","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React에서 JSX 사용하기","tags":["React"]},"fields":{"slug":"2019-08-12-react-01-jsx"},"html":"<blockquote>\n<p>ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.<br>\n<a href=\"https://www.w3schools.com\">w3school</a> 참고</p>\n</blockquote>\n<h1>React에서 JSX 사용하기</h1>\n<h2>JSX?</h2>\n<ul>\n<li>JavaScript + XML의 합성어</li>\n<li><code>자바스크립트의 확장문법</code></li>\n</ul>\n<h3>React Element를 생성하는 두가지 방법</h3>\n<h4>1. React.createElement 메서드 사용</h4>\n<pre><code class=\"language-javascript\">const element = React.createElement(\n  'h1', // 엘리먼트 혹은 노드\n  {className: 'title'}, // 속성\n  'Hello world' // 자식 노드\n);\n</code></pre>\n<h4>2. JSX 사용</h4>\n<pre><code class=\"language-javascript\">const element = (\n  &#x3C;h1 className=\"test\">\n    Hello, world\n  &#x3C;/h1> \n);\n</code></pre>\n<h2>babel - Unexpected token error</h2>\n<p>위의 app.js 를 실행하면 Unexpected token error 발생<br>\nJSX문법이 제대로 컴파일이 되지 않았음<br>\nㄴ 브라우저들에게 JSX문법 이해시켜 줄(=컴파일) <code>컴파일러</code>가 필요<br>\n가장 대표적인 컴파일러 <code>babel</code> 사용<br>\nindex.html에 아래 스크립트 추가</p>\n<pre><code class=\"language-html\">&#x3C;script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\">&#x3C;/script>\n&#x3C;script type=\"text/babel\" src=\"./app.js\">&#x3C;/script>\n</code></pre>\n<p>다시 말해, JSX는 <code>자바스크립트의 모든 문법을 지원</code>한다</p>\n<h3>app.js의 title과 desc를 JSX로 구성</h3>\n<pre><code class=\"language-javascript\">const title = &#x3C;h1>My First React Element&#x3C;/h1> // JSX 문법\nconst desc = &#x3C;p>This is Description&#x3C;/p> // JSX 문법\n \nconst header = React.createElement(\n  'header',\n  null,\n  title, desc\n);\n \nReactDOM.render(header, document.getElementById('root'))\n</code></pre>\n<h3>header부분도 JSX로 구성</h3>\n<p>두 줄 이상인 경우는 <code>()</code>로 감싸는게 가독성을 위해서 좋다. () 가 없다고 틀린 문법은 아니다.</p>\n<pre><code class=\"language-javascript\">const header = (\n  &#x3C;header>\n    &#x3C;h1>My First React Element&#x3C;/h1>\n    &#x3C;p>This is Description&#x3C;/p>\n  &#x3C;/header>\n);\n\nReactDOM.render(header, document.getElementById('root'));\n</code></pre>\n<h2>JSX EXPRESSION</h2>\n<p>JSX를 좀 더 동적으로 만들기 위해서는 태그 내부에 자바스크립트 변수를 <code>{}</code> 로 감싸서 삽입할 수 있다. </p>\n<pre><code class=\"language-javascript\">const title = 'My First React Element';\nconst desc = 'This is Description';\nconst myTitleId = 'main-title';\nconst name = 'neju';\n \nconst header = (\n  &#x3C;header>\n    &#x3C;h1 id={myTitleId}>{name} {title}&#x3C;/h1>\n    &#x3C;p className=\"main-desc\">{desc}&#x3C;/p>\n  &#x3C;/header>\n);\n\nReactDOM.render(header, document.getElementById('root'));\n</code></pre>\n<p>JSX에서 속성은 카멜 표기법(Camel Case)으로 표현<br>\nㄴ ex) class - className, tabindex - tabIndex</p>","id":"e492374d-ac76-5a52-9136-253aa81dc3a2"}},"pageContext":{"slug":"2019-08-12-react-01-jsx"}}}