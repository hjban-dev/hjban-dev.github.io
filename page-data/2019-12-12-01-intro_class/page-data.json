{"componentChunkName":"component---src-templates-blog-template-js","path":"/2019-12-12-01-intro_class","result":{"data":{"markdownRemark":{"frontmatter":{"title":"자바스크립트의 클래스 소개","tags":["Javascript"]},"fields":{"slug":"2019-12-12-01-intro_class"},"html":"<h1>Javascript 클래스 소개</h1>\n<p>Javascript : 프로토타입 기반의 객체지향 언어</p>\n<h2>클래스란?</h2>\n<p>함수가 특정 알고리즘을 포장하는 기술이라면 클래스는 이렇게 만들어진 수많은 변수와 함수 중 연관 있는 변수와 함수만을 선별해 포장하는 기술입니다. 이렇게 클래스로 포장하는 이유는 <code>객체 단위</code>로 코드를 그룹화하고 코드를 재사용하기 위해서입니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>클래스</th>\n<th>함수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>포장 내용</td>\n<td><code>연관 있는</code> 변수와 함수</td>\n<td><code>특정 기능</code>을 하는 변수 + 구문</td>\n</tr>\n<tr>\n<td>기능</td>\n<td>객체 단위의 코드 그룹화<br>객체 단위의 중복 코드 제거 및 코드 재사용</td>\n<td>기능 단위의 코드 그룹화<br>기능 단위의 중복 코드 제거 및 코드 재사용</td>\n</tr>\n</tbody>\n</table>\n<h3>객체 단위의 코드 그룹화</h3>\n<p>앞에서 알아본 것처럼 클래스의 대표적인 기능은 연관 있는 변수와 함수를 그룹화하는 기능입니다.</p>\n<ul>\n<li>\n<p>연관 있는 변수와 함수란?</p>\n<ul>\n<li>플젝을 진행하다 보면 함수 개수가 수백, 수천, 수만 개가 만들어지기도 합니다. 그랬을때 코드를 찾기도, 수정하기도 어려워져 관리가 힘들어집니다. 또 다른 문제로는 함수 단위 코딩의 경우 함수 이름이나 변수 이름을 같게 만들어 충돌이 발생하는 사태까지 발생하게 됩니다. </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>예를 들어봅시다. 우리나라의 전국을 하나의 시로 통합해 관리하는 경우와 같습니다. 만약 이렇다면 전국에 같은 이름을 가진 사람이 엄청 많아질 것 이고 차고자 하는 사람을 효율적으로 찾기가 어렵게 되겠죠?  </p>\n<blockquote>\n<p>이를 해결하기 위해 시도군으로 나눠서 관리합니다. 만약 서울에 사는 김철수를 찾을 때 전국을 찾을 필요 없이 서울에서만 찾으면 됩니다.</p>\n</blockquote>\n</blockquote>\n<p>클래스의 역할이 바로 시도군을 나누는 역할입니다.</p>\n<h3>객체 단위의 중복 코드 제거 및 코드 재사용성</h3>\n<p>클래스를 이용하면 객체 단위로 코드를 재사용할 수 있습니다. 예를 들어 탭패널 3개가 들어있는 웹 페이지를 만들어야 하는 경우 클래스 하나로 독립적으로 동작하는 3개의 탭패널을 모두 만들 수 있습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/javascript/class-tab-panel.jpg\" alt=\"\">\n<figcaption>클래스를 이용하면 클래스 하나로 독립적으로 동작하는 3개의 탭패널을 모두 만들 수 있습니다.</figcaption>\n</figure>\n</center>\n<hr>\n<h2>자바스크립트에서 클래스란?</h2>\n<p>미리 언급하자면 사실 자바스크립트는 객체지향 크로그래밍 언어에서 기본적으로 제공하는 클래스라는 개념을 제공하지 않습니다. 하지만 자바스크립트에서도 클래스처럼 사용할 수 있는 방법을 세 가지 지원합니다.</p>\n<p>[리터럴 방식]</p>\n<pre><code class=\"language-javascript\">var 인스턴스 = {\n  프로퍼티1: 초깃값,\n  프로퍼티2: 초깃값,\n\n  메서드1:function(){\n\n  },\n  메서드2:function(){\n\n  },\n}\n</code></pre>\n<p>[함수 방식]</p>\n<pre><code class=\"language-javascript\">function 클래스이름(){\n  this.프로퍼티1 = 초깃값;\n  this.프로퍼티2 = 초깃값;\n\n  this.메서드1 = function(){\n\n  }\n  this.메서드2 = function(){\n\n  }\n}\n</code></pre>\n<p>[프로토타입 방식]</p>\n<pre><code class=\"language-javascript\">function 클래스이름(){\n  this.프로퍼티1 = 초깃값;\n  this.프로퍼티2 = 초깃값;\n}\n\n클래스이름.prototype.메서드1 = function(){\n\n}\n클래스이름.prototype.메서드2 = function(){\n\n}\n</code></pre>\n<p>뒤에서 나오는 모든 방법을 모두 클래스라고 부르겠습니다.</p>\n<blockquote>\n<p>자바스크립트 + jQuery 완전정복 스터디3 발췌 및 참고</p>\n</blockquote>","id":"05f2a371-174b-5ce3-acc5-bd9702bbb703"}},"pageContext":{"slug":"2019-12-12-01-intro_class"}}}