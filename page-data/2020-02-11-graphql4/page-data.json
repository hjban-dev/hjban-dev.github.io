{"componentChunkName":"component---src-templates-blog-template-js","path":"/2020-02-11-graphql4","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Movie API - Mutations","tags":["GraphQL","Nodejs"]},"fields":{"slug":"2020-02-11-graphql4"},"html":"<blockquote>\n<p>노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>Creating Movie API by using GraphQL</h1>\n<h2>8 Defining Mutations</h2>\n<p>자 이번엔 본격적으로 Movie App을 만들겠습니다. 처음으로 만들 것은 영화를 추가하는 함수 addMovie()입니다.  </p>\n<pre><code class=\"language-javascript\">export const addMovie = (name, score) => {\n  const newMovie = {\n    id: `${movies.length + 1}`,\n    name,\n    score\n  };\n  movies.push(newMovie);\n  return newMovie;\n};\n</code></pre>\n<p>addMovie()함수를 분석해보겠습니다. arguments로 name과 score가 들어오고 두 argument를 기반으로 newMovie라는 변수를 생성합니다.<br>\n그리고 movies에 추가합니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-9.jpg\" alt=\"\">\n<figcaption>movies의 name과 score를 return하는 Playground</figcaption>\n</figure>\n</center>\n<p>현재는 바뀐게 없고, 우리가 정의한 movies만 확인 가능합니다. 이제 Mutation을 설정하면 addMovie()가 실행될 것입니다. Mutation은 Database의 상태가 변할 때 사용됩니다.</p>\n<p>schema.graphql에 Mutation에 대한 정보를 입력하겠습니다. Mutation은 schema.graphql안에 정의한다면 여러분이 원하는 만큼 사용할 수 있습니다.</p>\n<pre><code class=\"language-javascript\">(...)\ntype Mutation{\n  addMovie(name: String!, score: Int!): Movie!\n}\n</code></pre>\n<p>addMovie라는 함수를 넣어주었습니다. 총 3가지의 속성중에 id값은 자동으로 설정되기 때문에 제외하고 name과 score를 넣어주었고, 그것은 필수로 Movie의 타입으로 생성되게 하겠습니다.  </p>\n<p>schema.graphq에 Mutation을 설정했으니, resolvers.js에도 Mutation을 추가해야 합니다.</p>\n<h2>9 Creating first Mutation</h2>\n<p>resolvers.js에 resolver.Mutation을 작성해주겠습니다.</p>\n<pre><code class=\"language-javascript\">import { getMovies, getById, addMovie } from \"./db\";\n  (...)\n  Mutation: {\n    addMovie: (_, { name, score }) => addMovie(name, score)\n  }\n  (...)\n</code></pre>\n<p>그리고 코드를 실행하고 Playground를 확인해보겠습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-10.jpg\" alt=\"\">\n<figcaption>Playground에서 확인할 수 있는 DOCS</figcaption>\n</figure>\n</center>\n<p>addMovie를 실행하기 전에 <strong>DOCS</strong>를 살펴보면 우리가 만든 Query와 Mutation에 관한 정보를 알 수 있습니다. 여러분은 DOCS를 참고하여 addMovie를 작성해주면 됩니다! </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-11.jpg\" alt=\"\">\n<figcaption>Playground에서 확인할 수 있는 DOCS</figcaption>\n</figure>\n</center>\n<p>mutation을 통해 addMovie로 test를 생성했습니다. 이제 movies를 확인해봅시다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-11.gif\" alt=\"\">\n<figcaption>addMovie를 실행 후 객체가 추가된 movies</figcaption>\n</figure>\n</center>\n<p>새로 고침을 하니 test가 생성된게 확인됩니다.<br>\n위 상황에서 확인했듯이, gql의 Playground는 여러분의 API를 확인하는 쉽고 빠른 방법입니다! </p>\n<h2>10 Delete Mutation</h2>\n<p>이번엔 movie를 지우는 deleteMovie()함수를 생성하고 실행해보겠습니다.</p>\n<pre><code class=\"language-javascript\">export const deleteMovie = id => {\n  const cleanedMovies = movies.filter(movie => movie.id !== id);\n  if (movies.length > cleanedMovies.length) {\n    movies = cleanedMovies;\n    return true;\n  } else {\n    return false;\n  }\n};\n</code></pre>\n<p>deleteMovie를 분석해보겠습니다. 위 함수는 id를 argument로 받는 callback함수를 실행합니다.<br>\ncallback함수 내부에는 cleanedMovies라는 변수가 있고, 그 변수는 movies에게 filter()메소드를 실행합니다. cleanedMovies는 movies의 id가 argument로 들어온 id와 같지 않은 배열로만 이뤄지게 했습니다. (cleanedMovies에는 argument와 같은 id값을 가진 movie는 없음)  </p>\n<p>그리고 movies.length와 cleanedMovies.length를 비교하여 movies.length가 더 많다면, movies에 cleanedMovies들어가게 했고, 그렇지 않다면 아무 일도 일어나지 않게 했습니다.  </p>\n<p>resolvers.js에도 추가하겠습니다.</p>\n<pre><code class=\"language-javascript\">import { getMovies, getById, addMovie, deleteMovie } from \"./db\";\n(...)\n  Mutation: {\n    addMovie: (_, { name, score }) => addMovie(name, score),\n    deleteMovie: (_, { id }) => deleteMovie(id)\n(...)\n</code></pre>\n<p>resolver에 추가했으니 schema에도 추가해야합니다.</p>\n<pre><code class=\"language-javascript\">(...)\ntype Mutation{\n  addMovie(name: String!, score: Int!) : Movie!\n  deleteMovie(id: Int!) : Boolean!\n}\n</code></pre>\n<p>deleteMovie()는 true와 false만 return하니 Boolean을 type으로 적어줍니다.<br>\n자, 여러분이 addMovie()를 실행했을때, 새 movie가 생성되었는지 확인이 필요합니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-12.jpg\" alt=\"\">\n<figcaption>Playground에서 deleteMovie실행</figcaption>\n</figure>\n</center>\n<p>오른쪽 화면에서 deleteMovie는 true를 반환했습니다. 그럼 database도 변화가 있는지 확인해봅시다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-12.gif\" alt=\"\">\n<figcaption>Playground에서 deleteMovie실행 후의 movies</figcaption>\n</figure>\n</center>\n<p>지금까지 우리는 영화 정보를 받을 때 Query를 썼고, Database의 상태를 바꾸기 위해서 Mutation을 사용했습니다.<br>\n물론 addMovie와 deleteMovie로 변화를 준 movies는 서버를 재시작할 경우에는 사라집니다. 왜냐면 movies는 정적인 상태로 생성한 것이기 때문입니다.  </p>\n<p>이제 다음장에선 GraphQL 서버를 가져가서 다른 API와 연결해봅시다. </p>","id":"06e2abe4-6ec9-55d6-a89f-545d9512c123"}},"pageContext":{"slug":"2020-02-11-graphql4"}}}