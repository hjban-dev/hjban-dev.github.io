{"componentChunkName":"component---src-templates-blog-template-js","path":"/2020-03-01-react-hooks3","result":{"data":{"markdownRemark":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useInput(useState)","tags":["React"]},"fields":{"slug":"2020-03-01-react-hooks3"},"html":"<blockquote>\n<p>노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>1 useState</h1>\n<h2>1.1 useInput</h2>\n<p>useState를 사용하여 커스텀 Hooks인 useInput을 만들어보겠습니다.<br>\nuseInput은 기본적으로 input을 업데이트 합니다.  </p>\n<p>useInput은 args로 initialValue를 받고, initialValue를 초기값으로 갖는 useState를 작성해주었습니다.</p>\n<pre><code class=\"language-javascript\">const useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  return { value };\n};\n\nconst App = () => {\n  const name = useInput(\"Mr.\");\n\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;h1>Hello &#x3C;/h1>\n      &#x3C;input placeholder=\"Name\" {...name} />\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>useInput함수에서 사용자가 변화를 주기 전에 value를 return하여 args를 초기값으로 갖게 합니다.<br>\n{...name}은 value={name.value}로도 작성할 수 있습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_1.JPG\" alt=\"\">\n<figcaption>코드 실행 결과</figcaption>\n</figure>\n</center>\n<p>이어서 useInput내부에 onChange함수를 만들어보겠습니다.</p>\n<pre><code class=\"language-javascript\">const useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  const onChange = event => {\n    console.log(event.target); // &#x3C;input placeholder=\"name\" value=\"Mr.\">&#x3C;/input>\n  };\n  return { value, onChange }; \n};\n</code></pre>\n<p>App 컴포넌트는 따로 수정할 필요가 없습니다. {...name}형태인 전개구문 문법으로 입력해주었기 때문입니다.</p>\n<h2>1.2 useInput part Two</h2>\n<p>useInput에 validator args를 추가하겠습니다. useInput은 validator가 있는지 확인하고 실행하게 합니다.</p>\n<pre><code class=\"language-javascript\">const useInput = (initialValue, validator) => { // validator 추가\n  const [value, setValue] = useState(initialValue);\n  const onChange = event => {\n    const {\n      target: { value }\n    } = event;\n    let willUpdate = true;\n    if (typeof validator === \"function\") {\n      willUpdate = validator(value); // validator 실행\n    }\n    if (willUpdate) {\n      setValue(value);\n    }\n  };\n\n  return { value, onChange };\n};\n\nconst App = () => {\n  const maxLen = value => value.length &#x3C; 10; // maxLen 함수 선언\n  const name = useInput(\"hj\", maxLen); // maxLen을 args로 전달\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;h1>Hello&#x3C;/h1>\n      &#x3C;input placeholder=\"name\" {...name} />\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>useInput을 활용하면 여러 조건들을 제어할 수 있습니다.</p>","id":"ac710b55-d50e-515e-b4d9-dabec9899863"}},"pageContext":{"slug":"2020-03-01-react-hooks3"}}}