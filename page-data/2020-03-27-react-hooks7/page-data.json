{"componentChunkName":"component---src-templates-blog-template-js","path":"/2020-03-27-react-hooks7","result":{"data":{"markdownRemark":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useRef, useClick(useRef, useEffect) & useHover(useRef, useEffect)","tags":["React"]},"fields":{"slug":"2020-03-27-react-hooks7"},"html":"<blockquote>\n<p>노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>2 useEffect</h1>\n<h2>2.2 useClick</h2>\n<h3>useRef</h3>\n<p>useClick을 사용하기 전에 useRef() hook을 알아봅시다.<br>\n컴포넌트를 작성하다 보면 태그를 직접 다뤄야 할 때가 있습니다. js의 경우에는 document.getElementById 메서드로 선택했었죠.  </p>\n<p>React의 경우 특정 엘리먼트의 크기나 위치 등을 가져와 설정할 때 ref를 사용합니다.<br>\n일단 기본적으로 <code>react useRef() 를 사용하여 Ref 객체를 만들고</code>, 이 객체를 우리가 선택하고 싶은 <strong>DOM</strong> 에 <strong>ref</strong> 값으로 설정해주어야 합니다. </p>\n<pre><code class=\"language-javascript\">const App = () => {\n  const inputElement = useRef(); // useRef()를 사용하여 ref객체 생성\n  console.log(inputElement); \n  // Object {current: HTMLInputElement} 객체로 구성되어 있고, 내부에 current라는 속성이 있음\n  // current: &#x3C;input placeholder=\"hi\">&#x3C;/input> current는 태그 그 자체\n\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;div>Hi&#x3C;/div>\n      &#x3C;input ref={inputElement} placeholder=\"hi\" /> {/* ref 값으로 inputElement 지정 */}\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>위 코드의 inputElement의 객체를 살펴보면 ref속성으로 지정한 태그를 확인할 수 있습니다.<br>\n이번엔 3초 뒤에 input 태그에 focus되도록 해봅시다.</p>\n<pre><code class=\"language-javascript\">const App = () => {\n  const inputElement = useRef();\n  setTimeout(() => inputElement.current.focus(), 3000);\n\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;div>Hi&#x3C;/div>\n      &#x3C;input ref={inputElement} placeholder=\"hi\" /> \n    &#x3C;/div>\n  );\n};\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_5.gif\" alt=\"\">\n<figcaption>코드 실행 결과</figcaption>\n</figure>\n</center>\n<h3>useClick</h3>\n<p>reference에 대해 이해했다면 useClick hook을 만들어봅시다.<br>\n일단 useRef()를 사용하여 h1태그를 선택합니다.</p>\n<pre><code class=\"language-javascript\">const useClick = onClick => {\n  const element = useRef();\n  return element; // { current: &#x3C;h1>Hi&#x3C;/h1> }\n};\n\nconst App = () => {\n  const h1Element = useClick();\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;h1 ref={h1Element}>Hi&#x3C;/h1>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>그리고 useEffect를 사용하여 만약 element.current가 있다면 click 하면 매개변수로 들어온 onClick 함수를 실행하는 event를 지정하겠습니다.</p>\n<pre><code class=\"language-javascript\">const useClick = onClick => {\n  const element = useRef();\n  useEffect(() => {\n    if (element.current) {\n      element.current.addEventListener(\"click\", onClick); // element.current에 args 함수 실행하는 이벤트 지정\n    }\n  });\n  return element;\n};\n\nconst App = () => {\n  const sayHello = () => console.log(\"sayHello\");\n  const h1Element = useClick(sayHello);\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;h1 ref={h1Element}>Hi&#x3C;/h1>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_6.gif\" alt=\"\">\n<figcaption>코드 실행 결과</figcaption>\n</figure>\n</center>\n<p>보시다시피, Hi를 클릭하면 sayHello가 실행합니다.<br>\n하지만 여기서 끝이 아닙니다. 지난 장에서 useEffect는 <strong>componentDidMount</strong>와 <strong>componentDidUpdate</strong>, <strong>componentWillUnmount</strong>의 구성이라고 했습니다.<br>\n방금 한 부분은 componentDidMount의 상황에서 생기는 이벤트이고 이벤트가 발생 한 후 componentWillUnmount의 상황에서 정리를 해줘야 합니다.</p>\n<pre><code class=\"language-javascript\">const useClick = onClick => {\n  const element = useRef();\n  useEffect(() => {\n    if (typeof onClick === \"function\") { // componentDidMount, componentDidUpdate 일 때 실행하는 부분\n      if (element.current) {\n        element.current.addEventListener(\"click\", onClick);\n      }\n    }\n    return () => { // componentWillUnmount 일 때 실행하는 부분\n      if (element.current) {\n        element.current.removeEventListener(\"click\", onClick);\n      }\n    };\n  }, []);\n  return element;\n};\n</code></pre>\n<h3>useHover</h3>\n<p>앞서 만든 useClick 을 활용하여 useHover를 만들어 보겠습니다. useEffect를 사용할 때 사용한 event만 변경해주면 됩니다!</p>\n<pre><code class=\"language-javascript\">const useHover = onHover => {\n  if (typeof onHover !== \"function\") {\n    return;\n  }\n  const element = useRef();\n  useEffect(() => {\n    if (element.current) {\n      element.current.addEventListener(\"mouseenter\", onHover); \n    }\n    return () => {\n      if (element.current) {\n        element.current.removeEventListener(\"mouseenter\", onHover);\n      }\n    };\n  }, []);\n  return element;\n};\n</code></pre>","id":"75fe5447-fead-586d-8953-9fb33d3438ea"}},"pageContext":{"slug":"2020-03-27-react-hooks7"}}}