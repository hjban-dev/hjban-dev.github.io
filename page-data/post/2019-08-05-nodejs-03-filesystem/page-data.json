{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-08-05-nodejs-03-filesystem","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Nodejs 내부 모듈 File system","tags":["Nodejs"]},"fields":{"slug":"2019-08-05-nodejs-03-filesystem"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nFile system 모듈을 이용해서 파일을 제어하는 법을 알아본다.  </p>\n</blockquote>\n<h1>File System 모듈</h1>\n<ul>\n<li>노드의 파일시스템은 동기식 IO와 비동기식 IO를 함께 제공</li>\n<li>Node.js 사이트의 <a href=\"https://nodejs.org/api/fs.html\">File System</a> 참고</li>\n</ul>\n<h2>fs모듈의 readFile() 메서드</h2>\n<ul>\n<li>readFileSync(path[, options]) : 동기식 IO파일을 읽어 들입니다.</li>\n<li>readFile(path[, options], callback) : 비동기식 IO파일을 읽어 들입니다.</li>\n</ul>\n<h3>readFile() 메서드로 알아보는 동기 방식과 비동식 방식의 차이</h3>\n<h4>동기 방식의 코드 진행</h4>\n<ul>\n<li>위에서 아래로 <code>순차적</code> 진행</li>\n</ul>\n<pre><code class=\"language-javascript\">var fs = require('fs'); // fs모듈 추출\n\n// 파일을 동기식 IO로 읽어 들입니다.\nvar data = fs.readFileSync('./package.json', 'utf8');\n\n// 읽어 들인 데이터를 출력합니다.\nconsole.log(data);\n</code></pre>\n<h4>비동기 방식의 코드 진행</h4>\n<ul>\n<li>실행 코드 <code>동시</code> 진행</li>\n</ul>\n<pre><code class=\"language-javascript\">var fs = require('fs'); // fs모듈 추출\n\n// 파일을 비동기식 IO로 읽어 들입니다.\nfs.readFile('./package.json', 'utf8', function(err, data) {\n  // 읽어 들인 데이터를 출력합니다.\n  console.log(data);\n});\n\n// 위 readFile() 메서드가 실행 되면서 동시 시작\nconsole.log('package.json 파일이 노출 되기 전에 실행');\n</code></pre>\n<h2>fs모듈의 writeFile() 메서드</h2>\n<ul>\n<li>writeFileSync(file, data[, options]) : 동기식 IO파일을 씁니다.</li>\n<li>writeFile(file, data[, options], callback) : 비동기식 IO파일을 씁니다.</li>\n</ul>\n<h3>writeFile() 메서드 사용 예시 코드</h3>\n<pre><code class=\"language-javascript\">var fs = require('fs'); // fs모듈 추출\n\nvar message = 'Hello World!';\n\n//파일에 데이터를 쓴다.\nfs.writeFile('./output.txt', message, function(err) {\n  if(err) {\n    console.log('Error : ' + err);\n  }\n  console.log('output.txt 파일에 데이터 쓰기 완료!');\n});\n</code></pre>\n<ul>\n<li>message를 내용이 삽입된 output.txt 확인</li>\n</ul>\n<h2>Stream 방식으로 파일 읽고 쓰기</h2>\n<ul>\n<li>위에서의 방식들은 파일을 통째로 읽음</li>\n<li>데이터를 Stream 방식으로 읽는것이 메모리, 속도 등에서 효율적</li>\n<li>fs.createReadStream(path[, options]) : 파일을 읽기 위한 스트림 객체를 만든다.</li>\n<li>fs.createWriteStream(path[, options]) : 파일을 쓰기 위한 스트림 객체를 만든다.</li>\n</ul>\n<pre><code class=\"language-javascript\">var fs = require('fs');\n\nvar inname = './output.txt';\nvar outname = './output2.txt';\n\nfs.exists(outname, function(exists) {\n  // fs.exists(path, callback) 사용하여 outname이 존재하는지 확인   \n  if(exists) {\n      fs.unlink(outname, function(err) {\n      // 존재하면 fs.unlink(path, callback)사용하여 삭제\n      if(err) throw err;\n    });\n    console.log('파일이 삭제됨.');\n  }\n  \n  var infile = fs.createReadStream(inname, {flags:'r'});\n  var outfile = fs.createWriteStream(outname, {flags: 'w'});\n\n  infile.pipe(outfile);\n  //복제할 내용.pipe() 메소드로 연결하면 파일의 내용이 복사\n  console.log('스트리밍 방식으로 복제 완료');\n});\n</code></pre>\n<h3>파일을 열 때 사용하는 대표적인 플래그</h3>\n<ul>\n<li>'r' : 읽기에 사용하는 플래그. 파일 없으면 예외 발생</li>\n<li>'w' : 쓰기에 사용하는 플래그. 파일 없으면 만들어지고 있으면 덮어씀.</li>\n<li>'w+' : 읽기와 쓰기 모두 사용 가능. 파일 없으면 만들어 짐. 덮어쓰기.</li>\n<li>'a+' : 읽기와 추가에 모두 사용가능. 파일이 없으면 만들어 짐. 내용 추가.</li>\n</ul>\n<h4>pipe() 와 http 모듈</h4>\n<ul>\n<li>읽은 파일은 서버에 노출도 가능</li>\n</ul>\n<pre><code class=\"language-javascript\">var http = require('http');\nvar fs = require('fs');\n\n\nvar server = http.createServer(function(req, res) {\n  var instream = fs.createReadStream('./output.txt');\n  //응답 스트림과 pipe() 연결하여 노출\n  instream.pipe(res);\n});\n\nserver.listen(3000, function() {\n  console.log('서버실행 >>> http://localhost:3000');\n})\n</code></pre>","id":"0e774f7a-2250-534e-80e1-c5a325058b62"}},"pageContext":{"slug":"2019-08-05-nodejs-03-filesystem"}}}