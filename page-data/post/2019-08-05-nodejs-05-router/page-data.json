{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2019-08-05-nodejs-05-router","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Express모듈의 Router, Static 미들웨어","tags":["Nodejs"]},"fields":{"slug":"2019-08-05-nodejs-05-router"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\n미들웨어의 개념을 잡고 router 미들웨어와 static 미들웨어를 알아본다.  </p>\n</blockquote>\n<h1>미들웨어</h1>\n<ul>\n<li>쉽게 말해 요청과 응답 사이에서 특수 기능을 수행  (모듈의 구성요소 중 하나가 미들웨어)</li>\n<li>app객체의 use()메서드로 미들웨어 등록</li>\n<li>따지고 보면 미들웨어 실행 후 라우터 실행</li>\n</ul>\n<h2>Static 미들웨어</h2>\n<ul>\n<li>\n<p>정적 파일을 제공할때 사용하는 미들웨어</p>\n<ul>\n<li>정적 파일 : 기본적인 css 파일이나 js 파일 같이 아무리 요청해도 변경되지 않는 파일</li>\n<li>ex) public 폴더의 login.html 과 logout.html등을 제공하고 싶을 때 사용</li>\n</ul>\n</li>\n<li>express에 내장된 static 미들웨어를 사용하거나 serve-static 외부 모듈을 설치해서 사용</li>\n</ul>\n<h3>exprss.static 사용 예시</h3>\n<pre><code class=\"language-javascript\">app.use(express.static('public'));\n</code></pre>\n<ul>\n<li>하지만 express.static 매개변수에 들어가는 경로는 node 프로세스가 실행되는 폴더를 기준으로 하는 상대경로이다. </li>\n<li>Express 앱을 다른 디렉토리에서 실행하는 경우에는 제공하려는 폴더의 절대 경로를 사용하는 것이 더 안전</li>\n</ul>\n<pre><code class=\"language-javascript\">app.use('/static', express.static(__dirname + '/public'));\n</code></pre>\n<h2>라우팅</h2>\n<ul>\n<li>개념 : 사용자의 요청에 대한 정보를 제공하는 것을 <code>라우트(route)한다</code>라고 표현</li>\n<li>간단하게 풀면 <code>요청에 따라 다른 기능을 실행</code>시키는 것</li>\n<li>어렵게 풀면 URI(또는 경로) 및 특정한 HTTP 요청 메소드(GET, POST 등) 요청에 애플리케이션이 응답하는 방법을 결정하는 것</li>\n<li>각 라우트는 하나 이상의 핸들러 함수를 가질 수 있으며, 그 함수는 라우트가 <strong>일치할 때 실행</strong></li>\n</ul>\n<h3>라우트의 기본 구조</h3>\n<p>라우트 정의에는 다음과 같은 구조가 필요</p>\n<ul>\n<li>app은 express의 인스턴스</li>\n<li>METHOD는 HTTP 요청 메소드</li>\n<li>PATH는 서버에서의 경로</li>\n<li>HANDLER는 라우트가 일치할 때 실행되는 함수</li>\n</ul>\n<pre><code class=\"language-javascript\">app.METHOD(PATH, HANDLER)\n</code></pre>\n<h4>HTTP 요청 메소드</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메서드 이름</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">app.get()</td>\n<td align=\"left\">get 요청 처리</td>\n</tr>\n<tr>\n<td align=\"left\">app.post()</td>\n<td align=\"left\">post 요청 처리</td>\n</tr>\n<tr>\n<td align=\"left\">app.put()</td>\n<td align=\"left\">put 요청 처리</td>\n</tr>\n<tr>\n<td align=\"left\">app.delete()</td>\n<td align=\"left\">delete 요청 처리</td>\n</tr>\n</tbody>\n</table>\n<h3>기본적인 router 미들웨어 예시</h3>\n<p>router 미들웨어는 라우팅을 구현하는 미들웨어</p>\n<pre><code class=\"language-javascript\">var express = require('express');\nvar app = express();\n\n// 사용자의 '/' get 요청에 서버는 hello world로 응답\napp.get('/', function(req, res) {\n  res.send('hello world');\n});\n</code></pre>","id":"c6bd1c00-5a9b-5611-852d-efbb1ae9ddfe"}},"pageContext":{"slug":"2019-08-05-nodejs-05-router"}}}