{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2019-08-12-react-00-intro","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React 소개와 프로젝트 생성","tags":["React"]},"fields":{"slug":"2019-08-12-react-00-intro"},"html":"<blockquote>\n<p>ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.<br>\n<a href=\"https://www.w3schools.com\">w3school</a> 참고</p>\n</blockquote>\n<h1>React 소개와 프로젝트 생성</h1>\n<h2>React?</h2>\n<ul>\n<li>React는 사용자 인터페이스를 구축하기위한 JavaScript 라이브러리</li>\n<li>가상 DOM 사용 <code>동적 UI</code>  React는 단지 ReactDOM.render로 DOM으로 렌더링되도록 한다.</li>\n<li>단방향 데이터 흐름 지향 <code>개발과 유지보수가 편리한 재사용 가능한 UI 구성</code></li>\n</ul>\n<h3>프로젝트 생성 준비</h3>\n<ol>\n<li>react 폴더 생성 후 app.js 와 index.html 생성</li>\n<li>index파일 body 태그 밑에 개발 요소 삽입</li>\n</ol>\n<h4>1. index.html 구성</h4>\n<p>index.html의 body 태그 안에 아래 태그들을 삽입 </p>\n<pre><code class=\"language-html\">&#x3C;body>\n&#x3C;div id=\"root\">\n  &#x3C;!--RootDOM Node = ReactDOM에 의해 #root태그에 모든 태그가 그려짐--> \n&#x3C;/div>\n&#x3C;script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\">&#x3C;/script>\n&#x3C;script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\">&#x3C;/script>\n&#x3C;script src=\"./app.js\">&#x3C;/script>\n&#x3C;/body>\n</code></pre>\n<ul>\n<li>대부분 ReactJS로 구현된 앱은 <code>하나의 RootDOM Node</code>를 가진다</li>\n<li><strong>react</strong> 스크립트는 core 부분에 해당, <strong>react-dom</strong> 스크립트는 웹을 개발할때 필요한 요소</li>\n</ul>\n<h4>2. app.js 구성</h4>\n<p>app.js에 ReactElement를 생성 </p>\n<ul>\n<li><code>element</code>란 <strong>ReactJS 앱을 구성하는 가작 작은 단위</strong></li>\n<li>컴포넌트는 주어진 조건에 맞게 <strong>element 생성 후 반환</strong></li>\n<li><strong>컴포넌트는 함수, element는 리턴 값</strong> - 다음장에서 부가 설명</li>\n</ul>\n<p>createElement는 3가지 파라메터를 가진다<br>\n첫번째는 <strong>엘리먼트 혹은 노드</strong>, 두번째는 <strong>속성</strong>, 세번째는 <strong>자식 노드</strong></p>\n<pre><code class=\"language-javascript\">const title = React.createElement(\n  'h1', // 엘리먼트 혹은 노드\n  { id: 'main-title', title: 'This is a title'}, // 속성\n  'My First React Element' // 자식 노드\n);\n\nconsole.log(title);\nReactDOM.render(title, document.getElementById('root'));\n// 첫번째는 화면에 그려줄 React element, 두번째는 container, 세번째는 callback(생략가능)\n</code></pre>\n<h3>실행하기</h3>\n<p>index.html 실행\napp.js에서 생성한 컴포넌트 확인\n( 소스 수정 후에 웹페이지가 업데이트가 안되면 control-shift-r 을 눌러서 캐쉬를 지운 후 새로 고침 )</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/index-html.jpg\" alt=\"\" width=\"600\">\n<figcaption>컴포넌트로 속성이 들어간 h1태그</figcaption>\n</figure>\n</center>\n<h4>컴포넌트 예제</h4>\n<p>header element를 만들고 header element의 자식으로 <strong>title</strong> 과 <strong>desc element</strong>를 포함하도록 한다</p>\n<pre><code class=\"language-javascript\">// title element 생성후 리턴\nconst title = React.createElement(\n  'h1',\n  { id: 'main-title', title: 'This is a title'},\n  'My First React Element'\n);\n\n// desc element 생성후 리턴\nconst desc = React.createElement(\n  'p',\n  null,\n  'This is Description'\n);\n\n// header element 내부에 title과 desc 포함\nconst header = React.createElement(\n  'header',\n  null,\n  title, desc\n);\n\n// header Element를 DOM으로 렌더링\nReactDOM.render(header, document.getElementById('root'));\n</code></pre>\n<hr>\n<h3>react 렌더링</h3>\n<ol>\n<li>react는 실제 DOM 노드(ex - h1, div, span)를 만들지 않고 DOM 노드를 서술하는 <strong>자바스크립트 객체를 생성</strong>  ㄴ createElement()를 사용하여 자바스크립트 객체 생성</li>\n<li>render() 메서드가 실행  ㄴ createElement()로 만들어진 자바스크립트 객체를 실제 DOM으로 만들고 업데이트해주는 역할</li>\n<li>처음에 한번 전체 DOM을 렌더링 한 이후에는 <strong>필요한 부분만 업데이트</strong>를 하게 된다.  ㄴ 메모리에 올라간 자바스크립트 객체에서 변경된 부분을 찾은 후 매핑되는 DOM 만 업데이트</li>\n</ol>","id":"47d22f88-0342-544c-8a16-847eea8d0c25"}},"pageContext":{"slug":"2019-08-12-react-00-intro"}}}