{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2019-08-13-react-03-props","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React props 개념과 사용","tags":["React"]},"fields":{"slug":"2019-08-13-react-03-props"},"html":"<blockquote>\n<p>ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.<br>\n<a href=\"https://www.w3schools.com\">w3school</a> 참고</p>\n</blockquote>\n<h1>React props</h1>\n<h2>props?</h2>\n<ul>\n<li>컴포넌트에서 사용할 데이터 중 변하지 않는 데이터를 다룰 때 사용</li>\n<li>부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 사용</li>\n<li>부모 컴포넌트로 받은 데이터, 값을 바꿀 수 없는 데이터 <code>read only</code></li>\n<li>props 형태는 string, array, object, function 어떤 타입이든 상관없이 지정</li>\n</ul>\n<h3>함수형 컴포넌트에서 props 사용하기</h3>\n<pre><code class=\"language-javascript\">function Square(props){\n  return(\n    &#x3C;h1>{props.number} square is {props.number * props.number}&#x3C;/h1>\n  )\n}\n\nReactDOM.render(\n  // Attribute로 number를 넘겨줌\n  &#x3C;Square number=\"2\" />,\n  document.getElementById('root')\n)\n</code></pre>\n<p><Square/> JSX 태그에 Attribute로 number가 정의되어 있는 것을 볼 수 있습니다<br>\n이 <strong>number attribute는 Square 컴포넌트의 인자</strong>로 넘어가게 되는데, 이것을 props라고 합니다. </p>\n<h3>클래스형 컴포넌트에서 props 사용하기</h3>\n<p>자바스크립트의 클래스에서 클래스 안의 메서드를 사용하기 위해서는 <code>this 메서드</code>를 사용해야 합니다.  </p>\n<pre><code class=\"language-javascript\">class TestClass{\n  printLog(){\n    console.log(\"print\");\n  }\n  printer(){\n    this.printLog();\n    // this 메서드 사용\n  }\n}\n</code></pre>\n<p>위 TestClass는 printLog 메서드와 printer 메서드 2개의 메서드가 존재하고,<br>\nprinter 메서드에서 printLog 메서드를 사용하기 위해서는 this.printLog()와 같이 <strong>this 메서드</strong>를 통하여 사용하게 됩니다.<br>\n마찬가지로 props 또한 this 메서드를 통해 사용해야 합니다.  </p>\n<pre><code class=\"language-javascript\">class Square extends React.Component{\n  render(){\n    return(\n      &#x3C;h1>{this.props.number} square is {this.props.number * this.props.number}&#x3C;/h1>\n      // 클래스형 컴포넌트로 변경되어 this.props.number 으로 변경\n    );\n  }\n}\nReactDOM.render(\n  &#x3C;Square number=\"2\" />,\n  document.getElementById('root')\n)\n</code></pre>\n<p>함수형 컴포넌트를 클래스형 컴포넌트로 바꾼 예제이다. props.number가 this.props.number으로 변경되었다.</p>\n<h3>수정 불가능한 props</h3>\n<p><strong>함수형 컴포넌트, 클래스형 컴포넌트 모두 props는 수정할 수 없습니다.</strong></p>\n<h4>순수 함수(pure function)</h4>\n<ul>\n<li>\n<p>함수의 인자를 수정하지 않는 함수를 <strong>순수 함수(pure function)</strong></p>\n<pre><code class=\"language-javascript\">function pure(a, b){\nreturn a + b;\n}\n</code></pre>\n</li>\n<li>\n<p>함수 안에서 인자가 수정되는 함수는 순수하지 않은 함수</p>\n<pre><code class=\"language-javascript\">function impure(account, amount){\naccount.total += amount\n}\n</code></pre>\n</li>\n</ul>\n<h2>props 기본값 설정하기</h2>\n<p>defaultProps를 설정하여 props의 기본값(default value)을 정의할 수 있습니다.<br>\nClassName.defaultProps = {propsName:value} 형태로 사용합니다.</p>\n<pre><code class=\"language-javascript\">UserInfo.defaultProps = {\n    job: 'programmer'\n}\n</code></pre>","id":"71115aba-c5cc-5cb1-a9af-cf70aa0cd04f"}},"pageContext":{"slug":"2019-08-13-react-03-props"}}}