{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-08-14-react-05-example2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 2","tags":["React","Exercise"]},"fields":{"slug":"2019-08-14-react-05-example2"},"html":"<blockquote>\n<p>ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.<br>\n<a href=\"https://www.w3schools.com\">w3school</a> 참고</p>\n</blockquote>\n<h1>scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 2</h1>\n<h2>props 사용하여 scoreboard 제작</h2>\n<h3>App 컴포넌트 재구성</h3>\n<p>Header 컴포넌트를 html attribute처럼 설정한다.<br>\ntitle은 스트링으로 넘어갈 것이고 totalPlayers는 JSX expression으로 설정했으므로 number 타입으로 넘어간다.\nJSX에서 주석은 자바스크립트와 같으나 {}로 묶어준다 - <strong>{/* 주석 내용 */}</strong></p>\n<pre><code class=\"language-javascript\">const App = () => {\n  return (\n    // 이전 코드는 &#x3C;Header />로 구성되어 있었음\n    &#x3C;div className=\"scoreboard\">\n      &#x3C;Header title=\"My scoreboard\" totalPlayers={1 + 10} />\n      \n      {/*Players List*/}\n      &#x3C;Player />\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<h3>Header 컴포넌트 재구성</h3>\n<pre><code class=\"language-javascript\">const Header = (props) => {\n  console.log(props); \n  // props가 객체로 넘어온다는것을 확인\n  // 결과 > {title: \"My scoreboard!\", totalPlayers: 11}\n  return (\n    &#x3C;header className=\"header\">\n      &#x3C;h1 className=\"h1\">{ props.title }&#x3C;/h1>\n      &#x3C;span className=\"stats\">Players: { props.totalPlayers }&#x3C;/span>\n    &#x3C;/header>\n  )\n}\n</code></pre>\n<p>다시 한번 짚어야 할 것은 pros는 read only (or immutable) 이라는것 이다.<br>\n읽기만 가능. 그 <code>값을 변경하면 안된다</code>.<br>\n컴포넌트 트리에서 높은쪽에 있는 부모 컴포넌트가 property 값을 소유하고 있고 또한 수정 등의 컨트롤을 할 수 있지만 <strong>자식이 그 값을 변경하게 되면 리액트는 에러</strong>를 던진다.</p>\n<hr>\n<h2>Player가 한명이 아니라 아래와 같이 여러명이 있을 경우</h2>\n<h3>Player의 name 과 score props를 App 컴포넌트에서 전달</h3>\n<pre><code class=\"language-javascript\">const App = () => {\n  return (\n    &#x3C;div className=\"scoreboard\">\n      &#x3C;Header title=\"My scoreboard\" totalPlayers={1 + 10} />\n      \n      {/*Players List 반복*/}\n      &#x3C;Player name=\"LDK\" score={50} />\n      &#x3C;Player name=\"HONG\" score={60} />\n      &#x3C;Player name=\"KIM\" score={70} />\n      &#x3C;Player name=\"PARK\" score={80} />\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<p>Player 컴포넌트를 여러번 쓰는 방법 대신 정보를 가지고 있는 json Array 데이터를 만들자.<br>\nReact는 자바스크립트 언어만 사용해서 반복문 구현 가능  </p>\n<pre><code class=\"language-javascript\">const players = [\n  {name: 'LDK', score: 30},\n  {name: 'HONG', score: 40},\n  {name: 'KIM', score: 50},\n  {name: 'PARK', score: 60},\n];\n</code></pre>\n<p><strong>Player 컴포넌트에서 name</strong> 을 표시하고 <strong>score는 하위 컴포넌트인 Counter 컴포넌트</strong>로 다시 넘겨야 한다.  </p>\n<pre><code class=\"language-javascript\">const Player = (props) => {\n  return (\n    &#x3C;div className=\"player\">\n      &#x3C;span className=\"player-name\">\n        {/* 반복 */}\n        {props.name} \n      &#x3C;/span>\n      \n      {/* props 전달 */}\n      &#x3C;Counter score={props.score} /> \n    &#x3C;/div>\n  );\n}\n \nconst Counter = (props) => {\n  return (\n    &#x3C;div className=\"counter\">\n      &#x3C;button className=\"counter-action decrement\"> - &#x3C;/button>\n      &#x3C;span className=\"counter-score\">{props.score}&#x3C;/span>\n      &#x3C;button className=\"counter-action increment\"> + &#x3C;/button>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<p>위의 players json Array를 렌더링할 때 top-level 엘리먼트인 <code>App</code>에 <code>props</code>로 입력한 후에 다시 App 컴포넌트에서 props로 받은 후에 player에게 전달<br>\nprops 최상단 엘리먼트가 모든 props를 다 가지고 있다가 그걸 자식에게 넘겨주는 형태가 바람직  </p>\n<pre><code class=\"language-javascript\">const App = (props) => {\n  return (\n    &#x3C;div className=\"scoreboard\">\n      &#x3C;Header title=\"My scoreboard\" totalPlayers={props.initialPlayers.length} />\n      \n      {/* 2. 받아온 initialPlayers props를 새로운 배열을 리턴 후 player에 넘겨줌 */}\n      { \n      props.initialPlayers.map(item => \n        &#x3C;Player name={item.name} score={item.score} />) \n      }\n    &#x3C;/div>\n  );\n}\n\n// 1. {players} 를 initialPlayers로 JSX 문법 사용하여 전달\nReactDOM.render(&#x3C;App initialPlayers={players} />, document.getElementById('root'));\n</code></pre>\n<ul>\n<li>map은 새로운 배열을 리턴한다.  </li>\n<li>JSX expression은 모두 { } 안에 포함되어져야 한다.  </li>\n<li>실행은 잘되지만 콘솔창을 보면 warning이 발생한다.  </li>\n<li>player Array를 특정한 key로 구분해야 한다.  </li>\n<li>상수 players 객체안에 id값을 추가하여 player 각각 key값을 넣어준다.  </li>\n</ul>\n<pre><code class=\"language-javascript\">const players = [\n  {name: 'LDK', score: 30, id: 1},\n  {name: 'HONG', score: 40, id: 2},\n  {name: 'KIM', score: 50, id: 3},\n  {name: 'PARK', score: 60, id: 4},\n];\nconst App = (props) => {\n  return (\n    &#x3C;div className=\"scoreboard\">\n      &#x3C;Header title=\"My scoreboard\" totalPlayers={props.initialPlayers.length} />\n      \n      {/*Players List*/}\n      { \n        props.initialPlayers.map(item => \n        &#x3C;Player \n        name={item.name} \n        score={item.score} \n        key={item.id.toString()} />) \n      }\n    &#x3C;/div>\n  );\n}\nReactDOM.render(&#x3C;App initialPlayers={players} />, document.getElementById('root'));\n</code></pre>","id":"d3ed7648-d017-5903-98ca-93bfe91e1b73"}},"pageContext":{"slug":"2019-08-14-react-05-example2"}}}