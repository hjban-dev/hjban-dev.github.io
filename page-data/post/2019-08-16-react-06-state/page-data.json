{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2019-08-16-react-06-state","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React state 개념과 사용","tags":["React"]},"fields":{"slug":"2019-08-16-react-06-state"},"html":"<blockquote>\n<p>ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.<br>\n<a href=\"https://www.w3schools.com\">w3school</a> 참고</p>\n</blockquote>\n<h1>React state</h1>\n<h2>state?</h2>\n<ul>\n<li>수정될 수 있는 값</li>\n<li>state가 수정되면 ReactDOM.render 메서드가 호출되어 DOM이 업데이트</li>\n<li>DOM을 업데이트해야 한다면 ReactDOM.render 메서드를 다시 호출할 필요 없이 state 값 업데이트</li>\n<li><strong>시간에 따라 변하는 데이터가 있다면 그 상태를 state로 관리하고 state의 값을 변하면 state와 연결된 뷰가 자동으로 렌더링이 된다.</strong></li>\n</ul>\n<h3>state 사용하기</h3>\n<ol>\n<li>클래스형 컴포넌트 사용</li>\n<li>props를 state로 변경하기</li>\n<li>컴포넌트 생명주기 메서드에서 state 사용하기</li>\n</ol>\n<h3>setState 사용하기</h3>\n<ul>\n<li>state를 업데이트하기 위해서는 반드시 setState 메서드 사용</li>\n</ul>\n<pre><code class=\"language-javascript\">this.setState({\n    comment: 'hello'\n})\n</code></pre>\n<p>this.state에 직접 값을 넣는 방법은 constructor 메서드에서 이루어져야 합니다.</p>\n<ul>\n<li>비동기적으로 업데이트</li>\n</ul>\n<pre><code class=\"language-javascript\">// 잘못된 방법\nthis.setState({\n    counter: this.state.counter + this.props.increment\n})\n</code></pre>\n<pre><code class=\"language-javascript\">// 올바른 방법\nthis.setState((prevState, props) => {\n    counter: prevState.counter + props.increment\n})\n</code></pre>\n<h3>props 와 state</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">props</th>\n<th align=\"left\">state</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">부모 컴포넌트가 자식 컴포넌트에게 주는 값</td>\n<td align=\"left\">컴포넌트 내부에 선언</td>\n</tr>\n<tr>\n<td align=\"left\">수정할 수 없음</td>\n<td align=\"left\">내부에서 변경 가능</td>\n</tr>\n</tbody>\n</table>","id":"0c69dea0-a450-5d0a-81cc-d5bd8a251890"}},"pageContext":{"slug":"2019-08-16-react-06-state"}}}