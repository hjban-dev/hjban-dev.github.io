{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-08-21-nodejs-10-mongo","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하기"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nNode.js에서 MongoDB 사용하는 법을 알아본다  </p>\n</blockquote>\n<h1>Node.js에서 MongoDB 사용과 메서드</h1>\n<p><a href=\"https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/\">MongoDB 설치 및 명령어 포스트</a></p>\n<h2>Mongojs 설치 및 모듈 선언 <a href=\"https://www.npmjs.com/package/mongojs\">npm mongojs 참고</a></h2>\n<ul>\n<li>설치 <code>npm install mongojs --save</code>\n(package.json 에서 설치 확인)</li>\n<li>\n<p>app.js에 해당 모듈 추가 </p>\n<ul>\n<li><strong>const MongoClient = require('mongodb').MongoClient</strong></li>\n<li>MongoClient : MongoDB 데이터베이스에 연결하면서 상호 작용을 처리하는 Nodejs 라이브러리</li>\n</ul>\n</li>\n<li>MongoDB 서버에 대한 URL 추가 </li>\n<li><strong>const url = 'mongodb://localhost:27017'</strong>  (MongoDB URL의 기본 포트 : 27017)</li>\n</ul>\n<pre><code class=\"language-javascript\">const MongoClient = require('mongodb').MongoClient;\nconst url = 'mongodb://localhost:27017';\n</code></pre>\n<h2>MongoClient.connect() 사용하여 연결</h2>\n<p>MongoClient.connect() 메서드로 mongodb와 연결<br>\nclient.db() 메서드로 데이터 베이스 사용 가능</p>\n<pre><code class=\"language-javascript\">MongoClient.connect(url, function(err, client) {\n  if (err) throw err;\n  // mydb 라는 데이터 베이스를 사용\n  const dbMydb = client.db(\"mydb\");\n});\n</code></pre>\n<h2>collection 생성과 가져오기</h2>\n<p>collection() 메서드로 컬렉션을 한다.<br>\n컬렉션이 없으면 자동 생성됨</p>\n<pre><code class=\"language-javascript\">const collection = dbMydb.collection('dogs');\n// dbMydb 데이터베이스에 컬렉션 생성 또는 가져오기\n</code></pre>\n<h2>collection에 데이터 추가</h2>\n<p>insertOne() 메소드를 사용하여 dogs 콜렉션에 데이터 추가</p>\n<pre><code class=\"language-javascript\">collection.insertOne({name: 'Roger'}, (err, result) => {\n  // ....\n})\n</code></pre>\n<p>insertMany() 메서드를 사용하여 여러 항목 추가 가능<br>\n첫 번째 매개 변수로 배열을 전달할 수 있다.</p>\n<pre><code class=\"language-javascript\">collection.insertMany([{name: 'Togo'}, {name: 'Syd'}], (err, result) => {\n  // ...\n})\n</code></pre>\n<h2>컬렉션 데이터 가져오기</h2>\n<p>find() 메소드를 사용하여 컬렉션에 추가 된 모든 데이터를 가져옵니다.<br>\n추출한 데이터를 toArray()를 사용하여 배열 형태로 반환<br>\n<strong>매개변수 items 는 find() 의 실행 결과값이 들어있음</strong></p>\n<pre><code class=\"language-javascript\">collection.find().toArray((err, items) => {\n  console.log(items)\n})\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/toarray.jpg\" alt=\"\">\n<figcaption>코드 실행 결과</figcaption>\n</figure>\n</center>\n<h3>특정 데이터 찾기</h3>\n<pre><code class=\"language-javascript\">collection.find({name: 'Togo'}).toArray((err, items) => {\n  console.log(items)\n})\n</code></pre>\n<p>데이터 최상단 하나만 찾기 (toArray() 생략가능)</p>\n<pre><code class=\"language-javascript\">collection.findOne({name: 'Togo'}, (err, item) => {\n  console.log(item)\n})\n</code></pre>\n<h2>데이터 업데이트</h2>\n<p>updateOne() 메서드 사용<br>\n첫번째 매개변수는 필드 선택, 두번째 매개변수에 조건  </p>\n<pre><code class=\"language-javascript\">collection.updateOne({name: 'Togo'}, {'$set': {'name': 'Togo2'}}, (err, item) => {\n  console.log(item)\n})\n</code></pre>\n<h2>데이터 삭제</h2>\n<p>udeleteOne() 메서드 사용<br>\n첫번째 매개변수는 필드 선택  </p>\n<pre><code class=\"language-javascript\">collection.deleteOne({name: 'Togo'}, (err, item) => {\n  console.log(item)\n})\n</code></pre>\n<h2>연결 종료</h2>\n<pre><code class=\"language-javascript\">client.close()\n</code></pre>"}},"pageContext":{"slug":"2019-08-21-nodejs-10-mongo"}}}