{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2019-08-21-nodejs-11-login1","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하는 로그인 예제 1","tags":["Nodejs","MongoDB","Exercise"]},"fields":{"slug":"2019-08-21-nodejs-11-login1"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nNode.js에서 MongoDB 사용하는 법을 알아본다  </p>\n</blockquote>\n<h1>Node.js에서 MongoDB 사용하여 만드는 로그인 예제</h1>\n<p><a href=\"https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/\">MongoDB 설치 및 명령어 포스트</a><br>\n<a href=\"https://hjban-dev.github.io/nodejs/2019/08/21/nodejs-10-mongo1/\">Node 에서 MongoDB 사용 및 명령어 포스트</a></p>\n<h2>구성</h2>\n<p>mongoDB에 local 데이터베이스 안에 users 라는 collection 안에 회원 정보가 있다는 가정하에 예제가 실행된다. 회원 정보에는 id, name, password 필드 있음.<br>\n추가 방법은 위 링크에서 확인</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/mongo-data.jpg\" alt=\"\">\n<figcaption>필자의 mongoDB의 users 데이터</figcaption>\n</figure>\n</center>\n<ol>\n<li>서버 연결</li>\n<li>public 폴더 생성 후 login.html 생성 및 구축</li>\n<li>static 미들웨어로 public 폴더 설정</li>\n<li>router 미들웨어로 post 요청 확인</li>\n<li>MongoDB 연결 - connectDB() 함수 생성 후 연결</li>\n<li>body-parser 미들웨어 등록 후 loginData 변수 생성</li>\n<li>db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 생성</li>\n<li>authUser 함수실행. 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect</li>\n<li>완료</li>\n</ol>\n<h3>1. 서버 연결</h3>\n<p>아래 코드는 서버 연결하기 위한 코드. (외우는 게 좋다)</p>\n<pre><code class=\"language-javascript\">var http = require('http');\nvar express = require('express');\n\nvar app = express();\nvar router = express.Router();\n\napp.set('port', process.env.PORT || 3000);\n\napp.use(router); // router 미들함수 등록\nvar server = http.createServer(app);\nserver.listen(app.get('port'), function(){\n  console.log('connected http://localhost%d', app.get('port'))\n});\n</code></pre>\n<h3>2. public 폴더 생성 후 login.html 생성 및 구축</h3>\n<p>form 태그의 action 속성은 /process/login 으로, method 속성은 post 방식으로 지정</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n  &#x3C;meta charset=\"UTF-8\">\n  &#x3C;title>/public/login.html&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n  &#x3C;h1>로그인 페이지&#x3C;/h1>\n  &#x3C;!-- action 속성은 /process/login method 속성은 post로 지정 -->\n  &#x3C;form action=\"/process/login\" method=\"post\">\n    &#x3C;table border=\"1\">\n      &#x3C;tr>\n        &#x3C;td>아이디&#x3C;/td>\n        &#x3C;td>&#x3C;input type=\"text\" name=\"id\">&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td>비밀번호&#x3C;/td>\n        &#x3C;td>&#x3C;input type=\"password\" name=\"password\">&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td colspan=\"2\">\n          &#x3C;input type=\"submit\" value=\"로그인\">\n        &#x3C;/td>\n      &#x3C;/tr>\n    &#x3C;/table>\n  &#x3C;/form>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/public-login.jpg\" alt=\"\">\n<figcaption>/public/login.html 페이지 뷰</figcaption>\n</figure>\n</center>\n<h3>3. static 미들웨어로 public 폴더 설정</h3>\n<p>express에 내장된 static 미들웨어 사용</p>\n<pre><code class=\"language-javascript\">app.use('/public', express.static(__dirname + '/public'));\n</code></pre>\n<h3>4. router 미들웨어로 post 요청 확인</h3>\n<p>post 방식이라 localhost:3000/public/login.html 에서 로그인 버튼으로 확인 가능함</p>\n<pre><code class=\"language-javascript\">router.route('/process/login').post(function(req, res){\n  console.log('POST - /process/login');\n  res.send();\n});\n</code></pre>\n<h3>5. MongoDB 연결 - connectDB() 함수 생성 후 연결</h3>\n<h4>5-1. mongodb 모듈 추출 후 MongoClient 생성</h4>\n<pre><code class=\"language-javascript\">var MongoClient = require('mongodb').MongoClient;\n</code></pre>\n<h4>5-2. DB 접속하는 connectDB() 함수 생성</h4>\n<pre><code class=\"language-javascript\">var db;\nfunction connectDB(){\n  var dbURL = 'mongodb://localhost:27017';\n  MongoClient.connect(dbURL, function(err, client){\n    if(err) throw err;\n    // db 안에는 local 데이터베이스의 데이터가 들어가있다\n    db = client.db('local');\n    console.log('DB접속 성공 : ', dbURL);\n  });\n}\n</code></pre>\n<p>db는 local 데이터베이스의 데이터, 다시 말해 db 접속이 성공 했을때만 변수안에 정보가 있다는 말</p>\n<h4>5-3. server에 connectDB() 실행 코드 추가</h4>\n<pre><code class=\"language-javascript\">var server = http.createServer(app);\nserver.listen(app.get('port'), function() {\n  console.log('http://localhost:%d', app.get('port'));\n  // connectDB() 추가 \n  connectDB();\n});\n</code></pre>","id":"b7cba6d9-fc73-57af-842b-3047229b3183"}},"pageContext":{"slug":"2019-08-21-nodejs-11-login1"}}}