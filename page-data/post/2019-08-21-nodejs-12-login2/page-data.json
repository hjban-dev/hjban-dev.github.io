{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-08-21-nodejs-12-login2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하는 로그인 예제 2"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nNode.js에서 MongoDB 사용하는 법을 알아본다  </p>\n</blockquote>\n<h1>Node.js에서 MongoDB 사용하여 만드는 로그인 예제</h1>\n<p><a href=\"https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/\">MongoDB 설치 및 명령어 포스트</a><br>\n<a href=\"https://hjban-dev.github.io/nodejs/2019/08/21/nodejs-10-mongo1/\">Node 에서 MongoDB 사용 및 명령어 포스트</a></p>\n<h2>구성</h2>\n<p>mongoDB에 local 데이터베이스 안에 users 라는 collection 안에 회원 정보가 있다는 가정하에 예제가 실행된다. 회원 정보에는 id, name, password 필드 있음.<br>\n추가 방법은 위 링크에서 확인</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/mongo-data.jpg\" alt=\"\">\n<figcaption>필자의 mongoDB의 users 데이터</figcaption>\n</figure>\n</center>\n<ol>\n<li>서버 연결</li>\n<li>public 폴더 생성 후 login.html 생성 및 구축</li>\n<li>static 미들웨어로 public 폴더 설정</li>\n<li>router 미들웨어로 post 요청 확인</li>\n<li>MongoDB 연결 - connectDB() 함수 생성 후 연결</li>\n<li>body-parser 미들웨어 등록 후 loginData 변수 생성</li>\n<li>db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 생성</li>\n<li>authUser 함수실행. 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect</li>\n<li>완료</li>\n</ol>\n<h3>6. body-parser 미들웨어 등록 후 loginData 불러오기</h3>\n<h4>6-1. body-parser 모듈 추출, 미들웨어 등록</h4>\n<pre><code class=\"language-javascript\">var bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded({extended : false}));\n</code></pre>\n<h4>6-2. loginData 변수 생성</h4>\n<p>/public/login.html 에서 입력한 id, pw 정보를 불러오는 loginData 변수 생성</p>\n<pre><code class=\"language-javascript\">var loginData = {\n  id : req.body.id,\n  password: req.body.password\n}\n</code></pre>\n<p>loginData 정보 확인</p>\n<pre><code class=\"language-javascript\">router.route('/process/login').post(function(req, res){\n  console.log('POST - /process/login');\n\n  var loginData = {\n    id : req.body.id,\n    password: req.body.password\n  }\n\n  res.send(loginData);\n});\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/logindata.jpg\" alt=\"\">\n<figcaption>loginData 확인</figcaption>\n</figure>\n</center>\n<h3>7. db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 실행</h3>\n<h4>7-1. /process/login 페이지로 넘어왔을 때 db정보가 있는지 확인하고 있으면 authUser 함수 실행</h4>\n<pre><code class=\"language-javascript\">router.route('/process/login').post(function(req, res){\n  console.log('POST - /process/login');\n  // ...\n  console.log(db);\n  if(db) {\n    authUser();\n  }\n  \n  res.send(loginData);\n});\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/login-db.jpg\" alt=\"\">\n<figcaption>connectDB()실행 후 console 결과</figcaption>\n</figure>\n</center>\n<h4>7-2. authUser 함수 생성</h4>\n<p>authUser 함수에는 <strong>db</strong>, <strong>loginData</strong>, <strong>callback 함수</strong>가 매개변수로 들어가고<br>\n<strong>db</strong> 에는 local 데이터베이스의 데이터, <strong>loginData</strong>는 사용자가 입력한 id, pw 정보 들어있음  </p>\n<p>변수 users 에는 db의 <strong>users collection</strong> 만 담아두고<br>\nusers에 fund()메서드 사용하여 매개변수에 loginData 조건 넣은 후 일치하는 데이터 가져오기</p>\n<pre><code class=\"language-javascript\">function authUser(db, loginData, callback) {\n  var users = db.collection('users');\n  users.find(loginData).toArray(function(err, docs){\n    // docs = find() 의 실행 결과 값\n    console.log(\"docs >>> \", docs);\n    // find(loginData) 가 있으면 배열 안의 객체 형태로 들어가있고,\n    // 조건에 맞지 않으면 빈 배열 [] 만 있다\n  })\n}\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/login-docs.jpg\" alt=\"\">\n<figcaption>조건에 따른 docs 결과</figcaption>\n</figure>\n</center>\n<h4>7-3. error 처리</h4>\n<p>err 안에 데이터 있으면 콜백 함수 실행해서 error 처리</p>\n<pre><code class=\"language-javascript\">function authUser(db, loginData, callback) {\n  var users = db.collection('users');\n  users.find(loginData).toArray(function(err, docs){\n    if(err){\n      callback(err, null)\n    }\n  })\n}\n</code></pre>\n<h4>7-4. 데이터 조건에 따라 콜백함수 실행</h4>\n<p>docs 배열안에 데이터가 있으면 콜백함수로 docs 보내고 아니면 null 객체 전달</p>\n<pre><code class=\"language-javascript\">if(docs.length > 0) {\n  console.log('사용자 정보 %s가 있다.', docs[0].name);\n  callback(null, docs);\n} else {\n  console.log('사용자 정보가 없다')\n  callback(null, null);\n  // callback 함수 통해서 req, res 응답 할 수 있음\n}\n</code></pre>\n<h3>8. authUser 함수 : 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect</h3>\n<p>정보가 있으면 데이터의 이름을 불러와서 환영하고, 없으면 a 링크로 로그인 페이지에 redirect<br>\n기존의 res.send(loginData); 는 삭제</p>\n<pre><code class=\"language-javascript\">router.route('/process/login').post(function(req, res){\n  // ...\n\n  if(db) {\n    authUser(db, loginData, function(err, docs){\n      if(err) throw err;\n\n      if(docs){\n        res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\n        res.write('&#x3C;h1>로그인 성공!&#x3C;/h1>');\n        res.write(docs[0].name + '님 환영합니다&#x3C;br>');\n        res.write('&#x3C;a href=\"/public/login.html\">로그아웃&#x3C;/a>');\n        res.end();\n       }else{\n          res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\n          res.write('&#x3C;h1>로그인 실패!&#x3C;/h1>');\n          res.write('&#x3C;a href=\"/public/login.html\">다시 로그인&#x3C;/a>');\n          res.end();\n        }\n    });\n  }\n});\n</code></pre>"}},"pageContext":{"slug":"2019-08-21-nodejs-12-login2"}}}