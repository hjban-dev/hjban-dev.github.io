{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-08-22-nodejs-13-login3","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하는 로그인 예제 전체 코드","tags":["Nodejs","MongoDB","Exercise"]},"fields":{"slug":"2019-08-22-nodejs-13-login3"},"html":"<blockquote>\n<p><a href=\"https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#\">생활코딩 Node.js 강의</a> 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.<br>\nNode.js에서 MongoDB 사용하는 법을 알아본다  </p>\n</blockquote>\n<h1>Node.js에서 MongoDB 사용하여 만드는 로그인 예제</h1>\n<p><a href=\"https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/\">MongoDB 설치 및 명령어 포스트</a><br>\n<a href=\"https://hjban-dev.github.io/nodejs/2019/08/21/nodejs-10-mongo1/\">Node 에서 MongoDB 사용 및 명령어 포스트</a></p>\n<h2>구성</h2>\n<p>mongoDB에 local 데이터베이스 안에 users 라는 collection 안에 회원 정보가 있다는 가정하에 예제가 실행된다. 회원 정보에는 id, name, password 필드 있음.<br>\n추가 방법은 위 링크에서 확인</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/mongo-data.jpg\" alt=\"\">\n<figcaption>필자의 mongoDB의 users 데이터</figcaption>\n</figure>\n</center>\n<ol>\n<li>서버 연결</li>\n<li>public 폴더 생성 후 login.html 생성 및 구축</li>\n<li>static 미들웨어로 public 폴더 설정</li>\n<li>router 미들웨어로 post 요청 확인</li>\n<li>MongoDB 연결 - connectDB() 함수 생성 후 연결</li>\n<li>body-parser 미들웨어 등록 후 loginData 변수 생성</li>\n<li>db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 생성</li>\n<li>authUser 함수실행. 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect</li>\n<li>완료</li>\n</ol>\n<h3>9. 실행</h3>\n<center>\n<figure>\n<img src=\"/assets/post-img/nodejs/login-test.jpg\" alt=\"\">\n<figcaption>사용자 정보가 불일치 했을 떄와 일치 했을 때 결과</figcaption>\n</figure>\n</center>\n<hr>\n<h2>로그인 예제 전체 코드</h2>\n<pre><code class=\"language-javascript\">var http = require('http');\nvar express = require('express');\n\nvar MongoClient = require('mongodb').MongoClient;\nvar bodyParser = require('body-parser');\n\nvar app = express();\nvar router = express.Router();\n\napp.set('port', process.env.PORT || 3000);\n\napp.use('/public', express.static(__dirname + '/public'));\napp.use(bodyParser.urlencoded({extended : false}));\n\nvar db;\nfunction connectDB(){\n  var dbURL = 'mongodb://localhost:27017';\n  MongoClient.connect(dbURL, function(err, client){\n    if(err) throw err;\n    db = client.db('local');\n    console.log('DB접속 성공 : ', dbURL)\n  });\n}\n\nfunction authUser(db, loginData, callback){\n  var users = db.collection('users');\n\n  users.find(loginData).toArray(function(err, docs){\n    if(err){\n      callback(err, null)\n    }\n\n    if(docs.length > 0){\n      console.log('사용자 정보 %s가 있다.', docs[0].name);\n      callback(null, docs);\n    }else{\n      console.log('사용자 정보가 없다');\n      callback(null, null)\n    }\n  });\n}\n\n// router 미들웨어, /process/login 접속 했을 때 실행\nrouter.route('/process/login').post(function(req, res){\n  console.log('POST - /process/login');\n\n  var loginData = {\n    id : req.body.id,\n    password: req.body.password\n  }\n\n  if(db){\n    console.log(db)\n    authUser(db, loginData, function(err, docs){\n      if(err) throw err;\n\n      if(docs){\n        res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\n        res.write('&#x3C;h1>로그인 성공!&#x3C;/h1>');\n        res.write(docs[0].name + '님 환영합니다&#x3C;br>');\n        res.write('&#x3C;a href=\"/public/login.html\">로그아웃&#x3C;/a>');\n        res.end();\n      }else{\n        res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\n        res.write('&#x3C;h1>로그인 실패!&#x3C;/h1>');\n        res.write('&#x3C;a href=\"/public/login.html\">다시 로그인&#x3C;/a>');\n        res.end();\n      }\n    });\n  }\n});\n\n\napp.use(router);\nvar server = http.createServer(app);\nserver.listen(app.get('port'), function(){\n  console.log('connected http://localhost%d', app.get('port'));\n  connectDB();\n});\n</code></pre>\n<p>위 코드는 KOSMO 노드JS 프로그래밍 수업에서 실행했던 예제이다. 수업 땐 쫓아가기 바빴지만 다시 한번 분석하여 내 코드로 만들어보니 좀 더 깊게 이해가 된다. 명령어를 더 활용하여, 회원가입과 회원탈퇴, 마이페이지 등 도 가능 할 것 같다.<br>\n(좀 더 공부하여 심화 예제 작성 예정)</p>","id":"aabe7399-b350-5b93-ac93-e9b6b76917f4"}},"pageContext":{"slug":"2019-08-22-nodejs-13-login3"}}}