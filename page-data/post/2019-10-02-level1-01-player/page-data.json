{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-10-02-level1-01-player","result":{"data":{"markdownRemark":{"frontmatter":{"title":"level 1-1. 완주하지 못한 선수 (Javascript)"},"html":"<h1>level 1. 완주하지 못한 선수</h1>\n<blockquote>\n<p>출처 : <a href=\"https://programmers.co.kr/learn/courses/30/lessons/42576\">https://programmers.co.kr/learn/courses/30/lessons/42576</a></p>\n</blockquote>\n<h2>문제</h2>\n<pre><code>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.  \n  \n마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때,  \n완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.  \n</code></pre>\n<h3>제한사항</h3>\n<ul>\n<li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li>\n<li>completion의 길이는 participant의 길이보다 1 작습니다.</li>\n<li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li>\n<li>참가자 중에는 동명이인이 있을 수 있습니다.</li>\n</ul>\n<h4>입출력 예</h4>\n<table>\n<thead>\n<tr>\n<th>participant</th>\n<th>completion</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[\"leo\", \"kiki\", \"eden\"]</td>\n<td>[\"eden\", \"kiki\"]</td>\n<td>\"leo\"</td>\n</tr>\n<tr>\n<td>[\"marina\", \"josipa\", \"nikola\", \"vinko\", \"filipa\"]</td>\n<td>[\"josipa\", \"filipa\", \"marina\", \"nikola\"]</td>\n<td>\"vinko\"</td>\n</tr>\n<tr>\n<td>[\"mislav\", \"stanko\", \"mislav\", \"ana\"]</td>\n<td>[\"stanko\", \"ana\", \"mislav\"]</td>\n<td>\"mislav\"</td>\n</tr>\n<tr>\n<td>[\"mislav\", \"mislav\", \"mislav\", \"mislav\"]</td>\n<td>[\"stanko\", \"mislav\", \"mislav\"]</td>\n<td>\"mislav\"</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>풀이</h2>\n<pre><code class=\"language-javascript\">function solution(participant, completion) {\n  var part = participant.sort();\n  var comp = completion.sort();\n  var answer = '';\n    \n  var i = 0;\n  for(i in part){\n      if(part[i] != comp[i]){\n        answer += part[i];\n        break;\n      }\n  }\n  return answer; \n}\n</code></pre>\n<p><code>sort()</code> 메서드로 매개변수로 들어온 배열을 정렬시키고,<br>\n앞에서부터 차례로 비교해서 값이 다른 배열 값을 리턴한다.</p>\n<hr>\n<h2>다른사람 풀이</h2>\n<pre><code class=\"language-javascript\">function solution(participant, completion) {\n  participant.sort();\n  completion.sort();\n\n  for(let i in participant) {\n    if(participant[i] !== completion[i]) return participant[i];\n  }\n}\n</code></pre>\n<p>나와 비슷한 코드이지만 더 간결하게 풀어내었다.\n하지만 for in 코드는 성능을 하락시키는 코드로, 캐쉬 방식보다 30프로 가량 늦게 측정된다는 댓글이 있었다.</p>\n<pre><code class=\"language-javascript\">function solution(participant, completion) {\n  var dic = completion.reduce((obj, t) => (obj[t] = obj[t] ? obj[t]+1 : 1 , obj) ,{});\n  return participant.find(t=> {\n    if(dic[t])\n      dic[t] = dic[t]-1;\n    else \n      return true;\n  });\n}\n</code></pre>\n<p>봐도 잘 모르겠다...<br>\nes6 문법을 더 공부하자는 의미로 가져왔다.</p>\n<hr>\n<h2>배운점</h2>\n<p>처음에 문제풀이 할 때 중첩 반복문 돌려서 배열 정렬하고, 그 안에서 또 배열을 반복하는 코드를 썼었다.<br>\n답은 전부 맞았다.<br>\n하지만 문제 효율성 체크 부분에서 시간 초과로 채점 불가 결과가 나왔고 비슷한 코드만 1293348번 수정했다.<br>\n도대체 답이 맞는데 효율성이 뭐길래...! 라는 멘붕속에서 sort() 메서드라는 약간의 힌트를 얻었고, 10분 후 문제를 해결했다.<br>\n<code>javascript 자체 내장 함수에 대해 더 공부하고 또 공부하고 복습하자.</code></p>\n<ul>\n<li>다시한번 <code>javascript 자체 내장 함수에 대해 더 공부하고 또 공부하고 복습하자.</code></li>\n<li>코드의 효율성을 생각하자.</li>\n<li>내 코드도 예쁘지만, 다른 사람의 코드도 심도있게 살펴보자.</li>\n<li>es6 문법 공부를 하자</li>\n</ul>"}},"pageContext":{"slug":"2019-10-02-level1-01-player"}}}