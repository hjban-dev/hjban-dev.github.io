{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-12-16-level1-15-division_array-","result":{"data":{"markdownRemark":{"frontmatter":{"title":"level 1-15. 나누어 떨어지는 숫자 배열 (Javascript)","tags":["Algorithm","Javascript","Exercise"]},"fields":{"slug":"2019-12-16-level1-15-division_array-"},"html":"<h1>level 1. 나누어 떨어지는 숫자 배열</h1>\n<blockquote>\n<p>출처 : <a href=\"https://programmers.co.kr/learn/courses/30/lessons/12918\">https://programmers.co.kr/learn/courses/30/lessons/12918</a></p>\n</blockquote>\n<h2>문제</h2>\n<pre><code>array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.\ndivisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.\n</code></pre>\n<h3>제한사항</h3>\n<ul>\n<li>arr은 자연수를 담은 배열입니다.</li>\n<li>정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.</li>\n<li>divisor는 자연수입니다.</li>\n<li>array는 길이 1 이상인 배열입니다.</li>\n</ul>\n<h4>입출력 예</h4>\n<table>\n<thead>\n<tr>\n<th>arr</th>\n<th>divisior</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[5, 9, 7, 10]</td>\n<td>5</td>\n<td>[5, 10]</td>\n</tr>\n<tr>\n<td>[2, 36, 1, 3]</td>\n<td>1</td>\n<td>[1, 2, 3, 36]</td>\n</tr>\n<tr>\n<td>[3, 2, 6]</td>\n<td>10</td>\n<td>[-1]</td>\n</tr>\n</tbody>\n</table>\n<p>입출력 예 설명</p>\n<ol>\n<li>arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다.</li>\n<li>arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다.</li>\n<li>3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다.</li>\n</ol>\n<hr>\n<h2>내가 한 풀이</h2>\n<pre><code class=\"language-javascript\">function solution(arr, divisor) {\n  var answer = [];\n  for(var i in arr){\n    arr[i] % divisor == 0 ? answer.push(arr[i]) : '';\n  }\n  \n  if(answer.length > 0){\n    answer.sort(function(a, b){ return a - b;}); \n  }else{\n    answer.push(-1);\n  }\n  \n  return answer;\n}\n</code></pre>\n<p>반복문으로 arr의 요소 각각을 divisor로 나누어 나머지가 0 이라면 answer에 push() 메서드로 넣는다.<br>\n나온 결과 answer의 요소가 있다면 오름차순으로 정렬, 없으면 -1을 추가 </p>\n<hr>\n<h2>다른사람 풀이</h2>\n<pre><code class=\"language-javascript\">function solution(arr, divisor) {\n  var answer = [];\n  arr.map((o) => {\n    o % divisor === 0 &#x26;&#x26; answer.push(o);\n  })\n  return answer.length ? answer.sort((a, b) => a - b) : [-1];\n}\n</code></pre>\n<p><code>map()</code> 메서드로 새 배열를 만들었다. <code>&#x26;&#x26;</code> 짧은 조건문으로 왼쪽 변이 참이면 오른쪽 변을 실행한다.<br>\n삼항연산자로 return 값 추출 </p>\n<pre><code class=\"language-javascript\">function solution(arr, divisor) {\n  var answer = arr.filter(v => v % divisor == 0);\n  return answer.length == 0 ? [-1] : answer.sort((a,b) => a-b);\n}\n</code></pre>\n<p>위와 같은 방법이지만, <code>filter()</code> 메서드를 사용했다.</p>\n<h2>배운점</h2>\n<p>짧은 조건문</p>\n<ul>\n<li><code>||</code> : 조건이 거짓일 때 실행</li>\n<li><code>&#x26;&#x26;</code> : 조건이 참일 때 실행</li>\n</ul>\n<p><strong>array.<code>map</code>( function ( currentValue [, index] [, arr] ), thisValue )</strong><br>\n:배열의 각 요소에 대해 제공된 함수를 순서대로 한 번 호출하여 새 배열을 작성<br>\n(콜백함수에 들어가는 첫번째 매개변수는 처리하는 배열의 현재 요소)  </p>\n<p><strong>array.<code>filter</code>( function ( currentValue [, index] [, arr] ), thisValue )</strong><br>\n:테스트를 통과하는 요소를 걸러내어 배열로 true/false 반환, 없으면 빈 배열</p>","id":"82fa6d17-9a0a-5504-a78b-5690d3acccc2"}},"pageContext":{"slug":"2019-12-16-level1-15-division_array-"}}}