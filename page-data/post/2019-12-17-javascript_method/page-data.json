{"componentChunkName":"component---src-blog-template-js","path":"/post/2019-12-17-javascript_method","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Javascript 헷갈리는 개념과 예제 정리 기초","tags":["Javascript","Exercise"]},"fields":{"slug":"2019-12-17-javascript_method"},"html":"<h1>Javascript 헷갈리는 개념 예제 정리 기초</h1>\n<blockquote>\n<p>[출처] (<a href=\"https://helloworldjavascript.net/\">https://helloworldjavascript.net/</a>)</p>\n</blockquote>\n<h4>변수</h4>\n<pre><code class=\"language-javascript\">let seven;\nconst eight; // 다른 값을 대입 불가 (상수)\n</code></pre>\n<h4>isNaN() 메서드</h4>\n<pre><code class=\"language-javascript\">const thisIsNan = NaN;\n\n// 주의! 이렇게 하면 안 됩니다.\nthisIsNan === NaN; // false\n\n// 이렇게 해야 합니다.\nNumber.isNaN(thisIsNan); // true\nObject.is(thisIsNan, NaN); // true\n</code></pre>\n<h4>isFinite() 메서드</h4>\n<pre><code class=\"language-javascript\">Number.isFinite(1); //true\nNumber.isFinite(Infinity); // false\n</code></pre>\n<h4>parseInt() 메서드 : 문자열을 숫자로</h4>\n<pre><code class=\"language-javascript\">parseInt('123'); // 123\nparseInt('110', 2); // 6 (문자열을 2진수로 간주한다.)\n\nparseInt('hello'); // NaN\n</code></pre>\n<h4>toString() 메서드 : 숫자를 문자로</h4>\n<pre><code class=\"language-javascript\">(12345).toString(); // '12345'\n(12345).toLocaleString(); // '12,345'\n(1.2345).toFixed(2); // '1.23'\n</code></pre>\n<h4>템플릿 리터럴 (Template Literal) : 여러 줄로 이루어진 문자열도 표현 가능</h4>\n<pre><code class=\"language-javascript\">const name1 = 'Foo';\nconst name2 = 'Bar';\nconst sentence = `${name1} meets ${name2}!`;\n\n`hello\nworld!\n`\n</code></pre>\n<h4>string 객체의 속성과 메서드</h4>\n<pre><code class=\"language-javascript\">// 문자열의 길이 알아내기\n'hello'.length; // 5\n\n// 여러 문자열 연결하기\n'hello'.concat('fun', 'javascript'); // 'hellofunjavascript'\n\n// 특정 문자열을 반복하는 새 문자열 생성하기\n'*'.repeat(3); // '***'\n\n// 특정 문자열이 포함되어 있는지 확인하기\n'hello javascript'.includes('hello'); // true\n'hello javascript'.startsWith('he'); // true\n'hello javascript'.endsWith('ript'); // true\n'hello javascript'.indexOf('java'); // 6\n\n// 문자열의 특정 부분을 바꾼 새 문자열 생성하기\n'hello javascript'.replace('java', 'type'); // 'hello typescript'\n\n// 문자열의 일부를 잘라낸 새 문자열 생성하기\n'hello'.slice(2, 4); // 'll'\n\n// 좌우 공백문자를 제거한 새 문자열 생성하기\n'   hello  '.trim(); // 'hello'\n'   hello  '.trimLeft(); // 'hello  '\n'   hello  '.trimRight(); // '   hello'\n\n// 좌우 공백문자를 추가한 새 문자열 생성하기\n'hello'.padStart(8); // '   hello'\n'hello'.padEnd(8); // 'hello   '\n\n// 문자열을 특정 문자를 기준으로 잘라 새 배열 생성하기\n'hello!fun!javavscript'.split('!'); // ['hello', 'fun', 'javascript']\n'hello'.split(''); // ['h', 'e', 'l', 'l', 'o']\n\n// 모든 문자를 소문자, 혹은 대문자로 변환한 새 문자열 생성하기\n'Hello JavaScript'.toLowerCase(); // 'hello javascript'\n'Hello JavaScript'.toUpperCase(); // 'HELLO JAVASCRIPT'\n</code></pre>\n<p>JavaScript에서는 아래의 값들은 모두 falsy이고, 이를 제외한 모든 값들은 truthy입니다.</p>\n<ul>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>NaN</li>\n<li>''</li>\n</ul>\n<h4>다른 타입의 값을 진리값으로 변환</h4>\n<pre><code class=\"language-javascript\">Boolean('hello'); // true\n</code></pre>\n<p>null과 undefined : 명시적으로 부재를 나타내고 싶다면 null을 사용\n(null : 객체가 없음)</p>\n<pre><code class=\"language-javascript\">typeof null // 'object'\ntypeof undefined // 'undefined'\n\nlet foo; // 값을 대입한 적 없음\nlet bar = undefined; // 값을 대입함\n</code></pre>\n<h4>Null Check</h4>\n<pre><code class=\"language-javascript\">input !== null &#x26;&#x26; input !== undefined;\n\ninput === null || input === undefined;\n</code></pre>\n<h4>스코프 (Scope) : 변수는 코드의 일정 범위 안에서만 유효</h4>\n<pre><code class=\"language-javascript\">const five = 5; // 최상위 스코프(top-level scope) 혹은 전역 스코프(global scope)\nfunction add1(x) {\n  function add2(y) {\n    return x + y;\n  }\n  return add2(five);\n}\nadd1(3); // 8 : 스코프 연쇄(scope chain)\n</code></pre>\n<h4>배열의 반복문</h4>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3, 4, 5];\n\narr.forEach((item, index) => {\n  console.log(`배열의 ${index + 1} 번째 요소는 ${item} 입니다.`);\n});\n\n// for of 는 es6에서 도입\nfor (let item of arr) {\n  console.log(`현재 요소는 ${item} 입니다.`);\n};\n</code></pre>\n<h4>배열 메서드</h4>\n<ul>\n<li>from(), isArray(), of()</li>\n<li>fill(), push(), pop(), unshift(), shiff(), splice(), reverse(), sort()</li>\n<li>slice(), map(), concat(), reduce(), filter(), join()</li>\n<li>indexOf(), lastIndexOf(), find(), findIndex()</li>\n<li>includes(), every(), some()</li>\n</ul>\n<h4>map() 메서드 매개변수 : (누적값, 현재 요소, 인덱스, 배열)</h4>\n<pre><code class=\"language-javascript\">arr.map((item, index, array) => {\n  return item * index;\n}); // [0, 2, 6, 12, 20]\n</code></pre>","id":"ffc07efd-1c30-52fa-8337-94b5b3da1842"}},"pageContext":{"slug":"2019-12-17-javascript_method"}}}