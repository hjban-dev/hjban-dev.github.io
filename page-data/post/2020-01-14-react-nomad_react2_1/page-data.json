{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-01-14-react-nomad_react2_1","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Movie App ReactJS JSX & Props 1"},"html":"<blockquote>\n<p>노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>2 JSX &#x26; Props</h1>\n<h2>2.0 Creating your first React Component</h2>\n<p><code>Component</code> 의 사전적 의미 : (구성) 요소, 부품  </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-2.jpg\" alt=\"\">\n<figcaption>App Component</figcaption>\n</figure>\n</center>\n<p>이전 장에서 살펴봤던 코드이긴 한데... Component가 뭐지...?<br>\n자, 어렵게 생각하지 말고 위 코드를 살펴보자. App function이 HTML 코드를 return 하고 있다.<br>\n그걸로 끝이다.<br>\n<code>HTML을 반환하는 함수</code> 그게 바로 <code>Component</code>이다. 우리는 React에서 가장 중요한 개념인 Component를 이해했다.<br>\n<strong>React는 항상 Component와 함께 동작한다.</strong></p>\n<h3>2.0.1 What is 'JSX'?</h3>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-3.jpg\" alt=\"\">\n<figcaption>index.js의 구성요소</figcaption>\n</figure>\n</center>\n<p>당신은 이미 React를 시작 했을 때부터 <code>&#x3C;App /></code> 이라는 형식을 보았을 것이다. HTML의 닫는 태그 같지만 안에 있는 <u>App이라는 태그명은 본적이 없다</u>. 낯설지만 익숙한 저 형식이 <code>JSX</code> 이다.  </p>\n<p><strong>Javascript와 HTML의 조합</strong> 다르게 말하면 <strong>Javascript 안의 HTML</strong>...새로운 개념이다. JSX는 React에서 아주 특별하게 사용된고, 만약 당신이 프론트개발자가 아니라면 JSX가 당신에게 썩 도움이 되지 않을 수도 있다. (하지만 vue, angular 등에는 유용)</p>\n<h3>2.0.1 How to Create a Component?</h3>\n<p>src 폴더(App.js가 있는 폴더)에 Potato.js 라는 파일을 생성합니다. 보통 Component명의 첫글자는 대문자를 쓰기 때문에 헷갈리지 않게 파일명도 동일하게 작성하였습니다.  </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-4.jpg\" alt=\"\">\n<figcaption>Pototo.js의 구성요소</figcaption>\n</figure>\n</center>\n<p>위에서 배웠듯이 h3을 return하는 function Potato를 만들었습니다.<br>\n하지만 App.js에는 Component를 기준으로 위 아래에 <code>import</code>, <code>export</code> 명령문이 있었습니다.<br>\n각각의 사전적 의미를 살펴보자면 <strong>import</strong> 와 <strong>export</strong> 는 서로 반의어입니다. </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>import</strong></td>\n<td>1. 수입품 2. 수입 3. 수입하다</td>\n</tr>\n<tr>\n<td><strong>export</strong></td>\n<td>1. 수출 2. 수출하다</td>\n</tr>\n</tbody>\n</table>\n<p><code>import</code> React from <code>\"react\"</code> : Potato Component를 React에서 사용하겠다는 의미.<br>\n<code>export</code> default <code>Potato</code> : 다른 페이지에서 Potato Component를 사용하게 한다는 의미.</p>\n<p>비슷한 듯 다른 두 명령어는 반드시 외워둡니다.<br>\n<u>export된 무언가를 import하여 사용합니다</u>. <u>export를 하지 않으면 선언만 했을 뿐 사용할 수 없습니다.</u></p>\n<h3>2.0.2 Importing a Component</h3>\n<p>index.js에서 <strong>import App from './App'</strong> App 컴포넌트를 가져와서 </p>\n<pre><code class=\"language-javascript\">ReactDOM.render(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<p>로 실행하는 걸 확인했었습니다. 우리도 Potato Component를 만들었으니 삽입해봅시다!</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-5.jpg\" alt=\"\">\n<figcaption>index.js에 Potato Component 삽입</figcaption>\n</figure>\n</center>\n<p>App Component를 불러온 방식 그대로 Potato를 불러옵니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-6.jpg\" alt=\"\">\n<figcaption>index.js에 Potato Component 삽입 했을때 결과</figcaption>\n</figure>\n</center>\n<p>흠...ʕ • o • ʔ 작동하지 않네요? 같은 명령어로 같은 위치에 삽입했는데...  </p>\n<p>여기서 알 수 있는 것은 <strong>React application</strong>은 <strong>하나의 Component</strong>만 <strong>rendering가능</strong>하다는 것 입니다. 지금은 그 유일한 Component가 <u>App Component</u> 입니다.  </p>\n<p>그렇다면 App Component와 동일한 위치 말고, App Component안에 넣어봅시다!</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-7.jpg\" alt=\"\">\n<figcaption>App.js 에서 Potato 불러오기</figcaption>\n</figure>\n</center>\n<p>index.js 에서 확인했듯이 <code>import</code>로 Potato Component 불러오고, <code>JSX</code>형식으로 App() Component 내부에 불러왔다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-8.jpg\" alt=\"\">\n<figcaption>App.js에 Potato Component 삽입한 후 결과</figcaption>\n</figure>\n</center>\n<p>그러면...!! h1태그와 h3태그가 구성되어 있는 것을 확인할 수 있다. ٩(•◡•)۶</p>\n<p>이 포스팅에서 꼭 확인해야 할 부분은 <strong>react application은 하나의 component만 rendering 가능!</strong></p>\n<h2>2.1 Reusable Components with JSX + Props</h2>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-9.jpg\" alt=\"\">\n<figcaption>App.js에 Potato Component를 생성</figcaption>\n</figure>\n</center>\n<p>페이지 이동을 줄이기 위해 Potato.js 는 지우고 App.js에 Potato Component를 생성했다. 결과도 그대로 문제없음. </p>\n<p>'JSX'에 대해 두번째로 이해해야 하는 것은 <code>Component에 정보</code>를 보낼 수 있다는 것이다.  </p>\n<p>자, 우리는 Potato Component를 Food Component로 변경하고 필자가 좋아하는 음식 여러가지를 노출하려고 한다. 그럴때 Food Component를 여러번 반복해서 노출시켜야 한다고 생각하면 React를 사용하는 의미가 없다.</p>\n<p>props를 통해서 Component에서 Component children으로 정보를 보내는 법을 배워보자! (•̀ᴗ•́) و ̑̑</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-10.jpg\" alt=\"\">\n<figcaption>Component를 통해서 정보 전달</figcaption>\n</figure>\n</center>\n<p>html을 이미 알고있다면 속성을 <code>\"\"</code> 를 사용하여 보내는 것은 매우 익숙할 것이다.<br>\nFood Component에 <strong>favorite</strong>라는 이름의 <code>props</code>를 <strong>potato</strong>라는 <code>value</code>로 준 것이다. 또한 value값으로 넘길 수 있는 자료형은 string 뿐만 아니라 boolean, array, number 등으로 보낼 수 있다.</p>\n<p>food function Component는 arguemnt(인자)로 props를 가져온다. 확인해보자.<br>\nconsole.log(props)의 결과는 {favirite : \"potato\"} 나오고 여기서 알 수 있는 점은 argument는 객체로 반환한다는 것이다.</p>\n<hr>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-11.jpg\" alt=\"\">\n<figcaption>Component를 통해서 정보 전달</figcaption>\n</figure>\n</center>\n<p>object를 열어서 favorite을 꺼내려면 원래 props 였던 부분을 <code>{} 대괄호</code>로 감싸주고, props값으로 넘겨주던 favorite 값으로 바꿔준다. 위의 상황에선 {favorite}으로 변경하면 됨.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/nomad_react_3-12.jpg\" alt=\"\">\n<figcaption>위 코드의 결과</figcaption>\n</figure>\n</center>\n<p>props에 대해 이해했다면, props는 반드시 father -> children Component로만 전달 가능하다는 특징도 알아야 한다.</p>\n<p><strong>꼭 알아야 할 부분!!</strong></p>\n<ol>\n<li>jsx + props 로 모두 재사용가능</li>\n<li>jsx -> HTML + Javascript</li>\n<li>Component -> 대문자로 시작 </li>\n<li>children으로 props통해서 argument로 정보 전달가능</li>\n</ol>"}},"pageContext":{"slug":"2020-01-14-react-nomad_react2_1"}}}