{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-02-05-gulp-nomad_gulp7","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Gulp Deploying to GH Pages"},"html":"<blockquote>\n<p>노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>6 Deploying to GH Pages</h1>\n<h2>6.0 Deploying to GH Pages</h2>\n<p>gulp의 작업은 끝났지만 이번엔 github page를 사용해보겠습니다. gulp-gh-pages를 사용할거고 npm i -D gulp-bro로 설치 할 수 있습니다.</p>\n<blockquote>\n<p><a href=\"https://www.npmjs.com/package/gulp-gh-pages\">Npm gulp-gh-pages 링크</a></p>\n</blockquote>\n<p><a href=\"https://www.npmjs.com/package/gulp-gh-pages\">Npm gulp-gh-pages 링크</a>에서 확인할 수 있는 gulp-gh-pages 사용법</p>\n<pre><code class=\"language-javascript\">gulp.task('deploy', function() {\n  return gulp.src('./dist/**/*')\n    .pipe(ghPages());\n});\n</code></pre>\n<p>설치를 했으니 import 하겠습니다.</p>\n<pre><code class=\"language-javascript\">import ghPages from \"gulp-gh-pages\";\n</code></pre>\n<p>gh task를 생성하겠습니다. 생성법은 위 사용법과 같습니다.</p>\n<pre><code class=\"language-javascript\">// ---gh task---\nconst gh = () => gulp.src(\"build/**/*\").pipe(ghPages())\n</code></pre>\n<p>그리고 처음에 만들어줬던 명령어 dev와 build 밑에 deploy를 만들어주겠습니다.</p>\n<pre><code class=\"language-javascript\">{\n...\n  \"scripts\": {\n    \"dev\": \"gulp dev\",\n    \"build\": \"gulp build\",\n    \"deploy\": \"gulp deploy\"\n  },\n...\n} \n</code></pre>\n<p>우리는 지금까지 dev만 export 했었습니다. 이번엔 build를 export 해줄거고, build가 하는 일은 gulp.series([prepare, assets]); 입니다. 그리고 기존의 dev는 build와 live를 series 하겠습니다.</p>\n<pre><code class=\"language-javascript\">// 기존 코드\nexport const dev = gulp.series([prepare, assets, live]);\n\n// 바뀐 코드\nexport const build = gulp.series([prepare, assets]);\nexport const dev = gulp.series([build, live]);\n</code></pre>\n<p>방금 만든 명령어인 deploy를 더 추가해야 합니다. deploy는 build, gh, clean을 하겠습니다.</p>\n<pre><code class=\"language-javascript\">export const deploy = gulp.series([build, gh, clean]);\n</code></pre>\n<p>즉 build는 서버가 연결되기 전에 코드들을 준비하는 역할인 prepare와 assets을 불러오고, dev는 이것들을 live하여 서버로 보냅니다. 그리고 deploy는 그것들을 배포하고, 필요 없는 코드는 지워줍니다.</p>"}},"pageContext":{"slug":"2020-02-05-gulp-nomad_gulp7"}}}