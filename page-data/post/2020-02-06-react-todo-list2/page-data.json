{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2020-02-06-react-todo-list2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Todo_List ReactJS 상태관리 하기","tags":["React"]},"fields":{"slug":"2020-02-06-react-todo-list2"},"html":"<blockquote>\n<p>React 기초 입문 프로젝트 – 흔하디 흔한 할 일 목록 만들기 by velopert <a href=\"https://velopert.com/3480\">https://velopert.com/3480</a>\n<a href=\"https://github.com/hjban-dev/todo-react\">Todo-List 결과물 확인</a></p>\n</blockquote>\n<h1>Todo_List</h1>\n<h2>2. 상태관리 하기</h2>\n<h3>상태관리는 어떻게 해야 할까?</h3>\n<p>현재 프로젝트에서 상태가 필요한 컴포넌트는 Form 과 TodoItemList 입니다. 컴포넌트들은 부모를 통하여 대화를 해야합니다.  </p>\n<p>그래서 <code>App</code> 이 <strong>Form 과 TodoItemList</strong> 의 부모 컴포넌트이니, 해당 컴포넌트에 input, todos 상태를 넣어주고 해당 값들과 값들을 업데이트 하는 함수들을 각각 컴포넌트에 <code>props</code> 로 전달해주어서 기능을 구현하게됩니다.</p>\n<h3>초기 state 정의하기</h3>\n<pre><code class=\"language-javascript\">// --- src/App.js ---\nimport React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\nclass App extends Component {\n\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: ' 리액트 소개', checked: false },\n      { id: 1, text: ' 리액트 소개', checked: true }\n      { id: 2, text: ' 리액트 소개', checked: false }\n    ]\n  }\n\n  render() {\n    return (\n      &#x3C;TodoListTemplate form={&#x3C;Form/>}>\n        &#x3C;TodoItemList/>\n      &#x3C;/TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p>초기 state 에 input 의 값과, todos 배열의 기본 아이템 3개를 넣어줍니다.</p>\n<h3>Form 기능 구현하기</h3>\n<ol>\n<li>텍스트 내용 바뀌면 state 업데이트</li>\n<li>버튼이 클릭되면 새로운 todo 생성 후 todos 업데이트</li>\n<li>인풋에서 Enter 누르면 버튼을 클릭한것과 동일한 작업진행하기</li>\n</ol>\n<p>App 컴포넌트에 handleChange, handleCreate, handleKeyPress 메소드를 구현하고, 이를 상태의 input 값과 함께 Form 컴포넌트로 전달하세요.</p>\n<pre><code class=\"language-javascript\">// --- src/App.js ---\nimport React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n\nclass App extends Component {\n\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: ' 리액트 소개', checked: false },\n      { id: 1, text: ' 리액트 소개', checked: true },\n      { id: 2, text: ' 리액트 소개', checked: false }\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '', // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  render() {\n    const { input } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress\n    } = this;\n\n    return (\n      &#x3C;TodoListTemplate form={(\n        &#x3C;Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      )}>\n        &#x3C;TodoItemList/>\n      &#x3C;/TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p>인풋에 텍스트를 쓰고 버튼을 누르면 DOM의 변화는 없지만 <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React 개발자도구</a>를 사용하면 App컴포넌트에 state가 추가된 것을 확인 할 수 있습니다.</p>\n<h3>TodoItemList 에서 배열을 TodoItem 컴포넌트 배열로 변환하기</h3>\n<p>todos 배열을 컴포넌트 배열로 변환하여 노출시킵시다. </p>\n<pre><code class=\"language-javascript\">// --- src/App.js의 render함수 ---\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress\n    } = this;\n\n    return (\n      &#x3C;TodoListTemplate form={(\n        &#x3C;Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      )}>\n        &#x3C;TodoItemList todos={todos}/>\n      &#x3C;/TodoListTemplate>\n    );\n  }\n</code></pre>\n<p>위의 코드에서 TodoItemList 컴포넌트에 props todos를 넘겨주었습니다.</p>\n<pre><code class=\"language-javascript\">// --- src/components/TodoItemList.js ---\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nclass TodoItemList extends Component {\n  render() {\n    const { todos, onToggle, onRemove } = this.props;\n\n    const todoList = todos.map(\n      ({id, text, checked}) => (\n        &#x3C;TodoItem\n          id={id}\n          text={text}\n          checked={checked}\n          onToggle={onToggle}\n          onRemove={onRemove}\n          key={id}\n        />\n      )\n    );\n\n    return (\n      &#x3C;div>\n        {todoList}\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default TodoItemList;\n</code></pre>\n<p>받은 todos를 재배열하여 todoList에 props로 넘기고, todoList를 return하였습니다.</p>\n<h3>체크 하기/체크 풀기</h3>\n<pre><code class=\"language-javascript\">// --- src/App.js ---\nimport React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n\nclass App extends Component {\n\n  (...)\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle\n    } = this;\n\n  (...)\n\n    return (\n      &#x3C;TodoListTemplate form={(\n        &#x3C;Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      )}>\n        &#x3C;TodoItemList todos={todos} onToggle={handleToggle}/>\n      &#x3C;/TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p>nextTodos로 배열의 값을 수정했습니다.</p>\n<h3>아이템 제거하기</h3>\n<pre><code class=\"language-javascript\">// --- src/App.js ---\nimport React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n\nclass App extends Component {\n  (...)\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      &#x3C;TodoListTemplate form={(\n        &#x3C;Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      )}>\n        &#x3C;TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      &#x3C;/TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p>todos를 filter 메소드로 재배열했습니다.</p>","id":"1894f026-b61d-57bd-9e64-42c9d3447fec"}},"pageContext":{"slug":"2020-02-06-react-todo-list2"}}}