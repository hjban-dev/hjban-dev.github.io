{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-02-10-graphql2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Movie API - Extending the Schema"},"html":"<blockquote>\n<p>노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>Creating Movie API by using GraphQL</h1>\n<h2>5 Extending the Schema</h2>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-2.jpg\" alt=\"\">\n<figcaption>GraphQL Playground에서 Query확인</figcaption>\n</figure>\n</center>\n<p>위 이미지의 왼쪽 화면에서 Query를 요청했고, gql은 내 서버에서 schema.graphql을 발견하고, resolvers를 찾아서 hj를 반환합니다.  </p>\n<p>그러면 resolvers.js에서 name을 myName으로 변경해봅시다.</p>\n<pre><code class=\"language-javascript\">const resolvers = {\n  Query: {\n    myName: () => \"hj\"\n  }\n};\n(...)\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-3.jpg\" alt=\"\">\n<figcaption>resolvers.js에서 name을 myName으로 변경한 후의 error</figcaption>\n</figure>\n</center>\n<p>Query.myName이 schema에는 없고, resolvers에만 정의되어 있다고 말합니다. 이런 상태에서 gql은 schema.graphql의 Query에 접근할 수 없습니다.</p>\n<p>이번엔 schema.graphql의 String!을 Int!로 변경해보겠습니다.</p>\n<pre><code>type Query{\n  name: Int!\n}\n</code></pre>\n<p>Int, 그러니까 우리는 Query를 Database에서 숫자로 return하도록 하였습니다. 하지만 우리가 반환하는 것은 'hj' String이죠? 그래서 gql은 error라고 말합니다. Int를 return해야하는데 왜 String을 주는건가? 하고 말합니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-4.jpg\" alt=\"\">\n<figcaption>resolvers.js에서 name을 myName으로 변경한 후의 Playground</figcaption>\n</figure>\n</center>\n<p>그럼 Playground의 기능은 무엇일까요? Playground는 graphql-yoga에 의해 따라 오는건데 여러분의 Database를 테스트하게 해주는 것 뿐입니다. Postman같은 기능을 하는겁니다.</p>\n<p>이번엔 좀 더 나은 resolvers를 만들어보겠습니다. resolvers.js에 hj라는 변수를 만들어주겠습니다.</p>\n<pre><code class=\"language-javascript\">const hj = {\n  name: \"hjban\",\n  age: 25,\n  gender: \"female\"\n};\n\nconst resolvers = {\n  Query: {\n    person: () => hj\n  }\n};\n(...)\n</code></pre>\n<p>변수 hj안에는 name, age, gender라는 정보를 넣었고, Query의 name부분은 person으로 변경하였습니다. 그리고 person은 hj를 return 합니다.  </p>\n<p>바뀐 resolvers에 맞게 Query도 변경하겠습니다.</p>\n<pre><code class=\"language-javascript\">type hj{\n  name : String!\n  age : Int!\n  gender : String!\n}\n\ntype Query{\n  person: hj!\n}\n</code></pre>\n<p>resolvers에서 hj를 return한다고 했죠? 그러니 Query도 hj를 return한다고 설명했습니다. hj의 정보 각각은 name은 String!, age는 Int!, gender는 String! 이라고 설명해줬습니다.<br>\n그리고 서버를 재시작 한 후 Playground를 살펴봅시다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-5.jpg\" alt=\"\">\n<figcaption>resolvers와 schema 변경 후 Playground</figcaption>\n</figure>\n</center>\n<p>위 이미지의 오른쪽 부분처럼 우린 schema를 통해 이름, 나이, 성별에 대한 정보를 얻을 수 있습니다. 여러분의 database의 정보를 설명해주고, 또 왼쪽 화면의 Query입력으로 data자체를 얻어올 수도 있습니다. age뿐만 아니라 name, gender에 대한 정보도 여러분들의 선택에 의해 얻을 수 있습니다.  </p>\n<hr>\n<h2>6 Extending the Schema part Two</h2>\n<p>이제부터 본격적으로 GraphQL을 활용해보겠습니다.  </p>\n<p>schema.graphql에서 Query는 people에서 hj타입을 return하는지 요청했었습니다. 이번에는 people은 person이라는 배열의 정보를 가져오도록 요청하겠습니다. 그리고 person에 각각의 ID로 접근할 수 있게 정의하겠습니다. </p>\n<pre><code class=\"language-javascript\">type Person{\n  id: Int!\n  name : String!\n  age : Int!\n  gender : String!\n}\n\ntype Query{\n  people: [Person]!\n  pesrson(id: Int!): Person\n}\n</code></pre>\n<p>위 Query는 people은 배열person들을 리턴하고, 그 person은 ID가 필수사항이라고 합니다.  </p>\n<p>graphql폴더에 db.js라는 파일을 만들고, 기존의 resolvers.js에 있던 변수 hj를 잘라서 붙여넣겠습니다. 그리고 hj였던 변수 이름을 people로 변경하고, 배열 형태로 만들어 여러개의 객체를 삽입해주겠습니다.</p>\n<pre><code class=\"language-javascript\">export const people = [\n  {\n    id: 0,\n    name: \"hjban0\",\n    age: 15,\n    gender: \"female\"\n  },\n  {\n    id: 1,\n    name: \"hjban1\",\n    age: 25,\n    gender: \"female\"\n  },\n  {\n    id: 2,\n    name: \"hjban2\",\n    age: 35,\n    gender: \"female\"\n  },\n  (...)\n];\n</code></pre>\n<p>변수 people의 각각의 객체는 id, name, age, gender 값을 갖고 있고 export 시켰습니다.<br>\n다시 resolvers.js로 가서 Query의 people은 import해온 people을 return하게 하겠습니다.</p>\n<pre><code class=\"language-javascript\">import { people } from \"./db\";\n\nconst resolvers = {\n  Query: {\n    people: () => people\n  }\n};\n\nexport default resolvers;\n</code></pre>\n<p>변수 resolevers는 Query를 포함하고 있고 그 Query는 people이라는 값을 가지고 있습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-6.jpg\" alt=\"\">\n<figcaption>people의 id를 return하는 Playground</figcaption>\n</figure>\n</center>\n<p>Query를 통해 data를 불러오는 Playground</p>"}},"pageContext":{"slug":"2020-02-10-graphql2"}}}