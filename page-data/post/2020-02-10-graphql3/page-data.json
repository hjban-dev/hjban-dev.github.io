{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-02-10-graphql3","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Movie API - Arguments","tags":["GraphQL","Nodejs"]},"fields":{"slug":"2020-02-10-graphql3"},"html":"<blockquote>\n<p>노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>Creating Movie API by using GraphQL</h1>\n<h2>7 Creating Queries with Arguments</h2>\n<p><code>Resolvers</code>는 <code>GraphQL 서버에서 요청을 받는 위치</code>입니다.<br>\n<strong>GraphQL서버가 Query나 Mutation을 발견하면 Resolvers를 찾고, 해당 함수 실행하게 합니다</strong>. Resolvers가 하는일을 확인해봅시다. resolvers.js에 person을 추가하겠습니다.</p>\n<pre><code class=\"language-javascript\">import { people } from \"./db\";\n\nconst resolvers = {\n  Query: {\n    people: () => people,\n    person: (_, args) => console.log(args)\n  }\n};\n\nexport default resolvers;\n</code></pre>\n<p>위의 resolvers코드의 Query.person에 들어가는 argument들이 있는데 첫번째 인자는 Object입니다. 지금은 중요하지 않으니 넘어가고, 두번째 인자를 살펴보기 위해 console 코드를 삽입하고 Playground에 가서 확인해보겠습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-7.jpg\" alt=\"\">\n<figcaption>id값을 필수로 요청하는 person</figcaption>\n</figure>\n</center>\n<p>위 이미지에서 알 수 있는 사실은 요청한 Query가 두번째인자 args로 넘어간다는 것입니다.<br>\n그러면 db.js에 getById라는 함수를 만들어보겠습니다. getById는 people을 filter메소드를 사용하여 id값이 같은 person만 return하게 합니다.</p>\n<pre><code class=\"language-javascript\">export const getById = id => {\n  const filteredPeople = people.filter(person => person.id === id);\n  return filteredPeople[0];\n};\n</code></pre>\n<p>getById()를 쉽게 설명하면 <strong>매개변수로 들어온 id값과 같은 person을 return</strong>하는 함수 입니다.<br>\nexport하였으니, resolevers.js에서 import하여 사용하겠습니다.</p>\n<pre><code class=\"language-javascript\">import { people, getById } from \"./db\";\n\nconst resolvers = {\n  Query: {\n    people: () => people,\n    person: (_, { id }) => getById(id)\n  }\n};\n\nexport default resolvers;\n</code></pre>\n<p>{ id }는 args.id라고 작성하는 것과 같습니다. 이제 Playground에서 <u>person에 대한 id값을 입력하면 그에 맞는 정보만 return 할 것</u>입니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-8.jpg\" alt=\"\">\n<figcaption>person.name의 data를 보여주는 Playground</figcaption>\n</figure>\n</center>\n<p>여러분들은 <strong>Database가 갖고 있는 data가 어떻게 보여질지 정의하고 Query를 resolve하는 함수</strong>를 만들면 됩니다.  </p>\n<p>이제 지금까지 배운것을 토대로 people은 Movies가 될거고, person은 각각의 movie가 될 겁니다. ID로 가져오기, 감독으로 가져오기 등으로 활용해봅시다.  </p>\n<p><strong>resolver는 view를 정해주고, schema는 url처럼 어디로 갈 지 정해준다고 생각</strong>하면 됩니다.</p>\n<h3>movie app's foundation</h3>\n<p>기존의 변수 people을 movies로 변경하고 age를 score로 변경, gender는 삭제하겠습니다.</p>\n<pre><code class=\"language-javascript\">let movies = [\n  {\n    id: 0,\n    name: \"Movie_name_00\",\n    score: 15\n  },\n  {\n    id: 1,\n    name: \"Movie_name_01\",\n    score: 25\n  },\n  {\n    id: 2,\n    name: \"Movie_name_02\",\n    score: 35\n  },\n  (...)\n];\n\nexport const getMovies = () => movies;\n\nexport const getById = id => {\n    const filteredMovies = movies.filter(movie => movie.id === id);\n    return filteredMovies[0];\n};\n</code></pre>\n<p>기존에는 변수 자체를 export했었지만 getMovies() 함수를 생성하여 movies를 export하도록 수정하였습니다. 기존의 getById()함수는 people을 movies로 person을 movie로 변경하였습니다. </p>\n<p>reservers.js도 변경된 변수에 맞게 변경합니다.</p>\n<pre><code class=\"language-javascript\">import { getMovies, getById } from \"./db\";\n\nconst resolvers = {\n  Query: {\n    movies: () => getMovies(),\n    movie: (_, { id }) => getById(id)\n  }\n};\n(...)\n</code></pre>\n<p>기존에 import 해오던 people 대신 getMovies로 변경하고, Query.movies도 변수 people에서 getMovies() 함수로 변경했습니다.</p>\n<p>당연히 schema.graphql도 변경해줍니다. </p>\n<pre><code class=\"language-javascript\">type Movie{\n  id: Int!\n  name : String!\n  score : Int!\n}\n\ntype Query{\n  movies: [Movie]!\n  movie(id: Int!): Movie\n}\n</code></pre>\n<p>헷길리지만 movie는 배열의 movie이고, Movie는 type의 Movie입니다.</p>","id":"d8c78c6a-b9aa-55f4-8393-468f2ac5cfd7"}},"pageContext":{"slug":"2020-02-10-graphql3"}}}