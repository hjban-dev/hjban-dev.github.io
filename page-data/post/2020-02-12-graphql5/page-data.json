{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-02-12-graphql5","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Movie API - Wrapping a REST API with GraphQL"},"html":"<blockquote>\n<p>노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>Creating Movie API by using GraphQL</h1>\n<h2>11 Wrapping a REST API with GraphQL Part One</h2>\n<p><a href=\"https://yts.mx/api\">https://yts.mx/api</a>의 사이트의 <a href=\"https://yts.mx/api/v2/list_movies.json\">https://yts.mx/api/v2/list_movies.json </a> API를 통해서 영화리스트를 불러오겠습니다. </p>\n<p><a href=\"https://yts.mx/api\">https://yts.mx/api</a>를 확인하면 Endpoint로 여러가지의 데이터를 제한할 수 있습니다. Endpoint로 위의 json파일에서 movie를 부분적으로 제어하여 return하게 하겠습니다.  </p>\n<p>먼저 yarn add node-fetch -D 로 node-fetch를 설치해주고 import 해오겠습니다.<br>\n그 전의 db.js의 코드들은 모두 지우고 새로 시작하겠습니다.  </p>\n<blockquote>\n<p><a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch의 NPM 링크</a></p>\n</blockquote>\n<pre><code class=\"language-javascript\">import fetch from \"node-fetch\";\nconst API_URL = \"https://yts.mx/api/v2/list_movies.json?\";\n\nexport const getMovies = (limit, rating) => {\n  let REQUEST_URL = API_URL;\n\n  return fetch(REQUEST_URL)\n    .then(res => res.json())\n    .then(json => json.data.movies);\n};\n</code></pre>\n<p>fetch를 사용하여 json파일을 가져왔고, <a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch의 NPM 링크</a>를 참고하여 then() 메소드를 사용하였습니다.<br>\nschema.graphql도 yts API에 맞게 type을 재설정해주겠습니다. </p>\n<pre><code class=\"language-javascript\">type Movie{\n  id: Int!\n  title: String!\n  rating: Float!\n  summary: String!\n  launguage: String!\n  medium_cover_image: String!\n}\n\ntype Query{\n  movies: [Movie]!\n}\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-13.jpg\" alt=\"\">\n<figcaption>Playground에서 data를 불러오는 것 확인</figcaption>\n</figure>\n</center>\n<p>Playground에서 fetch를 통해서 data를 불러오는 것을 확인할 수 있다. data가 오는 것을 확인했으니 제어를 해봅시다. 우리가 사용할 argument는 limit와 rating 입니다. limit로는 가져오는 영화의 개수를 제어하고, rating으로는 정해준 rating값의 이상인 movie만 가져오게 하겠습니다.</p>\n<pre><code class=\"language-javascript\">(...)\nexport const getMovies = (limit, rating) => {\n  let REQUEST_URL = API_URL;\n  if (limit > 0) {\n    REQUEST_URL += `limit=${limit}&#x26;`;\n  }\n  if (rating > 0) {\n    REQUEST_URL += `minimum_rating=${rating}&#x26;`;\n  }\n  return fetch(REQUEST_URL)\n    .then(res => res.json())\n    .then(json => json.data.movies);\n};\n</code></pre>\n<p>들어오는 매개변수의 값을 찾아 0이상이면 URL의 Endpoint를 제어하게 했습니다.<br>\nschema부분도 조금 수정하겠습니다.</p>\n<pre><code class=\"language-javascript\">(...)\ntype Query{\n  movies(limit: Int, rating: Float): [Movie]!\n}\n</code></pre>\n<p>movies의 args가 필수 사항은 아니기 때문에 !는 제외했습니다.<br>\n마지막으로 resolver도 수정해줍니다.</p>\n<pre><code class=\"language-javascript\">import { getMovies } from \"./db\";\n\nconst resolvers = {\n  Query: {\n    movies: (_, { limit, rating }) => getMovies(limit, rating)\n  }\n};\n\nexport default resolvers;\n</code></pre>\n<p>위의 코드들로 Playground에선 limit, rating를 제어한 결과를 확인할 수 있습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_1-13.gif\" alt=\"\">\n<figcaption>Playground에서 data를 제어</figcaption>\n</figure>\n</center>"}},"pageContext":{"slug":"2020-02-12-graphql5"}}}