{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2020-02-18-graphql_apollo2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Movie Web App - Apollo GraphQL","tags":["GraphQL","React","Apollo"]},"fields":{"slug":"2020-02-18-graphql_apollo2"},"html":"<blockquote>\n<p>노마드코더의 GraphQL로 영화 웹 앱 만들기를 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>1 Apollo GraphQL</h1>\n<h2>1.0 Apollo Client</h2>\n<blockquote>\n<p><a href=\"https://www.apollographql.com/docs/react/get-started/\">apollo 공식 사이트의 설치 방법</a></p>\n</blockquote>\n<p>apollo-boost는 GraphQL Yoga처럼 모든 것을 다 설정이 되어있는 package입니다. GraphQL Yoga의 경우는 준비가 된 server이고, apollo-boost는 client 입니다.<br>\n위 링크를 참고하여 apollo.js를 생성하여 내부에 apollo-boost로 client를 생성하겠습니다.</p>\n<pre><code class=\"language-javascript\">import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/\"\n});\n\nexport default client;\n</code></pre>\n<p>GraphQl의 경우 URL을 갖지 않습니다. 그래서 apollo client에 하나의 URL만 넣어도 됩니다. 들어가는 URL은 GraphQL로 만들었던 로컬호스트를 연결해주었습니다.\n그리고 index.js에 가서 방금 만든 client를 연결시킵니다. </p>\n<pre><code class=\"language-javascript\">import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport client from \"./apollo\";\n\nReactDOM.render(\n  &#x3C;ApolloProvider client={client}>\n    &#x3C;App />\n  &#x3C;/ApolloProvider>,\n  document.getElementById(\"root\")\n);\n</code></pre>\n<p>ApolloProvider는 client가 필수입니다.<br>\n코드 작성 후 yarn start를 실행했을때 localhost의 개발자 도구에서 아무 문제 없다면 apollo가 잘 작동하고 있는 것입니다.</p>\n<h2>1.1 GET_MOVIES Query</h2>\n<p>Javascript는 GraphQL의 query를 이해하지 못합니다. 그래서 GraphQL을 import하여 query를 작성해주겠습니다.<br>\nHome.js에 아래 코드를 작성하겠습니다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nconst GET_MOVIES = gql`\n  {\n    movies {\n      id\n      medium_cover_image\n    }\n  }\n`;\n\nexport default () => {\n  const { loading, error, data } = useQuery(GET_MOVIES);\n  console.log(loading, error, data);\n  return &#x3C;h1>Home&#x3C;/h1>;\n};\n</code></pre>\n<p>GET_MOVIES라는 query를 작성하였고, useQuery로 query를 사용하였습니다. useQuery는 react hook입니다. </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-1.jpg\" alt=\"\">\n<figcaption>Console창으로 확인 할 수 있는 GraphQl의 data</figcaption>\n</figure>\n</center>\n<p>fetch나 POST같은 건 하지 않았지만 data를 얻을 수 있습니다.<br>\n우리는 GET_MOVIES를 만들어서 data를 불러왔고, 다음 강의에선 불러온 data를 링크를 걸어 View 페이지에 뿌리고, 링크를 통해 각각의 movie의 세부페이지로 연결하겠습니다.</p>\n<hr>\n<h2>1.2 GET_MOVIE Query</h2>\n<p>우리는 가져온 data를 링크 형태로 페이지에 노출시키고, 각각의 영화 링크로 연결하겠습니다.<br>\n먼저 components폴더에 Movie.js를 생성한 후 Movie Component를 만들겠습니다. React에서 <code>&#x3C;a href></code>는 사용할 수 없습니다. 링크 연결을 위해 Link를 사용하여 작성하겠습니다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default ({ id }) => (\n  &#x3C;div>\n    &#x3C;Link to={`/${id}`}>{id}&#x3C;/Link>\n  &#x3C;/div>\n);\n</code></pre>\n<p>그리고 Home.js에 가져온 data를 map()메소드를 사용하여 각각 Movie Compoenent로 생성하겠습니다.\ndiv로 구성된 간단한 Component와 style부분은 생략하겠습니다. </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-4.jpg\" alt=\"\">\n<figcaption>Home.js의 return코드</figcaption>\n</figure>\n</center>\n<p>loading 상태이면 <Loading>Loading...</Loading>을 return.<br>\nloading 상태이지 않고, data에 movies정보가 있으면 data.movies.map()을 실행합니다.  </p>\n<p>이전 장의 App.js에서 경로가 /:id 이라면 Detail Component를 보여주게 했었습니다.<br>\nDetail.js에서 링크를 클릭 했을 때 정보를 잘 가져오는지 확인해봅시다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default () => {\n  const { id } = useParams();\n  console.log(id);\n  return \"Detail\";\n};\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-2.jpg\" alt=\"\">\n<figcaption>Console창으로 확인되는 id정보</figcaption>\n</figure>\n</center>\n<p>이동된 링크에서 현재의 id값을 확인 할 수 있습니다.<br>\ndata가 연동된 것을 확인했으니 GET_MOVIE라는 이름의 query를 작성하겠습니다. 이번에 필요한 query는 argument가 필요한 query입니다. 그럴 땐 작성할 때 query의 이름을 적어야 합니다.</p>\n<pre><code class=\"language-javascript\">(...)\nimport { gql } from \"apollo-boost\";\n\nconst GET_MOVIE = gql`\n  query getMovie($id: Int!) {\n    movie(id: $id) {\n      id\n      title\n      medium_cover_image\n      description_intro\n    }\n  }\n`;\n</code></pre>\n<p>query getMovie라는 이름을 정해주었고, argument에 대한 정보도 적어주었습니다. id라는 변수가 들어간다는 의미로 $id라고 작성하였습니다.  </p>\n<p>useQuery라는 hook을 사용하여 GET_MOVIE를 연결하겠습니다.</p>\n<pre><code class=\"language-javascript\">(...)\nimport { useQuery } from \"@apollo/react-hooks\";\n(...)\nexport default () => {\n  let { id } = useParams();\n  id = parseInt(id);\n  const { loading, data } = useQuery(GET_MOVIE, {\n    variables: { id }\n  });\n\n  if (loading) {\n    return \"loading\";\n  }\n  if (data &#x26;&#x26; data.movie) {\n    return data.movie.title;\n  }\n};\n</code></pre>\n<p>GET_MOVIE query를 사용할 때 $id값을 필수로 정해주었습니다. 그래서 useQuery를 사용할 때도 variables를 지정해주어야 합니다.<br>\nHome.js에서 사용했던 그대로 loading 중이면 \"loading\", data가 있고, data.movie의 정보도 있다면 data.movie.title을 return 하게 하였습니다. </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-3.jpg\" alt=\"\">\n<figcaption>클릭한 id의 title을 노출</figcaption>\n</figure>\n</center>","id":"620bc82b-fe18-5100-8514-bc1dc6cec0a5"}},"pageContext":{"slug":"2020-02-18-graphql_apollo2"}}}