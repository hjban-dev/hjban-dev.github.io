{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-02-19-graphql_apollo3","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Movie Web App - Apollo GraphQL2","tags":["GraphQL","React","Apollo"]},"fields":{"slug":"2020-02-19-graphql_apollo3"},"html":"<blockquote>\n<p>노마드코더의 GraphQL로 영화 웹 앱 만들기를 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>1 Apollo GraphQL</h1>\n<h2>1.3 Apollo Cache and Styles</h2>\n<p>Component와 style부분은 생략하였습니다.\nReact Apollo의 큰 장점중 하나는 cache를 갖고 있다는 것입니다. 한번 영화를 클릭하면 다음에 클릭할때는 loading이 뜨지 않습니다.  </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-5.gif\" alt=\"\">\n<figcaption>cache로 인해 두번째 클릭에선 loading이 뜨지 않음</figcaption>\n</figure>\n</center>\n<hr>\n<h2>1.4 Data &#x26; Apollo Dev Tools</h2>\n<p>전 장에서 확인했었지만 서버를 시작하고 query를 불러오기 전 그러니까 loading중에는 data가 없었습니다.<br>\ndata.movie.title으로 작성하고 view 페이지를 확인해보겠습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-5.jpg\" alt=\"\">\n<figcaption>loading중에는 data를 찾을수 없기에 undefined error가 발생</figcaption>\n</figure>\n</center>\n<p>undefined error가 발생합니다.<br>\n그래서 우리는 data.movie.title의 형식으로 작성하지만 반드시 삼항연산자를 사용하여 작성해주어야 합니다. </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-7.jpg\" alt=\"\">\n<figcaption>loading 일때 return할 코드 삼항연산자로 작성</figcaption>\n</figure>\n</center>\n<p>loading 중이라면 Loading... 텍스트를 return,<br>\nloading이 끝나면 data도 확인할 수 있기 때문에 data.movie.title을 return해도 오류가 발생하지 않습니다.  </p>\n<p>Subtitle과 Description부분은 loading중 일땐 보이지 않고 loading이 끝난 후 노출시켜주겠습니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-8.jpg\" alt=\"\">\n<figcaption>loading이 끝나고 data.movie가 있다면 Subtitle과 Description 노출</figcaption>\n</figure>\n</center>\n<p>loading이 끝나고, data.movie에 정보가 있다면 Subtitle과 Description을 return 시켰습니다.  </p>\n<hr>\n<h2>1.5 Suggestions &#x26; Optional Chaining</h2>\n<p>Suggestions이라는 query를 추가하겠습니다. Suggestions은 GraphQL API 에서 작성해두었던 query입니다. </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-6.jpg\" alt=\"\">\n<figcaption>GraphQL playground에서 확인 한 sugegestion query</figcaption>\n</figure>\n</center>\n<p>Detail.js의 전에 작성했었던 GET_MOVIE gql에 suggestions을 추가로 작성하겠습니다. </p>\n<pre><code class=\"language-javascript\">const GET_MOVIE = gql`\n  query getMovie($id: Int!) {\n    movie(id: $id) {\n      title\n      medium_cover_image\n      language\n      rating\n      description_intro\n    }\n    suggestions(id: $id) {\n      id\n      medium_cover_image\n    }\n  }\n`;\n</code></pre>\n<p>2019.12.28일에 Js에 새로 추가된 기능인 Optional Chaining의 사용으로 삼항연산자로 반복하여 사용하던 data.movie를 <code>?</code>를 사용함으로써 생략가능합니다.</p>\n<center>\n<figure>\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-9.jpg\" alt=\"\">\n<figcaption>Optional Chaining의 사용으로 간결해진 코드</figcaption>\n</figure>\n</center>\n<p>Home.js의 return 부분도 변경해주겠습니다.</p>\n<pre><code class=\"language-javascript\">(...)\nexport default () => {\n  const { loading, data } = useQuery(GET_MOVIES);\n  return (\n    &#x3C;Container>\n      &#x3C;Header>\n        &#x3C;Title>Apollo 2020&#x3C;/Title>\n        &#x3C;Subtitle>I love GraphQL&#x3C;/Subtitle>\n      &#x3C;/Header>\n      {loading &#x26;&#x26; &#x3C;Loading>Loading...&#x3C;/Loading>}\n      &#x3C;Movies>\n        {data?.movies?.map(m => (\n            &#x3C;Movie key={m.id} id={m.id} bg={m.medium_cover_image} />\n        ))}\n      &#x3C;/Movies>\n    &#x3C;/Container>\n  );\n};\n</code></pre>\n<p>코드가 훨씬 간단해지고 보기 편해졌습니다.</p>","id":"2f39e8fa-fdb5-5317-b450-42fc6a8681ad"}},"pageContext":{"slug":"2020-02-19-graphql_apollo3"}}}