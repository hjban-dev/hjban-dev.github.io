{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-02-21-react-hooks2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useState","tags":["React"]},"fields":{"slug":"2020-02-21-react-hooks2"},"html":"<blockquote>\n<p>노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>1 useState</h1>\n<h2>1.0 Introduction to useState</h2>\n<p>hooks는 react의 state machine에 연결하는 기본적인 방법입니다. hooks를 사용하면 class를 사용하지 않고 함수만 사용하여 프로그래밍이 가능합니다. 알다시피 hooks가 생기기전엔 function Component엔 state를 작성할 수 없었습니다.  </p>\n<p>useState는 <strong>항상 2개의 value로 이루어져있는 배열을 반환</strong>합니다. 첫번째는 변경할 만큼의 값, 두번째는 변경되는 값.<br>\nuseState는 말 그대로 상태를 변경하는 것 입니다. useState는 state를 초기 값을 세팅할 수 있는 옵션을 제공하고, 우리는 그 값을 1으로 주겠습니다. </p>\n<pre><code class=\"language-javascript\">const App = () => {\n  const [item, setItem] = useState(1);\n  const increament = () => setItem(item + 1);\n  const decreament = () => setItem(item - 1);\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;h1>Hello {item}&#x3C;/h1>\n      &#x3C;h2>Start editing to see some magic happen!&#x3C;/h2>\n      &#x3C;button onClick={increament}>increament&#x3C;/button>\n      &#x3C;button onClick={decreament}>decreament&#x3C;/button>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>기존 react는 state를 사용하기 위해선 반드시 class Component로 변경해야 했고, class는 this나 render등 여러 조건들을 고려해야 했지만 hooks를 사용한다면 그런 것은 신경쓰지 않아도 됩니다.</p>\n<p>이번엔 같은 코드를 class를 사용하여 작성해보겠습니다.</p>\n<pre><code class=\"language-javascript\">class AppUgly extends React.Component {\n  state = { item: 1 };\n\n  render() {\n    const { item } = this.state;\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Hello {item}&#x3C;/h1>\n        &#x3C;h2>Start editing to see some magic happen!&#x3C;/h2>\n        &#x3C;button onClick={this.increament}>increament&#x3C;/button>\n        &#x3C;button onClick={this.decreament}>decreament&#x3C;/button>\n      &#x3C;/div>\n    );\n  }\n  increament = () => {\n    this.setState(state => {\n      return {\n        item: state.item + 1\n      };\n    });\n  };\n  decreament = () => {\n    this.setState(state => {\n      return {\n        item: state.item - 1\n      };\n    });\n  };\n}\n</code></pre>\n<p>위에서 말했지만, class Component의 경우에선 this와 setState, previous state를 고려해야 합니다.\n위 코드만 살펴봐도 hooks를 사용해야 하는 이유는 충분합니다. 100줄짜리 Component를 상상하면 아주 끔찍합니다.  </p>\n<blockquote>\n<p><a href=\"https://reactjs.org/docs/hooks-reference.html\">React hooks관련 공식 사이트</a></p>\n</blockquote>\n<p>위 링크를 참고하면 다른 hooks들의 정보도 찾을 수 있습니다.</p>","id":"873d9f23-d222-5ba1-8b0f-06f7541cdc8b"}},"pageContext":{"slug":"2020-02-21-react-hooks2"}}}