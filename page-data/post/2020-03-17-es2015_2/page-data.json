{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2020-03-17-es2015_2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Javascript ES6 문법 Object, Destructuring","tags":["Javascript","ES6"]},"fields":{"slug":"2020-03-17-es2015_2"},"html":"<blockquote>\n<p>인프런의 <a href=\"https://www.inflearn.com/course/es6-%EA%B0%95%EC%A2%8C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/dashboard\">모던 자바스크립트(javascript) 개발을 위한 ES6 강좌</a>를 듣고 정리합니다. </p>\n</blockquote>\n<h1>자바스크립트 ES2015(ES6) 문법 정리</h1>\n<h2>Object</h2>\n<h3>간단히 객체생성하기</h3>\n<pre><code class=\"language-javascript\">const name = \"crong\";\nconst age = 33;\n\nconst obj = {\n  name: name,\n  age: age\n};\n\nconsole.log(obj); // {name: \"crong\", age: 33}\n</code></pre>\n<pre><code class=\"language-javascript\">function getObj(){\n  const name = \"crong\"\n\n  const getName = function(){\n    return name;\n  }\n  const setName = function(){\n    name = newname;\n  }\n  const printName = function(){\n    console.log(name)\n  }\n\n  return{\n    getName : getName,\n    setName : setName\n  }\n}\n\nvar obj = getObj();\nconsole.log(obj); // {getName: ƒ, setName: ƒ}\nconsole.log(obj.getName()); // crong\n</code></pre>\n<p>return 부분 getName : getName, 앞 뒤의 코드가 같을 땐 하나의 변수로 사용 가능</p>\n<pre><code class=\"language-javascript\">(...)\nreturn {getName, setName}\n</code></pre>\n<p>아래 코드처럼 처음 선언할 때에도 사용 가능</p>\n<pre><code class=\"language-javascript\">const data = {\n  name,\n  getName(){\n    \n  },\n  age\n}\n</code></pre>\n<hr>\n<h2>Destructuring</h2>\n<h3>Destructuring Array</h3>\n<p>배열 순서대로 변수 지정가능</p>\n<pre><code class=\"language-javascript\">let data = ['amy', 'bob', 'john'];\nlet bob = data[1]; // 데이터의 특정부분을 변수로 지정\nlet john = data[2]; // 데이터의 특정부분을 변수로 지정\n\nlet [name1, ,name3] = data; // data의 정보를 한꺼번에 변수로 지정\nconsole.log(name1, name3); // amy john\n</code></pre>\n<h3>Destructuring Object</h3>\n<p>객체에서 활용 가능<br>\n객체의 key값 name, age를 생성하여 obj를 할당</p>\n<pre><code class=\"language-javascript\">let obj = {\n  name: \"amy\",\n  address: \"korea\",\n  age: 25\n}\n\nlet {name, age} = obj;\n\nconsole.log(name,age); // amy, 25\n</code></pre>\n<p>이름 변경도 가능.</p>\n<pre><code class=\"language-javascript\">(...)\nlet {name:myName, address:myAddress} = obj;\nconsole.log(myName, myAddress); // amy, 25\n</code></pre>\n<h3>Destructuring 활용 JSON파싱</h3>\n<pre><code class=\"language-javascript\">var news = [\n  {\n    \"title\" : \"news_title11\",\n    \"url\" : \"http://url11.url11.com\",\n    \"list\" : [\n      \"new11_list1\",\n      \"new11_list2\",\n      \"new11_list3\",\n    ]\n  },\n  {\n    \"title\" : \"news_title22\",\n    \"url\" : \"http://url22.url22.com\",\n    \"list\" : [\n      \"new22_list1\",\n      \"new22_list2\",\n      \"new22_list3\",\n    ]\n  }\n];\n\nlet [, title22] = news;\nlet {title, url} = title22;\n\nconsole.log(title, url); // news_title22 http://url22.url22.com\n</code></pre>\n<pre><code class=\"language-javascript\">let [, {title, url}] = news;\nconsole.log(url); // http://url22.url22.com\n</code></pre>\n<h3>Destructuring 활용_Event객체전달</h3>\n<p>매개변수로 전달할 때 자주 사용</p>\n<pre><code class=\"language-javascript\">(...)\nfunction getNewsList([, {list}]) {\n  console.log(list);\n}\n\ngetNewsList(news);\n</code></pre>\n<pre><code class=\"language-javascript\">document.querySelector(\"div\").addEventListener(\"click\", function(evt){\n  console.log(evt);\n});\n</code></pre>\n<pre><code class=\"language-javascript\">document.querySelector(\"div\").addEventListener(\"click\", function({target}){\n  console.log(target.tagName);\n});\n</code></pre>\n<hr>\n<h2>Set &#x26; WeakSet</h2>\n<h3>Set 으로 유니크한 배열만들기</h3>\n<p>중복없이 유일한 값을 저장하려고 할 때, 이미 존재하는지 체크할 때 유용. 배열의 형태<br>\n값 추가 메소드 .add()</p>\n<pre><code class=\"language-javascript\">let mySet = new Set(); // Set객체 생성\nconsole.log(toString.call(mySet)); // [object Set]\n\nmySet.add(\"crong\"); // crong 추가\nmySet.add(\"hary\"); // hary 추가\nmySet.add(\"crong\"); // crong 추가. 하지만 crong이 이미 존재하여 추가되지 않음\nmySet.add({a: 1, b: 2}); // 객체 추가\n\nmySet.forEach(function(v){\n  console.log(v); // crong, hary, {a: 1, b: 2}\n});\n</code></pre>\n<p>삭제 메소드 .delete()<br>\n값 확인 메소드 .has()<br>\n길이를 확인하는 속성 size</p>\n<pre><code class=\"language-javascript\">(...)\nmySet.delete('crong'); // crong 삭제\n\nconsole.log(mySet.has('hary')); // true\nconsole.log(mySet.size); // 3\n</code></pre>\n<h3>WeakSet 으로 효과적으로 객체타입저장하기</h3>\n<p>Weakset은 객체의 모음 객체.</p>\n<pre><code class=\"language-javascript\">let arr = [1,2,3,4];\nlet arr2 = [5,6,7,8];\nvar obj = {arr, arr2}\nlet ws = new WeakSet();\n\nws.add(arr);\nws.add(arr2);\nws.add(obj);\n\narr = null;\n//ws.add('111');\n//ws.add(111);\n//ws.add(function(){});\n\nconsole.log(ws);\nconsole.log(ws.has(arr));\n</code></pre>\n<hr>\n<h2>Set &#x26; WeakSet</h2>\n<p>Array -> set, weakset\nObject -> map, weakmap</p>\n<h3>Map &#x26; WeakMap 추가정보를 담은 객체저장하기</h3>\n<p>map은 key/value</p>\n<pre><code class=\"language-javascript\"></code></pre>","id":"6f0a401a-f91e-537e-ac25-be8b70e10368"}},"pageContext":{"slug":"2020-03-17-es2015_2"}}}