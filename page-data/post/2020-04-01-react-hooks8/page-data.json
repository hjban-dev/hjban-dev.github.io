{"componentChunkName":"component---src-blog-template-js","path":"/post/2020-04-01-react-hooks8","result":{"data":{"markdownRemark":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useConfirm & usePreventLeave"},"html":"<blockquote>\n<p>노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <a href=\"https://academy.nomadcoders.co/\">https://academy.nomadcoders.co/</a></p>\n</blockquote>\n<h1>2 useEffect</h1>\n<h2>2.3 useConfirm &#x26; usePreventLeave</h2>\n<p>이번에 만들 두가지의 hook은 사실 hook이 아닙니다. useEffect와 useState를 사용하지 않는 함수 컴포넌트로 볼 수 있습니다.</p>\n<h3>useConfirm</h3>\n<p>useConfirm은 이벤트를 실행하기 전에 사용자에게 확인을 받는 기능을 하는 함수입니다. 확인을 받는 과정은 브라우저 기능인 confirm기능을 활용하겠습니다.  </p>\n<p>useConfirmd은 사용자가 어떤 것을 저장하거나 삭제할 때 유용하게 활용할 수 있습니다.<br>\n실행 순서는 browser가 이벤트를 막고 confirm을 실행한 후, 확인을 하면 onConfirm 이벤트가 진행, 취소를 누르면 onCancel이벤트를 진행하게 할 것 입니다.  </p>\n<p>먼저 useConfirm 함수를 선언하고, args로 message와 onConfirm와 onCancel 총 3개를 넣겠습니다.</p>\n<pre><code class=\"language-javascript\">const useConfirm = (message = \"\", onConfirm, onCancel) => { // message의 기본값은 \"\" \n  if (!onConfirm || typeof onConfirm !== \"function\") { \n    return; // 매개변수 onConfirm가 없거나 onConfirm이 함수가 아나라면 return 실행\n  }\n  if (onCancel &#x26;&#x26; typeof onCancel !== \"function\") { // onCancle은 필수요소는 아님\n    return;\n  }\n  const confirmAction = () => { // confirm창의 응답에 따른 이벤트 실행 함수\n    if (confirm(message)) { // 확인을 눌렀다면\n      onConfirm();\n    } else { // 취소를 눌렀다면\n      onCancel();\n    }\n  };\n  return confirmAction; \n};\n\nconst App = () => {\n    \n  const deleteWorld = () => console.log(\"delete\"); // 확인 눌렀을 때 실행할 함수\n  const abortWorld = () => console.log(\"Aborted\"); // 취소 눌렀을 때 실행할 함수\n\n  const conformDelete = useConfirm(\"r u sure?\", deleteWorld, abortWorld);\n\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;h1>Hello&#x3C;/h1>\n      &#x3C;button onClick={conformDelete} >Delete the world&#x3C;/button>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_7.gif\" alt=\"\">\n<figcaption>코드 실행 결과</figcaption>\n</figure>\n</center>\n<h3>usePreventLeave</h3>\n<p>usePreventLeave는 사용자들이 브라우저를 떠나기 전에 confirm창을 띄워 확인 받는 함수입니다.  </p>\n<pre><code class=\"language-javascript\">const usePreventLeave = () => {\n  const listener = event => {\n    event.preventDefault();\n    event.returnValue = \"\";\n  };\n  const enablePrevent = () => window.addEventListener(\"beforeunload\", listener); // beforeunload 이벤트 리스너로 listener 지정\n  const disablePrevent = () =>\n    window.removeEventListener(\"beforeunload\", listener); // beforeunload 이벤트 제거\n  return { enablePrevent, disablePrevent }; // 두 함수를 return\n};\n\nconst App = () => {\n  const { enablePrevent, disablePrevent } = usePreventLeave();\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;h1>Hello&#x3C;/h1>\n      &#x3C;button onClick={enablePrevent}>Protect&#x3C;/button>\n      &#x3C;button onClick={disablePrevent}>Unprotect&#x3C;/button>\n    &#x3C;/div>\n  );\n};\n</code></pre>\n<p>사용자가 Protect를 클릭하는 순간 window는 beforeunload라는 이벤트를 갖게 되고, EventListner로 listener를 가지고 있습니다. </p>\n<center>\n<figure>\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_8.gif\" alt=\"\">\n<figcaption>코드 실행 결과</figcaption>\n</figure>\n</center>"}},"pageContext":{"slug":"2020-04-01-react-hooks8"}}}