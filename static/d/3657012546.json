{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useScroll(useState, useEffect) & useFullscreen(useRef)","category":"React"},"fields":{"slug":"2020-04-07-react-hooks11"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 useEffect\r\n\r\n## 2.6 useScroll & useFullscreen\r\n\r\n### useScroll \r\n\r\nuseScroll은 사용자가 스크롤을 사용할 때 지정한 무언가를 지나치면 실행하게 하겠습니다. \r\n\r\n```javascript\r\nconst useScroll = () => {\r\n  const [state, setState] = useState({\r\n    x: 0, // x와 y의 초기값을 0으로 지정\r\n    y: 0\r\n  });\r\n  const onScroll = () => {\r\n    setState({ x: window.scrollX, y: window.scrollY });\r\n  };\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", onScroll); // scorll할 때 onScroll 이벤트 핸들러 지정\r\n    return () => window.removeEventListener(\"scroll\", onScroll); // clean up\r\n  }, []);\r\n  return state;\r\n};\r\n\r\nconst App = () => {\r\n  const { y } = useScroll();\r\n  return (\r\n    <div className=\"App\" style={{ height: \"200vh\" }}>\r\n      <h1 style={{ position: \"fixed\", color: y > 100 ? \"red\" : \"blue\" }}>\r\n        Hello\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_13.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n### useFullscreen\r\n\r\nuseFullscreen은 요소를 전체화면으로 변환하는 hook입니다.\r\n\r\n```javascript\r\nconst useFullscreen = callback => {\r\n  const element = useRef();\r\n  const runCb = isFull => {\r\n    if (callback && typeof callback === \"function\") {\r\n      callback(isFull);\r\n    }\r\n  };\r\n  const triggerFull = () => { // full화면으로 변환하는 함수\r\n    if (element.current) {\r\n      if (element.current.requestFullscreen) { // chrome, safari\r\n        element.current.requestFullscreen();\r\n      } else if (element.current.mozRequestFullScreen) { // firefox\r\n        element.current.mozRequestFullScreen();\r\n      } else if (element.current.webkitRequestFullscreen) { // opera\r\n        element.current.webkitRequestFullscreen();\r\n      } else if (element.current.msRequestFullscreen) { // microsoft\r\n        element.current.msRequestFullscreen();\r\n      }\r\n      runCb(true);\r\n    }\r\n  };\r\n  const exitFull = () => { // full화면을 해제하는 함수\r\n    document.exitFullscreen();\r\n    if (document.exitFullscreen) {\r\n      document.exitFullscreen();\r\n    } else if (document.mozCancelFullScreen) {\r\n      document.mozCancelFullScreen();\r\n    } else if (document.webkitExitFullscreen) {\r\n      document.webkitExitFullscreen();\r\n    } else if (document.msExitFullscreen) {\r\n      document.msExitFullscreen();\r\n    }\r\n    runCb(false);\r\n  };\r\n  return { element, triggerFull, exitFull };\r\n};\r\n\r\nconst App = () => {\r\n  const onFullS = isFull => { // callback 함수\r\n    console.log(isFull ? \"Full\" : \"Small\");\r\n  };\r\n  const { element, triggerFull, exitFull } = useFullscreen(onFullS);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello</h1>\r\n      <div ref={element}>\r\n        <img src=\"https://hjban-dev.github.io/public/logo.png\"/>\r\n        <button onClick={exitFull}>exitFull</button>\r\n        <button onClick={triggerFull}>triggerFull</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_15.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"63fd333e-35ff-5c03-a641-d32e2cda7f93"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useFadeIn(useRef, useEffect) & useNetwork(useRef, useEffect)","category":"React"},"fields":{"slug":"2020-04-06-react-hooks10"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 useEffect\r\n\r\n## 2.5 useFadeIn & useNetwork\r\n\r\n### useFadeIn \r\n\r\nuseFadeIn은 말 그대로 서서히 나타나게 만드는 hook입니다. 이번 장에선 animation을 hook에 포함 시키는 법을 알아보겠습니다.  \r\nuseFadeIn hook은 기본적으로 useRef를 사용하여 하나의 element를 갖고 하나의 element만 return하게 하겠습니다.\r\n\r\n```javascript\r\nconst useFadeIn = () => {\r\n\tconst element = useRef(); // useRef를 사용하여 요소 선택\r\n\treturn element;\r\n}\r\n\r\nconst App = () => {\r\n  const fadeInH1 = usefadeIn();\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 {...fadeInH1}> Hello </h1> \r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nuseFadeIn에 opacity style과 transition style을 넣어주겠습니다.\r\n\r\n```javascript\r\nconst usefadeIn = () => {\r\n  const element = useRef();\r\n  useEffect(() => {\r\n    // element 안으로 들어가기 위해서 useEffect 사용\r\n    if (element.current) {\r\n      const { current } = element;\r\n      current.style.transition = `opacity 1s`;\r\n      current.style.opacity = 1;\r\n    }\r\n  }, []);\r\n  return { ref: element, style: { opacity: 0 } }; \r\n};\r\n\r\nconst App = () => {\r\n  const fadeInH1 = usefadeIn();\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 {...fadeInH1}> Hello </h1>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_10.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nfadein 효과가 정상 작동하는 것을 확인했습니다. 조금 더 나아가서 duration과 delay옵션을 추가하겠습니다.\r\n\r\n```javascript\r\nconst usefadeIn = (duration = 1, delay = 0) => {\r\n  if (typeof duration !== \"number\" || typeof delay !== \"number\") {\r\n    return;\r\n  }\r\n  const element = useRef();\r\n  useEffect(() => { // element 안으로 들어가기 위해서 useEffect 사용\r\n    if (element.current) {\r\n      const { current } = element;\r\n      current.style.transition = `opacity ${duration}s ease-in-out ${delay}s`;\r\n      current.style.opacity = 1;\r\n    }\r\n  }, []);\r\n  return { ref: element, style: { opacity: 0 } };\r\n};\r\n\r\nconst App = () => {\r\n  const fadeInH1 = usefadeIn(1);\r\n  const fadeInP = usefadeIn(1, 0.5); // delay 옵션 추가\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 {...fadeInH1}> Hello </h1>\r\n      <p {...fadeInP}>Welcome</p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_11.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nusefadeIn을 활용하여 fadein, fadeout 뿐만 아니라 다른 애니메이션으로도 활용 가능합니다.\r\n\r\n----\r\n\r\n### useNetwork\r\n\r\nuseNetwork는 navigator가 online또는 offline일 때 작동하게 하겠습니다.  \r\n예를 들어 인터넷이 중간에 끊겼을 때 '인터넷이 끊겼습니다.' 라는 팝업을 띄어줄 수 있겠죠?\r\n\r\n```javascript\r\nconst useNetwork = onChange => {\r\n  const [status, setStatus] = useState(navigator.onLine); // true 또는 false 값\r\n  const handleChange = () => {\r\n    if (typeof onChange === \"function\") {\r\n      onChange(navigator.onLine);\r\n    }\r\n    setStatus(navigator.onLine);\r\n  };\r\n  useEffect(() => {\r\n    window.addEventListener(\"online\", handleChange);\r\n    window.addEventListener(\"offline\", handleChange);\r\n    () => { //componentWillUnMount 일 때 remove 실행\r\n      window.removeEventListener(\"online\", handleChange);\r\n      window.removeEventListener(\"offline\", handleChange);\r\n    };\r\n  }, []);\r\n  return status;\r\n};\r\n\r\nconst App = () => {\r\n  const hanldeNetworkChange = online => { // 실행하는 change 함수\r\n    console.log(online ? \"It's Online state\" : \"It's Offline state\");\r\n  };\r\n  const online = useNetwork(hanldeNetworkChange);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>{online ? \"Online\" : \"Offline\"} </h1>\r\n      <p>Welcome</p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_12.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"c2987376-72e9-57a8-93c4-9fe93b1fb587"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useBeforeLeave(useEffect)","category":"React"},"fields":{"slug":"2020-04-02-react-hooks9"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 useEffect\r\n\r\n## 2.4 useBeforeLeave\r\n\r\nuseBeforeLeave는 tab을 닫으려 할 때 실행하는 함수입니다. 이전 장의 useConfirm는 창을 닫기 전에 confirm창을 띄웠습니다. useBeforeLeave는 사용자의 마우스가 브라우저를 벗어나 위쪽으로 가면 실행하는 함수입니다.  \r\n\r\n이번에는 useEffect를 사용하겠습니다.  \r\n\r\n```javascript\r\nconst useBeforeLeave = onBefore => {\r\n  if (typeof onBefore !== \"function\") {\r\n    return;\r\n  }\r\n  const handle = event => {\r\n    const { clientY } = event; // event : MouseEvent의 객체\r\n    if (clientY <= 0) { // clientY(마우스의 좌표값)가 0 이하\r\n      onBefore();\r\n    }\r\n  };\r\n  useEffect(() => { \r\n    document.addEventListener(\"mouseleave\", handle); // 컴포넌트가 mount 되면, mouseleave 이벤트 생성\r\n    return () => document.removeEventListener(\"mouseleave\", handle); // 컴포넌트가 unmount 되면, mouseleave 이벤트 제거\r\n  }, []); // 이벤트가 document에 추가 되는 것을 막음(한번만 실행)\r\n};\r\n\r\nconst App = () => {\r\n  const dontLeave = () => console.log(\"Pls dont leave\");\r\n  useBeforeLeave(dontLeave);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello</h1>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_9.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"0d473227-810e-5902-ae1a-00752c14d92e"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useConfirm & usePreventLeave","category":"React"},"fields":{"slug":"2020-04-01-react-hooks8"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 useEffect\r\n\r\n## 2.3 useConfirm & usePreventLeave\r\n\r\n이번에 만들 두가지의 hook은 사실 hook이 아닙니다. useEffect와 useState를 사용하지 않는 함수 컴포넌트로 볼 수 있습니다.\r\n\r\n### useConfirm\r\n\r\nuseConfirm은 이벤트를 실행하기 전에 사용자에게 확인을 받는 기능을 하는 함수입니다. 확인을 받는 과정은 브라우저 기능인 confirm기능을 활용하겠습니다.  \r\n\r\nuseConfirmd은 사용자가 어떤 것을 저장하거나 삭제할 때 유용하게 활용할 수 있습니다.  \r\n실행 순서는 browser가 이벤트를 막고 confirm을 실행한 후, 확인을 하면 onConfirm 이벤트가 진행, 취소를 누르면 onCancel이벤트를 진행하게 할 것 입니다.  \r\n\r\n먼저 useConfirm 함수를 선언하고, args로 message와 onConfirm와 onCancel 총 3개를 넣겠습니다.\r\n\r\n```javascript\r\nconst useConfirm = (message = \"\", onConfirm, onCancel) => { // message의 기본값은 \"\" \r\n  if (!onConfirm || typeof onConfirm !== \"function\") { \r\n    return; // 매개변수 onConfirm가 없거나 onConfirm이 함수가 아나라면 return 실행\r\n  }\r\n  if (onCancel && typeof onCancel !== \"function\") { // onCancle은 필수요소는 아님\r\n    return;\r\n  }\r\n  const confirmAction = () => { // confirm창의 응답에 따른 이벤트 실행 함수\r\n    if (confirm(message)) { // 확인을 눌렀다면\r\n      onConfirm();\r\n    } else { // 취소를 눌렀다면\r\n      onCancel();\r\n    }\r\n  };\r\n  return confirmAction; \r\n};\r\n\r\nconst App = () => {\r\n\t\r\n  const deleteWorld = () => console.log(\"delete\"); // 확인 눌렀을 때 실행할 함수\r\n  const abortWorld = () => console.log(\"Aborted\"); // 취소 눌렀을 때 실행할 함수\r\n\r\n  const conformDelete = useConfirm(\"r u sure?\", deleteWorld, abortWorld);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello</h1>\r\n      <button onClick={conformDelete} >Delete the world</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_7.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### usePreventLeave\r\n\r\nusePreventLeave는 사용자들이 브라우저를 떠나기 전에 confirm창을 띄워 확인 받는 함수입니다.  \r\n\r\n\r\n```javascript\r\nconst usePreventLeave = () => {\r\n  const listener = event => {\r\n    event.preventDefault();\r\n    event.returnValue = \"\";\r\n  };\r\n  const enablePrevent = () => window.addEventListener(\"beforeunload\", listener); // beforeunload 이벤트 리스너로 listener 지정\r\n  const disablePrevent = () =>\r\n    window.removeEventListener(\"beforeunload\", listener); // beforeunload 이벤트 제거\r\n  return { enablePrevent, disablePrevent }; // 두 함수를 return\r\n};\r\n\r\nconst App = () => {\r\n  const { enablePrevent, disablePrevent } = usePreventLeave();\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello</h1>\r\n      <button onClick={enablePrevent}>Protect</button>\r\n      <button onClick={disablePrevent}>Unprotect</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n사용자가 Protect를 클릭하는 순간 window는 beforeunload라는 이벤트를 갖게 되고, EventListner로 listener를 가지고 있습니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_8.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"22b30e42-e839-54ec-9a5f-1a5bb7751cd5"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useRef, useClick(useRef, useEffect) & useHover(useRef, useEffect)","category":"React"},"fields":{"slug":"2020-03-27-react-hooks7"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 useEffect\r\n\r\n## 2.2 useClick\r\n\r\n### useRef\r\n\r\nuseClick을 사용하기 전에 useRef() hook을 알아봅시다.  \r\n컴포넌트를 작성하다 보면 태그를 직접 다뤄야 할 때가 있습니다. js의 경우에는 document.getElementById 메서드로 선택했었죠.  \r\n\r\nReact의 경우 특정 엘리먼트의 크기나 위치 등을 가져와 설정할 때 ref를 사용합니다.  \r\n일단 기본적으로 `react useRef() 를 사용하여 Ref 객체를 만들고`, 이 객체를 우리가 선택하고 싶은 **DOM** 에 **ref** 값으로 설정해주어야 합니다. \r\n\r\n```javascript\r\nconst App = () => {\r\n  const inputElement = useRef(); // useRef()를 사용하여 ref객체 생성\r\n  console.log(inputElement); \r\n  // Object {current: HTMLInputElement} 객체로 구성되어 있고, 내부에 current라는 속성이 있음\r\n  // current: <input placeholder=\"hi\"></input> current는 태그 그 자체\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>Hi</div>\r\n      <input ref={inputElement} placeholder=\"hi\" /> {/* ref 값으로 inputElement 지정 */}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n위 코드의 inputElement의 객체를 살펴보면 ref속성으로 지정한 태그를 확인할 수 있습니다.  \r\n이번엔 3초 뒤에 input 태그에 focus되도록 해봅시다.\r\n\r\n```javascript\r\nconst App = () => {\r\n  const inputElement = useRef();\r\n  setTimeout(() => inputElement.current.focus(), 3000);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>Hi</div>\r\n      <input ref={inputElement} placeholder=\"hi\" /> \r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_5.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### useClick\r\n\r\nreference에 대해 이해했다면 useClick hook을 만들어봅시다.  \r\n일단 useRef()를 사용하여 h1태그를 선택합니다.\r\n\r\n```javascript\r\nconst useClick = onClick => {\r\n  const element = useRef();\r\n  return element; // { current: <h1>Hi</h1> }\r\n};\r\n\r\nconst App = () => {\r\n  const h1Element = useClick();\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 ref={h1Element}>Hi</h1>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n그리고 useEffect를 사용하여 만약 element.current가 있다면 click 하면 매개변수로 들어온 onClick 함수를 실행하는 event를 지정하겠습니다.\r\n\r\n```javascript\r\nconst useClick = onClick => {\r\n  const element = useRef();\r\n  useEffect(() => {\r\n    if (element.current) {\r\n      element.current.addEventListener(\"click\", onClick); // element.current에 args 함수 실행하는 이벤트 지정\r\n    }\r\n  });\r\n  return element;\r\n};\r\n\r\nconst App = () => {\r\n  const sayHello = () => console.log(\"sayHello\");\r\n  const h1Element = useClick(sayHello);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 ref={h1Element}>Hi</h1>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_6.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n보시다시피, Hi를 클릭하면 sayHello가 실행합니다.  \r\n하지만 여기서 끝이 아닙니다. 지난 장에서 useEffect는 **componentDidMount**와 **componentDidUpdate**, **componentWillUnmount**의 구성이라고 했습니다.  \r\n방금 한 부분은 componentDidMount의 상황에서 생기는 이벤트이고 이벤트가 발생 한 후 componentWillUnmount의 상황에서 정리를 해줘야 합니다.\r\n\r\n```javascript\r\nconst useClick = onClick => {\r\n  const element = useRef();\r\n  useEffect(() => {\r\n    if (typeof onClick === \"function\") { // componentDidMount, componentDidUpdate 일 때 실행하는 부분\r\n      if (element.current) {\r\n        element.current.addEventListener(\"click\", onClick);\r\n      }\r\n    }\r\n    return () => { // componentWillUnmount 일 때 실행하는 부분\r\n      if (element.current) {\r\n        element.current.removeEventListener(\"click\", onClick);\r\n      }\r\n    };\r\n  }, []);\r\n  return element;\r\n};\r\n```\r\n\r\n### useHover\r\n\r\n앞서 만든 useClick 을 활용하여 useHover를 만들어 보겠습니다. useEffect를 사용할 때 사용한 event만 변경해주면 됩니다!\r\n\r\n```javascript\r\nconst useHover = onHover => {\r\n  if (typeof onHover !== \"function\") {\r\n    return;\r\n  }\r\n  const element = useRef();\r\n  useEffect(() => {\r\n    if (element.current) {\r\n      element.current.addEventListener(\"mouseenter\", onHover); \r\n    }\r\n    return () => {\r\n      if (element.current) {\r\n        element.current.removeEventListener(\"mouseenter\", onHover);\r\n      }\r\n    };\r\n  }, []);\r\n  return element;\r\n};\r\n```\r\n"},"id":"75fe5447-fead-586d-8953-9fb33d3438ea"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useTitle(useState, useEffect)","category":"React"},"fields":{"slug":"2020-03-24-react-hooks6"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 useEffect\r\n\r\n## 2.1 useTitle\r\n\r\nuseEffect를 이용하여 title을 바꾸는 useTitle hook을 만들어 보겠습니다.\r\n\r\n```javascript\r\nconst useTitle = iniitialTitle => {\r\n  const [title, setTitle] = useState(iniitialTitle); // useTitle의 매개변수 iniitialTitle를 초기값으로 설정\r\n  const updateTitle = () => {\r\n    const htmlTitle = document.querySelector(\"title\");\r\n    htmlTitle.innerText = title;\r\n  };\r\n  useEffect(updateTitle, [title]); // 컴포넌트가 마운트 될 때와 title이 업데이트 될 때, updateTitle 실행\r\n  return setTitle;\r\n};\r\n\r\nconst App = () => {\r\n  const titleUpdater = useTitle(\"My React App...\"); // App 컴포넌트에서 useTitle 함수 사용\r\n  return (\r\n    <div className=\"App\">\r\n      <div>Hi</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n일단 App 컴포넌트가 실행되면서 titleUpdater 선언됨.  \r\nargs로 \"My React App...\"를 넘겼기 때문에 useTitle함수의 useState가 할당된 title은 \"My React App...\"  \r\nApp 컴포넌트가 마운트 되면 useEffect가 updateTitle을 실행  \r\nupdateTitle 함수의 실행으로 title태그 내부 텍스트가 \"My React App...\"로 변경  \r\n \r\n아직 useEffect의 두번째 args인 title이 변경되지 않았기 때문에 재실행은 되지 않고 \"My React App...\"로 끝납니다.  \r\n이번엔 setTimeout함수를 사용하여 title을 변경해보겠습니다.\r\n\r\n```javascript\r\nconst useTitle = iniitialTitle => {\r\n  const [title, setTitle] = useState(iniitialTitle);\r\n  const updateTitle = () => {\r\n    const htmlTitle = document.querySelector(\"title\");\r\n    htmlTitle.innerText = title;\r\n  };\r\n  useEffect(updateTitle, [title]);\r\n  return setTitle;\r\n};\r\n\r\nconst App = () => {\r\n  const titleUpdater = useTitle(\"My React App...\");\r\n  setTimeout(() => { // 3초후 titleUpdater 실행\r\n    titleUpdater(\"home\");\r\n  }, 3000);\r\n  return (\r\n    <div className=\"App\">\r\n      <div>Hi</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\ntitleUpdater(\"home\")을 실행하면 useTitle을 실행하고, useState()로 인한 title이 변경됩니다.  \r\ntitle이 변경되면 useEffect가 실행되고, title태그 내부 텍스트는 \"home\"으로 변경\r\n\r\n"},"id":"9bfa4032-5af3-5486-80c0-90f2539901e0"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useEffect","category":"React"},"fields":{"slug":"2020-03-23-react-hooks5"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 useEffect\r\n\r\n## 2.0 Introduction to useEffect\r\n\r\nuseEffect Hook은 **componentDidMount와 componentDidUpdate, componentWillUnmount라고 생각**하면 됩니다.  \r\n\r\n아래코드를 살펴봅시다.\r\nsayHello라는 함수를 선언했고, useEffect의 매개변수로 sayHello()를 실행하겠습니다.\r\n\r\n```javascript\r\nconst App = () => {\r\n  const sayHello = () => console.log(\"hello\");\r\n\r\n  const [number, setNumber] = useState(0);\r\n  const [anumber, setaNumber] = useState(0);\r\n\r\n  useEffect( ()=> sayHello() );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>Hi</div>\r\n      <button onClick={() => setNumber(number + 1)}>{number}</button>\r\n      <button onClick={() => setaNumber(anumber - 1)}>{anumber}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\n아까 useEffect Hook은 componentDidMount와 componentDidUpdate, componentWillUnmount라고 했죠?  \r\n**componentDidMount**는 컴포넌트가 마운트된 직후,  \r\n**componentDidUpdate**는 갱신이 일어난 직후  \r\n**componentWillUnmount**는 컴포넌트가 마운트 해제되어 제거되기 직전에 실행 되는 컴포넌트 입니다.  \r\n\r\n위 코드에서 useEffect Hook 때문에 App 컴포넌트가 마운트된 직후와, 갱신이 일어날 때 마다 sayHello()가 실행됩니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_3.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n브라우저 새로고침 후에 hello가 보이시죠? 그리고 버튼을 누를때 마다도 실행되고 있습니다.  \r\n\r\nuseEffect는 사실 2개의 인자를 받습니다. 첫번째는 function으로의 effect이고, 두번째 인자는 deps로 만약 deps가 있다면 deps의 리스트에 있는 값일 때만 첫번째 인자인 effect가 실행되도록 합니다.  \r\n\r\n두번째 args에 number를 넣어봅시다.\r\n\r\n```javascript\r\nconst App = () => {\r\n  const sayHello = () => console.log(\"hello\");\r\n\r\n  const [number, setNumber] = useState(0);\r\n  const [anumber, setaNumber] = useState(0);\r\n\r\n  useEffect(sayHello, [number]);\r\n\r\n  (...)\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_3.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n두번째 args에 number를 넣었기 때문에 증가 버튼을 누를때만 sayHello함수가 실행됩니다.  \r\n만약 컴포넌트가 마운트 되었을 때만 실행 시키고 싶다면 두번째 매개변수를 `[]` 형태인 빈 배열로 두면 됩니다.\r\n"},"id":"133ca9c7-10be-586e-92fe-a66c39dd8d77"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useTabs(useState)","category":"React"},"fields":{"slug":"2020-03-20-react-hooks4"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 1 useState\r\n\r\n## 1.3 useTabs\r\n\r\n이번에는 계속해서 useState를 사용하여 커스텀 Hooks인 useTabs를 만들어보겠습니다.  \r\nuseTabs는 버튼에 따라 노출되는 내용을 변화시키겠습니다.  \r\n  \r\nuseInput은 args로 initialValue를 받고, initialValue를 초기값으로 갖는 useState를 작성해주었습니다.\r\n\r\n배열 객체를 사용하여 button과 내용을 나타나게 하겠습니다.  \r\ndummy로 content를 만들어줍니다.\r\n\r\n```javascript\r\nconst content = [\r\n  {\r\n    tab: \"Section 1\",\r\n    content: \"This is the content of the Section 1\"\r\n  },\r\n  {\r\n    tab: \"Section 2\",\r\n    content: \"This is the content of the Section 2\"\r\n  }\r\n];\r\n```\r\n\r\n위의 배열을 map()메소드를 사용하여 Section1, Section2 버튼을 만들겠습니다.\r\n\r\n```javascript\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      {content.map((section) => (\r\n        <button>{section.tab}</button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_3.jpg\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n버튼을 노출시키는 것은 간단했습니다.  \r\n이제 useTabs hook을 만들어봅시다. useTabs는 initialTab, allTabs 두개의 매개변수를 갖고,\r\ncurrentItem, changeItem 두 값을 return 하게 만들겠습니다.  \r\n\r\n매개변수 initialTab에는 초기에 노출할 값, allTabs에는 모든 tab의 정보를 주도록 만들겠습니다.\r\n\r\n```javascript\r\nconst useTabs = (initialTab, allTabs) => {\r\n  const [currentIndex, setCurrentIndex] = useState(initialTab); // useState에 initialTab을 초기값으로 세팅 \r\n  return {\r\n    currentItem: allTabs[currentIndex], // allTabs의 인덱스 값으로 찾은 현재 탭의 정보\r\n    changeItem: setCurrentIndex // 활성화 된 tab\r\n  };\r\n};\r\n```\r\n\r\nbutton에 onClick기능을 넣어 changeItem 실행하겠습니다.  \r\nchangeItem은 useTabs에서 setCurrentIndex을 실행하는 부분입니다.\r\n\r\n```javascript\r\nconst App = () => {\r\n  const { currentItem, changeItem } = useTabs(0, content);\r\n  return (\r\n    <div className=\"App\">\r\n      {content.map((section, index) => (\r\n        <button onClick={() => changeItem(index)}>{section.tab}</button>\r\n      ))}\r\n      <div>{currentItem.content}</div>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_2.gif\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n더 나은 코드를 만들기 위해 error부분을 잡겠습니다.\r\n\r\n```javascript\r\nconst useTabs = (initialTab, allTabs) => {\r\n  if (!allTabs || !Array.isArray(allTabs)) { \r\n    return; // useTabs를 사용할 때 두번째 매개변수를 주지 않거나, 두번째 매개변수가 매열이 아니라면 return(에러 페이지 뜨지 않게)\r\n  }\r\n  const [currentIndex, setCurrentIndex] = useState(initialTab);\r\n  return {\r\n    currentItem: allTabs[currentIndex],\r\n    changeItem: setCurrentIndex\r\n  };\r\n};\r\n```\r\n"},"id":"01930880-0a03-5798-b70a-5e94e9ad9404"}},{"node":{"frontmatter":{"title":"Javascript ES6 문법 Object, Destructuring","category":"Javascript"},"fields":{"slug":"2020-03-17-es2015_2"},"internal":{"content":"\r\n> 인프런의 [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%EA%B0%95%EC%A2%8C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/dashboard)를 듣고 정리합니다. \r\n\r\n# 자바스크립트 ES2015(ES6) 문법 정리\r\n\r\n## Object\r\n\r\n### 간단히 객체생성하기\r\n\r\n```javascript\r\nconst name = \"crong\";\r\nconst age = 33;\r\n\r\nconst obj = {\r\n  name: name,\r\n  age: age\r\n};\r\n\r\nconsole.log(obj); // {name: \"crong\", age: 33}\r\n```\r\n\r\n```javascript\r\nfunction getObj(){\r\n  const name = \"crong\"\r\n\r\n  const getName = function(){\r\n    return name;\r\n  }\r\n  const setName = function(){\r\n    name = newname;\r\n  }\r\n  const printName = function(){\r\n    console.log(name)\r\n  }\r\n\r\n  return{\r\n    getName : getName,\r\n    setName : setName\r\n  }\r\n}\r\n\r\nvar obj = getObj();\r\nconsole.log(obj); // {getName: ƒ, setName: ƒ}\r\nconsole.log(obj.getName()); // crong\r\n```\r\n\r\nreturn 부분 getName : getName, 앞 뒤의 코드가 같을 땐 하나의 변수로 사용 가능\r\n\r\n```javascript\r\n(...)\r\nreturn {getName, setName}\r\n```\r\n\r\n아래 코드처럼 처음 선언할 때에도 사용 가능\r\n\r\n```javascript\r\nconst data = {\r\n  name,\r\n  getName(){\r\n    \r\n  },\r\n  age\r\n}\r\n```\r\n\r\n---\r\n\r\n## Destructuring\r\n\r\n### Destructuring Array\r\n\r\n배열 순서대로 변수 지정가능\r\n\r\n```javascript\r\nlet data = ['amy', 'bob', 'john'];\r\nlet bob = data[1]; // 데이터의 특정부분을 변수로 지정\r\nlet john = data[2]; // 데이터의 특정부분을 변수로 지정\r\n\r\nlet [name1, ,name3] = data; // data의 정보를 한꺼번에 변수로 지정\r\nconsole.log(name1, name3); // amy john\r\n```\r\n\r\n### Destructuring Object\r\n\r\n객체에서 활용 가능  \r\n객체의 key값 name, age를 생성하여 obj를 할당\r\n\r\n```javascript\r\nlet obj = {\r\n  name: \"amy\",\r\n  address: \"korea\",\r\n  age: 25\r\n}\r\n\r\nlet {name, age} = obj;\r\n\r\nconsole.log(name,age); // amy, 25\r\n```\r\n\r\n이름 변경도 가능.\r\n\r\n```javascript\r\n(...)\r\nlet {name:myName, address:myAddress} = obj;\r\nconsole.log(myName, myAddress); // amy, 25\r\n```\r\n\r\n### Destructuring 활용 JSON파싱\r\n\r\n```javascript\r\nvar news = [\r\n  {\r\n    \"title\" : \"news_title11\",\r\n    \"url\" : \"http://url11.url11.com\",\r\n    \"list\" : [\r\n      \"new11_list1\",\r\n      \"new11_list2\",\r\n      \"new11_list3\",\r\n    ]\r\n  },\r\n  {\r\n    \"title\" : \"news_title22\",\r\n    \"url\" : \"http://url22.url22.com\",\r\n    \"list\" : [\r\n      \"new22_list1\",\r\n      \"new22_list2\",\r\n      \"new22_list3\",\r\n    ]\r\n  }\r\n];\r\n\r\nlet [, title22] = news;\r\nlet {title, url} = title22;\r\n\r\nconsole.log(title, url); // news_title22 http://url22.url22.com\r\n```\r\n\r\n```javascript\r\nlet [, {title, url}] = news;\r\nconsole.log(url); // http://url22.url22.com\r\n```\r\n\r\n### Destructuring 활용_Event객체전달\r\n\r\n매개변수로 전달할 때 자주 사용\r\n\r\n```javascript\r\n(...)\r\nfunction getNewsList([, {list}]) {\r\n  console.log(list);\r\n}\r\n\r\ngetNewsList(news);\r\n```\r\n\r\n\r\n```javascript\r\ndocument.querySelector(\"div\").addEventListener(\"click\", function(evt){\r\n  console.log(evt);\r\n});\r\n```\r\n\r\n```javascript\r\ndocument.querySelector(\"div\").addEventListener(\"click\", function({target}){\r\n  console.log(target.tagName);\r\n});\r\n```\r\n\r\n---\r\n\r\n## Set & WeakSet\r\n\r\n### Set 으로 유니크한 배열만들기\r\n\r\n중복없이 유일한 값을 저장하려고 할 때, 이미 존재하는지 체크할 때 유용. 배열의 형태  \r\n값 추가 메소드 .add()\r\n\r\n```javascript\r\nlet mySet = new Set(); // Set객체 생성\r\nconsole.log(toString.call(mySet)); // [object Set]\r\n\r\nmySet.add(\"crong\"); // crong 추가\r\nmySet.add(\"hary\"); // hary 추가\r\nmySet.add(\"crong\"); // crong 추가. 하지만 crong이 이미 존재하여 추가되지 않음\r\nmySet.add({a: 1, b: 2}); // 객체 추가\r\n\r\nmySet.forEach(function(v){\r\n  console.log(v); // crong, hary, {a: 1, b: 2}\r\n});\r\n```\r\n\r\n삭제 메소드 .delete()  \r\n값 확인 메소드 .has()  \r\n길이를 확인하는 속성 size\r\n\r\n```javascript\r\n(...)\r\nmySet.delete('crong'); // crong 삭제\r\n\r\nconsole.log(mySet.has('hary')); // true\r\nconsole.log(mySet.size); // 3\r\n```\r\n\r\n### WeakSet 으로 효과적으로 객체타입저장하기\r\n\r\nWeakset은 객체의 모음 객체.\r\n\r\n```javascript\r\nlet arr = [1,2,3,4];\r\nlet arr2 = [5,6,7,8];\r\nvar obj = {arr, arr2}\r\nlet ws = new WeakSet();\r\n\r\nws.add(arr);\r\nws.add(arr2);\r\nws.add(obj);\r\n\r\narr = null;\r\n//ws.add('111');\r\n//ws.add(111);\r\n//ws.add(function(){});\r\n\r\nconsole.log(ws);\r\nconsole.log(ws.has(arr));\r\n```\r\n\r\n---\r\n\r\n## Set & WeakSet\r\n\r\nArray -> set, weakset\r\nObject -> map, weakmap\r\n\r\n### Map & WeakMap 추가정보를 담은 객체저장하기\r\n\r\nmap은 key/value\r\n\r\n```javascript\r\n\r\n```\r\n\r\n\r\n\r\n"},"id":"6f0a401a-f91e-537e-ac25-be8b70e10368"}},{"node":{"frontmatter":{"title":"Javascript ES6 문법 Scope, String, Array","category":"Javascript"},"fields":{"slug":"2020-03-13-es2015_1"},"internal":{"content":"\r\n> 인프런의 [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%EA%B0%95%EC%A2%8C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/dashboard)를 듣고 정리합니다. \r\n\r\n# 자바스크립트 ES2015(ES6) 문법 정리\r\n\r\n## Scope\r\n\r\n### let\r\n\r\nes2015이전의 문법에선 var라는 키워드로 정의했고, var로 선언된 변수는 스코프를 함수 단위로 결정 사용한다.\r\n\r\n```javascript\r\nif(true){\r\n  var mycode = \"test\"\r\n}\r\nconsole.log(mycode) // 결과는 \"test\"\r\n```\r\n위 코드의 mycode라는 변수는 함수 안에서 선언된 것이 아니라, if문 안에 선언되어 있으므로 전역변수이다. 그래서 if문 밖에서도 mycode를 호출가능하다.\r\n\r\n```javascript\r\nif(true){\r\n  let mycode = \"test\"\r\n}\r\nconsole.log(mycode) // Uncaught ReferenceError: mycode is not defined error 발생\r\n```\r\n\r\n하지만 let은 블록 단위로 스코프를 만든다. mycode는 if문 안에서만 호출 가능.\r\n\r\n### let과 closer\r\n\r\nDOM에 ul>li 의 구조로 4개의 리스트가 있다고 가정하고, 아래 코드의 결과를 예상해보자.\r\n\r\n```javascript\r\nconst list = document.querySelectorAll('li');\r\nfor(var i=0; i<list.length; i++){\r\n  list[i].addEventListener(\"click\", () => console.log(i+\"번째 리스트\"))\r\n}\r\n```\r\n\r\n리스트를 누를 때 마다 '4번째 리스트'라고 나온다. 클로저 현상으로 addEventListener의 콜백함수 안에 있는 i는 전역변수로 선언된 i를 가져오기 때문이다.\r\n\r\n```javascript\r\nconst list = document.querySelectorAll('li');\r\nfor(let i=0; i<list.length; i++){\r\n  list[i].addEventListener(\"click\", () => console.log(i+\"번째 리스트\"))\r\n}\r\n```\r\n\r\ni를 지역변수화 시켜서 리스트 순서에 맞는 console을 확인할 수 있다.\r\n\r\n\r\n### const특성과 immutable array\r\n\r\nconst키워드는 불변의 값을 담을 때 사용한다. 한번 선언하면 재할당 할 수 없다.\r\n\r\n```javascript\r\nconst example = 2;\r\nexample = 3; // Type Error: Assignment to constant variable\r\n```\r\n\r\n하지만 아래코드처럼 push() 메소드는 사용이 가능하다.\r\n\r\n```javascript\r\nconst list = [\"apple\", \"orange\", \"banana\"];\r\nlist.push(\"grape\");\r\nconsole.log(list); // [\"apple\", \"orange\", \"banana\", \"grape\"]\r\n```\r\nconst를 사용하더라도 배열과 오브젝트의 값을 변경하는 것은 가능하다.  \r\nconst가 불변은 아니라고 생각하자.\r\n\r\n조작이 불가능한 immutable array를 만들때는 concat으로 새로운 변수를 생성하자.\r\n\r\n```javascript\r\n//immutable array 만들기 (앞, 뒤로 가기)\r\nconst list = [\"apple\", \"orange\", \"banana\"];\r\nlist2 = [].concat(list, \"grape\");\r\nconsole.log(list);\r\nconsole.log(list2);\r\n```\r\nlist2는 list를 참조하여 만든 새로운 배열이다. (추가, 삭제, 변경 가능)\r\n\r\n## String\r\n\r\n### ES2015 String 에 새로운 메서드들\r\n\r\n```javascript\r\nlet str = \"hello world\";\r\nlet match1 = \"hello\";\r\nlet match2 = \"world\";\r\nconsole.log(str.startsWith(match1)); // true\r\nconsole.log(str.endsWith(match2)); // true\r\nconsole.log(str.includes(\"worlds\")); // false\r\n```\r\n\r\n## Array\r\n\r\n### for of - 순회하기\r\n\r\n기존의 배열 반복문 for문, forEach문\r\n\r\n```javascript\r\nvar data = [1, 2, undefined, NaN, null, ''];\r\n\r\nfor (var i = 0; i < data.length; i++) {\r\n  console.log(i); // 0,1,2,3,4,5\r\n}\r\n\r\ndata.forEach(data => {\r\n  console.log(data); // 1, 2, undefined, NaN, null, ''\r\n});\r\n```\r\n\r\n배열의 반복문에는 for in 반복문도 있는데, for in반복문은 대상 외에 array의 상위 객체도 포함한다. 그렇기에 배열의 for in의 지양한다.\r\n\r\n```javascript\r\nvar data = [1, 2, undefined, NaN, null, ''];\r\n\r\nArray.prototype.getIndex = function() {};\r\n\r\nfor (let idx in data) {\r\n  console.log(data[idx]); // 1, 2, undefined, NaN, null, '', ƒ () {}\r\n}\r\n```\r\n\r\n그러한 실수를 줄이기 위한 방법으로 for of 반복문이 es6에서 추가 되었다.\r\n\r\n```javascript\r\nfor (let idx of data) { // 1, 2, undefined, NaN, null, ''\r\n  console.log(idx);\r\n}\r\n```\r\n\r\nfor of 반복문은 문자열도 가능하다.\r\n\r\n```javascript\r\nlet str = \"hello world\"\r\nfor (let idx of str) {\r\n  console.log(idx); // h,e,l,l,o, ,w,o,r,l,d\r\n}\r\n```\r\n\r\n### spread operator - 배열의 복사\r\n\r\n전개 연산자(펼침 연산자)  \r\n함수 또는 배열에 적용, 마침표 3개 (...)를 찍어 표기\r\n\r\n```javascript\r\nlet pre = ['apple', 'banana', 100];\r\nlet newData = [...pre];\r\n\r\nconsole.log(pre, newData); // [\"apple\", \"banana\", 100], [\"apple\", \"banana\", 100]\r\n```\r\n복사를 한 것. 두 변수가 같지는 않음 \r\n\r\n### spread operator - 몇가지 활용\r\n\r\n```javascript\r\nlet pre = [100, 200, 'hello', null];\r\nlet newData = [0, 1, 2, ...pre, 300];\r\n\r\nconsole.log(pre, newData); \r\n// [100, 200, \"hello\", null] \r\n// [0, 1, 2, 100, 200, \"hello\", null, 300]\r\n```\r\n\r\n```javascript\r\nlet sum = (a,b,c)=> a + b + c;\r\n\r\nlet pre = [100, 200, 300];\r\n\r\nconsole.log(sum.apply(null, pre)); // 600 - es6이전 방법 \r\nconsole.log(sum(...pre)); // 600\r\n```\r\n\r\n### from 메서드로 진짜 배열 만들기\r\n\r\njs의 모든 함수에선 매개변수를 지칭하는 arguments라는 키워드 사용 가능. arguments는 객체\r\n```javascript\r\nfunction addMark() {\r\n  let newData = [];\r\n    for (let i = 0; i < arguments.length; i++) {\r\n      newData.push(arguments[i] + '~');\r\n    }\r\n  console.log(newData);\r\n}\r\naddMark(1, 2, 3, 4); // [\"1~\", \"2~\", \"3~\", \"4~\"]\r\n```\r\n\r\nmap을 사용할 수도 있다. 하지만 위에서 말했듯이 arguments는 객체이기 때문에 array로 변환 시켜줘야 함.  \r\nfrom을 사용하면 쉽게 변환 가능  \r\nform: 유사배열객체 또는 순회 가능한 모든 종류의 데이터 타입을 배열로 전환.\r\n```javascript\r\nfunction addMark() {\r\n  let newArray = Array.from(arguments);\r\n  let newData = newArray.map(value => {\r\n    return value + '!';\r\n  });\r\n  console.log(newData);\r\n}\r\naddMark(1, 2, 3, 4);\r\n```\r\n\r\n## 특정 문자열이 포함된 배열 만들어 반환하기 - 예제\r\n\r\n```javascript\r\nlet print = () => {\r\n  let list = document.querySelectorAll('li');\r\n  let listArr = Array.from(list);\r\n  let newArr = listArr.filter(v => {\r\n    return v.innerText.includes('e');\r\n  });\r\n  console.log(newArr.length);\r\n}\r\nprint()\r\n```\r\n"},"id":"0ecce666-8e6a-5076-b943-21cbe0a7843f"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useInput(useState)","category":"React"},"fields":{"slug":"2020-03-01-react-hooks3"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 1 useState\r\n\r\n## 1.1 useInput\r\n\r\nuseState를 사용하여 커스텀 Hooks인 useInput을 만들어보겠습니다.  \r\nuseInput은 기본적으로 input을 업데이트 합니다.  \r\n  \r\nuseInput은 args로 initialValue를 받고, initialValue를 초기값으로 갖는 useState를 작성해주었습니다.\r\n\r\n```javascript\r\nconst useInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  return { value };\r\n};\r\n\r\nconst App = () => {\r\n  const name = useInput(\"Mr.\");\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello </h1>\r\n      <input placeholder=\"Name\" {...name} />\r\n    </div>\r\n  );\r\n};\r\n```\r\nuseInput함수에서 사용자가 변화를 주기 전에 value를 return하여 args를 초기값으로 갖게 합니다.  \r\n{...name}은 value={name.value}로도 작성할 수 있습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/hooks/nomad_react_hooks_1.JPG\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이어서 useInput내부에 onChange함수를 만들어보겠습니다.\r\n\r\n```javascript\r\nconst useInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const onChange = event => {\r\n    console.log(event.target); // <input placeholder=\"name\" value=\"Mr.\"></input>\r\n  };\r\n  return { value, onChange }; \r\n};\r\n```\r\nApp 컴포넌트는 따로 수정할 필요가 없습니다. {...name}형태인 전개구문 문법으로 입력해주었기 때문입니다.\r\n\r\n## 1.2 useInput part Two\r\n\r\nuseInput에 validator args를 추가하겠습니다. useInput은 validator가 있는지 확인하고 실행하게 합니다.\r\n\r\n```javascript\r\nconst useInput = (initialValue, validator) => { // validator 추가\r\n  const [value, setValue] = useState(initialValue);\r\n  const onChange = event => {\r\n    const {\r\n      target: { value }\r\n    } = event;\r\n    let willUpdate = true;\r\n    if (typeof validator === \"function\") {\r\n      willUpdate = validator(value); // validator 실행\r\n    }\r\n    if (willUpdate) {\r\n      setValue(value);\r\n    }\r\n  };\r\n\r\n  return { value, onChange };\r\n};\r\n\r\nconst App = () => {\r\n  const maxLen = value => value.length < 10; // maxLen 함수 선언\r\n  const name = useInput(\"hj\", maxLen); // maxLen을 args로 전달\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello</h1>\r\n      <input placeholder=\"name\" {...name} />\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nuseInput을 활용하면 여러 조건들을 제어할 수 있습니다.\r\n"},"id":"ac710b55-d50e-515e-b4d9-dabec9899863"}},{"node":{"frontmatter":{"title":"Movie Web App - Local State 2","category":"GraphQL"},"fields":{"slug":"2020-02-24-graphql_apollo5"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 웹 앱 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 Local State\r\n\r\n## 2.2 Connecting Detail and Home\r\n\r\napollo.js파일에서 Mutation의 LikeMovie를 toggleLikeMovie로 변경하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-18.jpg\" alt=\"\">\r\n<figcaption>LikeMovie를 toggleLikeMovie로 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\nMovie.js에 LIKE_MOVIE로 만들었던 gql부분의 likeMovie를 toggleLikeMovie로 변경하고, isLiked를 추가하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-19.jpg\" alt=\"\">\r\n<figcaption>toggleLikeMovie로 변경, isLiked 추가</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그리고 Movie.js파일의 하단에 return하는 부분을 toggleMovie로 수정하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-20.jpg\" alt=\"\">\r\n<figcaption>return코드에서 likeMovie를 toggleMovie로 수정</figcaption>\r\n</figure>\r\n</center>\r\n\r\n기존의 button의 onClick부분이 likeMovie일 때는 삼항연산자로 null값을 정해주었었는데, toggleMovie로 변경되면서 삼항연산자는 지워주고 toggleMovie만 지정해두었습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-20.gif\" alt=\"\">\r\n<figcaption>toggleMovie작동</figcaption>\r\n</figure>\r\n</center>\r\n\r\nlike버튼이 정상작동하니 isLiked를 detail page에서도 노출될 수 있게 수정하겠습니다.  \r\nDetail.js의 GET_MOVIE gql에 client에서 만든 isLiked를 추가하고, return하는 부분에서 loading에 따른 삼항연산자에 title옆에 isLikde에 따른 OK와 NO를 추가하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-21.jpg\" alt=\"\">\r\n<figcaption>detail page에서 isLiked활용</figcaption>\r\n</figure>\r\n</center>\r\n\r\nDetail페이지에 각각의 Movie id를 가져와서 그 id에 따른 return값을 주었습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-22.gif\" alt=\"\">\r\n<figcaption>detail page에서 isLiked에 따른 결과값 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},"id":"22dd696c-23e9-5cc9-b6d3-9eb654f3dc12"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - useState","category":"React"},"fields":{"slug":"2020-02-21-react-hooks2"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 1 useState\r\n\r\n## 1.0 Introduction to useState\r\n\r\nhooks는 react의 state machine에 연결하는 기본적인 방법입니다. hooks를 사용하면 class를 사용하지 않고 함수만 사용하여 프로그래밍이 가능합니다. 알다시피 hooks가 생기기전엔 function Component엔 state를 작성할 수 없었습니다.  \r\n\r\nuseState는 **항상 2개의 value로 이루어져있는 배열을 반환**합니다. 첫번째는 변경할 만큼의 값, 두번째는 변경되는 값.  \r\nuseState는 말 그대로 상태를 변경하는 것 입니다. useState는 state를 초기 값을 세팅할 수 있는 옵션을 제공하고, 우리는 그 값을 1으로 주겠습니다. \r\n\r\n```javascript\r\nconst App = () => {\r\n  const [item, setItem] = useState(1);\r\n  const increament = () => setItem(item + 1);\r\n  const decreament = () => setItem(item - 1);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello {item}</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n      <button onClick={increament}>increament</button>\r\n      <button onClick={decreament}>decreament</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n기존 react는 state를 사용하기 위해선 반드시 class Component로 변경해야 했고, class는 this나 render등 여러 조건들을 고려해야 했지만 hooks를 사용한다면 그런 것은 신경쓰지 않아도 됩니다.\r\n\r\n이번엔 같은 코드를 class를 사용하여 작성해보겠습니다.\r\n\r\n```javascript\r\nclass AppUgly extends React.Component {\r\n  state = { item: 1 };\r\n\r\n  render() {\r\n    const { item } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello {item}</h1>\r\n        <h2>Start editing to see some magic happen!</h2>\r\n        <button onClick={this.increament}>increament</button>\r\n        <button onClick={this.decreament}>decreament</button>\r\n      </div>\r\n    );\r\n  }\r\n  increament = () => {\r\n    this.setState(state => {\r\n      return {\r\n        item: state.item + 1\r\n      };\r\n    });\r\n  };\r\n  decreament = () => {\r\n    this.setState(state => {\r\n      return {\r\n        item: state.item - 1\r\n      };\r\n    });\r\n  };\r\n}\r\n```\r\n\r\n위에서 말했지만, class Component의 경우에선 this와 setState, previous state를 고려해야 합니다.\r\n위 코드만 살펴봐도 hooks를 사용해야 하는 이유는 충분합니다. 100줄짜리 Component를 상상하면 아주 끔찍합니다.  \r\n\r\n> [React hooks관련 공식 사이트](https://reactjs.org/docs/hooks-reference.html)\r\n\r\n위 링크를 참고하면 다른 hooks들의 정보도 찾을 수 있습니다."},"id":"873d9f23-d222-5ba1-8b0f-06f7541cdc8b"}},{"node":{"frontmatter":{"title":"실전형 리액트 Hooks 10가지 - Introduction","category":"React"},"fields":{"slug":"2020-02-21-react-hooks1"},"internal":{"content":"\r\n> 노마드코더의 실전형 리액트 Hooks 10가지 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# Introduction\r\n\r\n## 0.0 Introduction to Nooks\r\n\r\n사용자들은 Hooks를 만들고 오픈소스로 배포할 수 있습니다.\r\n\r\n- useTitle\r\n- useInput\r\n- usePageLeave\r\n- useClick\r\n- useFadeIn\r\n- useFullscreen\r\n- useHover\r\n- useNetwork\r\n- useNotification\r\n- useScroll\r\n- useTaps\r\n- usePreventLeave\r\n- useComfirm\r\n- useAxios\r\n\r\n이 강의에선 hooks의 원리, 이론 그리고 hooks들을 만들어 NPM에 올리는 연습을 하겠습니다.\r\n\r\n---\r\n\r\n## 0.1 Requirements\r\n\r\n수업을 들어가기 전 여러분은Node가 설치되어 있어야 하고, React에 대한 기본 지식이 있어야 hooks에 대한 습득이 가능합니다.  \r\nstate, setState, props 등을 사용한 적이 있어야 hooks의 편리함을 공부할 수 있습니다.\r\n\r\n---\r\n\r\n## 0.2 Workflow\r\n\r\n이 강의의 실전은 이전 강의와 다르게 VSC에서 실행하지 않습니다.  \r\n"},"id":"7be42d7b-c0a5-5f8d-b0d1-99d8bf131b77"}},{"node":{"frontmatter":{"title":"Movie Web App - Local State","category":"GraphQL"},"fields":{"slug":"2020-02-19-graphql_apollo4"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 웹 앱 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 Local State\r\n\r\n## 2.0 Local State part One\r\n\r\nApollo의 큰 장점 하나는 cache를 갖는다고 했습니다. 그래서 이번에는 각각의 Movie에 cache를 활용하여 기능하는 좋아요 버튼을 만들겠습니다.  \r\n\r\napollo.js파일에 isLiked 라는 data를 만들고, isLiked는 true와 false를 값으로 갖는 boolean형태로 만들겠습니다. \r\n\r\napollo client는 많은 설정들을 갖는데 그 중 하나는 resolvers 입니다. resolvers는 기본적으로 백엔드 부분의 resolver와 비슷합니다. Resolver는 함수 형태로 작성해줍니다.  \r\n\r\n- resolver : 데이터를 가져오는 과정으로 함수로 작성. 프로그래머가 직접 구현 해야 하는 부분\r\n\r\n```javascript\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:4000/\",\r\n  resolvers: {\r\n    Movie: {\r\n      isLiked: () => false\r\n    }\r\n  }\r\n});\r\n\r\nexport default client;\r\n```\r\n\r\nresolvers의 type은 Movie로 만들었고, Movie라는 이름은 GraphQL API의 type의 이름에서 온 것입니다.  \r\n로컬호스트 페이지에서 Apollo 확장프로그램을 통해 type을 확인할 수 있습니다.\r\n\r\n> [구글 확장프로그램 - Apollo Client Developer Tools](https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm)\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-10.jpg\" alt=\"\">\r\n<figcaption>Apollo 확장프로그램을 통해 type을 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그리고 Home.js 파일에서 GET_MOVIES gql에 isLiked를 추가해줍니다.\r\n\r\n```javascript\r\nconst GET_MOVIES = gql`\r\n  {\r\n    movies {\r\n      id\r\n      medium_cover_image\r\n      isLiked @client\r\n    }\r\n  }\r\n`;\r\n```\r\nisLiked가 API에선 찾을 수 없는 부분입니다. 그래서 우리가 만든 부분이라 client에만 존재한다는 의미로 @client를 적어줍니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-11.jpg\" alt=\"\">\r\n<figcaption>Apollo 확장프로그램을 통해 isLiked 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\nisLiked라는 data는 프론트에서 만든 data입니다. 아주 쉽고 놀랍습니다!  \r\n그리고 Home.js 파일에 Movie Component를 return하는 부분에 isLiked에 대한 정보를 props로 추가해주겠습니다.  \r\n이제 우리는 API로 부터 오는 data와 front에서 만든 data를 결합시킬 수 있습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-12.jpg\" alt=\"\">\r\n<figcaption>back의 data와 front의 data를 결합하여 사용</figcaption>\r\n</figure>\r\n</center>\r\n\r\nMovie.js파일에 넘어오는 isLiked를 추가하여 button부분을 수정해주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-13.jpg\" alt=\"\">\r\n<figcaption>back의 data와 front의 data를 결합하여 사용</figcaption>\r\n</figure>\r\n</center>\r\n\r\nisLiked가 true이면 \"Unlike\", false이면 \"Like\"를 return 하게 하였습니다.  \r\n처음에 apollo.js의 resolvers에 default값을 false로 주었기에 지금은 전부 \"Like\"로 보여집니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-14.jpg\" alt=\"\">\r\n<figcaption>default값 false에 맞게 전부 \"Like\"가 Return 됨</figcaption>\r\n</figure>\r\n</center>\r\n\r\n---\r\n\r\n## 2.1 Local State part Two\r\n\r\n> [Apollo 공식 Documnets 사이트 링크](https://www.apollographql.com/docs/react/data/local-state/#managing-the-cache)\r\n\r\n위 링크의 Apollo Docs에서 로컬 상태 관리에 대한 정보도 얻을 수 있는데 그 중 캐시를 손쉽게 업데이트하는 writeData를 사용하겠습니다.  \r\n\r\n현재 경우의 apollo의 mutation은 백엔드의 mutation과 완벽히 작동이 같습니다. arguments를 가져오는 것도, 내용을 가져오는 것도 같습니다.  \r\napollo.js파일에 mutation을 만들겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-15.jpg\" alt=\"\">\r\n<figcaption>likeMovie 함수를 가진 mutation 코드 생성</figcaption>\r\n</figure>\r\n</center>\r\n\r\nboolean 함수인 Movie라고 부르는 type을 만들었고, 지금은 전 강의에서 이미 백엔드를 통해 활용했던 mutation을 만들었습니다. 그리고 likeMovie라고 부르는 새 함수를 만들었습니다. mutation은 완전히 graphQL server와 완전히 같습니다.  \r\n\r\n이제 Movie로 가서 likeMovie라는 이름을 가진 mutation query를 작성해봅시다. \r\n\r\n```javascript\r\n(...)\r\nimport { gql } from \"apollo-boost\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nconst LIKE_MOVIE = gql`\r\n  mutation likeMovie($id: Int!) {\r\n    likeMovie(id: $id) @client\r\n  }\r\n`;\r\n```\r\n\r\nMutation은 apollo.js에 client부분에서 삽입한 것이기 때문에 위 코드에서 likeMovie에 반드시 **@client**를 작성해주어야 합니다. 또한 우리가 하는 작업이 mutation을 굳이 백엔드로 보내지 않아도 됩니다.  \r\n\r\n이제 react hooks중 useMutation을 사용하면서 mutation을 활용하겠습니다. 중요한건 변수 likeMovie는 mutation의 likeMovie를 칭하는 것입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-16.jpg\" alt=\"\">\r\n<figcaption>useMutation으로 LIKE_MOVIE쿼리 연결</figcaption>\r\n</figure>\r\n</center>\r\n\r\n변수 생성 후, button의 onClick속성에 삼항연산자로 isLiked가 false일 때, likeMovie를 실행하도록 했습니다. 그리고 서버를 실행한 후 결과를 살펴봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-15.gif\" alt=\"\">\r\n<figcaption>console로 movie에 대한 id값 확인 가능</figcaption>\r\n</figure>\r\n</center>\r\n\r\nLike버튼을 클릭하면 각각의 movie에 대한 id가 console창에 찍히는 것을 확인할 수 있습니다. 이것은 백엔드 정보를 수정하지 않아도 손쉽게 data를 가져올 수 있다는 것입니다!  \r\n\r\n정보를 가져오는 것을 확인했으니, 가져온 id의 isLiked의 값을 수정해주겠습니다. 아까 말했던 writeData를 사용하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-17.jpg\" alt=\"\">\r\n<figcaption>writeData을 사용하여 가져온 id값의 data변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\ncache를 사용하는 likeMovie를 만들었고, writeData를 사용하여 likeMovie가 실행될 때 apollo client의 data인 isLiked 값 변경되게 만들었습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-16.gif\" alt=\"\">\r\n<figcaption>isLiked의 data가 변경되어 Like버튼 텍스트 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\ndata로 isLiked외에 다른 정보도 바꿀수도 있습니다. API로부터 오는 정보도 수정할 수 있으면서 local에서 만든 data도 수정할 수 있습니다.\r\n"},"id":"048ef966-ef2e-5743-8c15-1e99bed7cc07"}},{"node":{"frontmatter":{"title":"Movie Web App - Apollo GraphQL2","category":"GraphQL"},"fields":{"slug":"2020-02-19-graphql_apollo3"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 웹 앱 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 1 Apollo GraphQL\r\n\r\n## 1.3 Apollo Cache and Styles\r\n\r\nComponent와 style부분은 생략하였습니다.\r\nReact Apollo의 큰 장점중 하나는 cache를 갖고 있다는 것입니다. 한번 영화를 클릭하면 다음에 클릭할때는 loading이 뜨지 않습니다.  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-5.gif\" alt=\"\">\r\n<figcaption>cache로 인해 두번째 클릭에선 loading이 뜨지 않음</figcaption>\r\n</figure>\r\n</center>\r\n\r\n---\r\n\r\n## 1.4 Data & Apollo Dev Tools\r\n\r\n전 장에서 확인했었지만 서버를 시작하고 query를 불러오기 전 그러니까 loading중에는 data가 없었습니다.  \r\ndata.movie.title으로 작성하고 view 페이지를 확인해보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-5.jpg\" alt=\"\">\r\n<figcaption>loading중에는 data를 찾을수 없기에 undefined error가 발생</figcaption>\r\n</figure>\r\n</center>\r\n\r\nundefined error가 발생합니다.  \r\n그래서 우리는 data.movie.title의 형식으로 작성하지만 반드시 삼항연산자를 사용하여 작성해주어야 합니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-7.jpg\" alt=\"\">\r\n<figcaption>loading 일때 return할 코드 삼항연산자로 작성</figcaption>\r\n</figure>\r\n</center>\r\n\r\nloading 중이라면 Loading... 텍스트를 return,  \r\nloading이 끝나면 data도 확인할 수 있기 때문에 data.movie.title을 return해도 오류가 발생하지 않습니다.  \r\n\r\nSubtitle과 Description부분은 loading중 일땐 보이지 않고 loading이 끝난 후 노출시켜주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-8.jpg\" alt=\"\">\r\n<figcaption>loading이 끝나고 data.movie가 있다면 Subtitle과 Description 노출</figcaption>\r\n</figure>\r\n</center>\r\n\r\nloading이 끝나고, data.movie에 정보가 있다면 Subtitle과 Description을 return 시켰습니다.  \r\n\r\n---\r\n\r\n## 1.5 Suggestions & Optional Chaining\r\n\r\nSuggestions이라는 query를 추가하겠습니다. Suggestions은 GraphQL API 에서 작성해두었던 query입니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-6.jpg\" alt=\"\">\r\n<figcaption>GraphQL playground에서 확인 한 sugegestion query</figcaption>\r\n</figure>\r\n</center>\r\n\r\nDetail.js의 전에 작성했었던 GET_MOVIE gql에 suggestions을 추가로 작성하겠습니다. \r\n\r\n```javascript\r\nconst GET_MOVIE = gql`\r\n  query getMovie($id: Int!) {\r\n    movie(id: $id) {\r\n      title\r\n      medium_cover_image\r\n      language\r\n      rating\r\n      description_intro\r\n    }\r\n    suggestions(id: $id) {\r\n      id\r\n      medium_cover_image\r\n    }\r\n  }\r\n`;\r\n```\r\n\r\n2019.12.28일에 Js에 새로 추가된 기능인 Optional Chaining의 사용으로 삼항연산자로 반복하여 사용하던 data.movie를 `?`를 사용함으로써 생략가능합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-9.jpg\" alt=\"\">\r\n<figcaption>Optional Chaining의 사용으로 간결해진 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\nHome.js의 return 부분도 변경해주겠습니다.\r\n\r\n```javascript\r\n(...)\r\nexport default () => {\r\n  const { loading, data } = useQuery(GET_MOVIES);\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <Title>Apollo 2020</Title>\r\n        <Subtitle>I love GraphQL</Subtitle>\r\n      </Header>\r\n      {loading && <Loading>Loading...</Loading>}\r\n      <Movies>\r\n        {data?.movies?.map(m => (\r\n        \t<Movie key={m.id} id={m.id} bg={m.medium_cover_image} />\r\n        ))}\r\n      </Movies>\r\n    </Container>\r\n  );\r\n};\r\n```\r\n\r\n코드가 훨씬 간단해지고 보기 편해졌습니다.\r\n\r\n\r\n\r\n\r\n"},"id":"2f39e8fa-fdb5-5317-b450-42fc6a8681ad"}},{"node":{"frontmatter":{"title":"Movie Web App - Apollo GraphQL","category":"GraphQL"},"fields":{"slug":"2020-02-18-graphql_apollo2"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 웹 앱 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 1 Apollo GraphQL\r\n\r\n## 1.0 Apollo Client\r\n\r\n> [apollo 공식 사이트의 설치 방법](https://www.apollographql.com/docs/react/get-started/)\r\n\r\napollo-boost는 GraphQL Yoga처럼 모든 것을 다 설정이 되어있는 package입니다. GraphQL Yoga의 경우는 준비가 된 server이고, apollo-boost는 client 입니다.  \r\n위 링크를 참고하여 apollo.js를 생성하여 내부에 apollo-boost로 client를 생성하겠습니다.\r\n\r\n```javascript\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:4000/\"\r\n});\r\n\r\nexport default client;\r\n```\r\nGraphQl의 경우 URL을 갖지 않습니다. 그래서 apollo client에 하나의 URL만 넣어도 됩니다. 들어가는 URL은 GraphQL로 만들었던 로컬호스트를 연결해주었습니다. \r\n그리고 index.js에 가서 방금 만든 client를 연결시킵니다. \r\n\r\n```javascript\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport client from \"./apollo\";\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n```\r\nApolloProvider는 client가 필수입니다.  \r\n코드 작성 후 yarn start를 실행했을때 localhost의 개발자 도구에서 아무 문제 없다면 apollo가 잘 작동하고 있는 것입니다.\r\n\r\n## 1.1 GET_MOVIES Query\r\n\r\nJavascript는 GraphQL의 query를 이해하지 못합니다. 그래서 GraphQL을 import하여 query를 작성해주겠습니다.  \r\nHome.js에 아래 코드를 작성하겠습니다.\r\n\r\n```javascript\r\nimport React from \"react\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n\r\nconst GET_MOVIES = gql`\r\n  {\r\n    movies {\r\n      id\r\n      medium_cover_image\r\n    }\r\n  }\r\n`;\r\n\r\nexport default () => {\r\n  const { loading, error, data } = useQuery(GET_MOVIES);\r\n  console.log(loading, error, data);\r\n  return <h1>Home</h1>;\r\n};\r\n```\r\n\r\nGET_MOVIES라는 query를 작성하였고, useQuery로 query를 사용하였습니다. useQuery는 react hook입니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-1.jpg\" alt=\"\">\r\n<figcaption>Console창으로 확인 할 수 있는 GraphQl의 data</figcaption>\r\n</figure>\r\n</center>\r\n\r\nfetch나 POST같은 건 하지 않았지만 data를 얻을 수 있습니다.  \r\n우리는 GET_MOVIES를 만들어서 data를 불러왔고, 다음 강의에선 불러온 data를 링크를 걸어 View 페이지에 뿌리고, 링크를 통해 각각의 movie의 세부페이지로 연결하겠습니다.\r\n\r\n---\r\n\r\n## 1.2 GET_MOVIE Query\r\n\r\n우리는 가져온 data를 링크 형태로 페이지에 노출시키고, 각각의 영화 링크로 연결하겠습니다.  \r\n먼저 components폴더에 Movie.js를 생성한 후 Movie Component를 만들겠습니다. React에서 `<a href>`는 사용할 수 없습니다. 링크 연결을 위해 Link를 사용하여 작성하겠습니다.\r\n\r\n```javascript\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default ({ id }) => (\r\n  <div>\r\n    <Link to={`/${id}`}>{id}</Link>\r\n  </div>\r\n);\r\n```\r\n\r\n그리고 Home.js에 가져온 data를 map()메소드를 사용하여 각각 Movie Compoenent로 생성하겠습니다. \r\ndiv로 구성된 간단한 Component와 style부분은 생략하겠습니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-4.jpg\" alt=\"\">\r\n<figcaption>Home.js의 return코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\nloading 상태이면 <Loading>Loading...</Loading>을 return.  \r\nloading 상태이지 않고, data에 movies정보가 있으면 data.movies.map()을 실행합니다.  \r\n\r\n이전 장의 App.js에서 경로가 /:id 이라면 Detail Component를 보여주게 했었습니다.   \r\nDetail.js에서 링크를 클릭 했을 때 정보를 잘 가져오는지 확인해봅시다.\r\n\r\n```javascript\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default () => {\r\n  const { id } = useParams();\r\n  console.log(id);\r\n  return \"Detail\";\r\n};\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-2.jpg\" alt=\"\">\r\n<figcaption>Console창으로 확인되는 id정보</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이동된 링크에서 현재의 id값을 확인 할 수 있습니다.  \r\ndata가 연동된 것을 확인했으니 GET_MOVIE라는 이름의 query를 작성하겠습니다. 이번에 필요한 query는 argument가 필요한 query입니다. 그럴 땐 작성할 때 query의 이름을 적어야 합니다.\r\n\r\n```javascript\r\n(...)\r\nimport { gql } from \"apollo-boost\";\r\n\r\nconst GET_MOVIE = gql`\r\n  query getMovie($id: Int!) {\r\n    movie(id: $id) {\r\n      id\r\n      title\r\n      medium_cover_image\r\n      description_intro\r\n    }\r\n  }\r\n`;\r\n```\r\nquery getMovie라는 이름을 정해주었고, argument에 대한 정보도 적어주었습니다. id라는 변수가 들어간다는 의미로 $id라고 작성하였습니다.  \r\n\r\nuseQuery라는 hook을 사용하여 GET_MOVIE를 연결하겠습니다.\r\n\r\n```javascript\r\n(...)\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n(...)\r\nexport default () => {\r\n  let { id } = useParams();\r\n  id = parseInt(id);\r\n  const { loading, data } = useQuery(GET_MOVIE, {\r\n    variables: { id }\r\n  });\r\n\r\n  if (loading) {\r\n    return \"loading\";\r\n  }\r\n  if (data && data.movie) {\r\n    return data.movie.title;\r\n  }\r\n};\r\n```\r\n\r\nGET_MOVIE query를 사용할 때 $id값을 필수로 정해주었습니다. 그래서 useQuery를 사용할 때도 variables를 지정해주어야 합니다.  \r\nHome.js에서 사용했던 그대로 loading 중이면 \"loading\", data가 있고, data.movie의 정보도 있다면 data.movie.title을 return 하게 하였습니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_apollo_1-3.jpg\" alt=\"\">\r\n<figcaption>클릭한 id의 title을 노출</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"620bc82b-fe18-5100-8514-bc1dc6cec0a5"}},{"node":{"frontmatter":{"title":"Movie Web App - Introduction","category":"GraphQL"},"fields":{"slug":"2020-02-17-graphql_apollo1"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 웹 앱 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 0 Introduction\r\n\r\n## 0.1 Introduction\r\n\r\n이 강의는 React Apollo Movie입니다. GraphQL API를 위한 React Client를 만들겠습니다.  \r\n강의를 듣기 위해선 React, React Hooks, GraphQL API를 알아야 합니다.  \r\n\r\nApollo : GraphQL 기반의 플랫폼  \r\n\r\n글로벌 저장소(global store)와 캐시 등을 제공하는 Apollo는 **Apollo Client**와 **Apollo Server**로 나뉘어 있습니다.  \r\nApollo Client는 React뿐만 아니라 Angular, Vue.js, iOS, Android 등 다양한 환경에서 사용할 수 있습니다. Apollo Server는 Node.js 기반의 HTTP 서버로 작동합니다. Apollo Client와 Apollo Server를 사용하면 GraphQL 기반의 데이터를 용이하게 관리할 수 있습니다.  \r\n\r\nredux에서는 가져올때마다 해당 서버의 url이 필요지만 서버가 graphql로 만들어졌다면 한번의 url작성으로 graphql에 쉽게 query를 작성할 수 있다.\r\n\r\n---\r\n\r\n## 0.2 Set Up\r\n\r\ncreate-react-app으로 프로젝트를 생성, git repository생성 후 연동\r\n\r\n```\r\n$ create-react-app apollo-movie\r\n```\r\n\r\ncreate-react-app으로 생성된 폴더의 src폴더 내부는 App.js와 index.js만 남기고 모두 삭제  \r\ncomponents폴더 생성 후 App.js파일을 이동시킵니다.  \r\n\r\nstyled-components, react-router-dom, apollo-boost, @apollo/react-hooks, graphql 설치\r\n\r\n```\r\n$ yarn add styled-components react-router-dom apollo-boost @apollo/react-hooks graphql\r\n```\r\n\r\n---\r\n\r\n## 0.3 Router and Styles\r\n\r\nroutes폴더 생성 후 Home.js와 Detail.js 생성  \r\nApp.js에 router를 만들어봅시다.\r\n\r\n```javascript\r\nimport React from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport Home from \"../routes/Home\";\r\nimport Detail from \"../routes/Detail\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route exact path=\"/:id\" component={Detail} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n경로에 따라 보여주는 Component를 다르게 해주었습니다. / 경로에선 Home Compoenent, /:id 이면 Detail Component가 노출되게 해주었습니다.  \r\nyarn start 실행 후 http://localhost:3000/를 확인해보고 정상 작동한다면 router가 잘 생성된 것입니다.\r\n\r\n> [참고](https://d2.naver.com/helloworld/2838729)\r\n"},"id":"34c64359-2f8e-5444-a3ae-628099500951"}},{"node":{"frontmatter":{"title":"Movie API - Wrapping a REST API with GraphQL","category":"GraphQL"},"fields":{"slug":"2020-02-12-graphql5"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# Creating Movie API by using GraphQL\r\n\r\n## 11 Wrapping a REST API with GraphQL Part One\r\n\r\n[https://yts.mx/api](https://yts.mx/api)의 사이트의 [https://yts.mx/api/v2/list_movies.json ](https://yts.mx/api/v2/list_movies.json) API를 통해서 영화리스트를 불러오겠습니다. \r\n\r\n[https://yts.mx/api](https://yts.mx/api)를 확인하면 Endpoint로 여러가지의 데이터를 제한할 수 있습니다. Endpoint로 위의 json파일에서 movie를 부분적으로 제어하여 return하게 하겠습니다.  \r\n\r\n먼저 yarn add node-fetch -D 로 node-fetch를 설치해주고 import 해오겠습니다.  \r\n그 전의 db.js의 코드들은 모두 지우고 새로 시작하겠습니다.  \r\n\r\n> [node-fetch의 NPM 링크](https://www.npmjs.com/package/node-fetch)\r\n\r\n```javascript\r\nimport fetch from \"node-fetch\";\r\nconst API_URL = \"https://yts.mx/api/v2/list_movies.json?\";\r\n\r\nexport const getMovies = (limit, rating) => {\r\n  let REQUEST_URL = API_URL;\r\n\r\n  return fetch(REQUEST_URL)\r\n    .then(res => res.json())\r\n    .then(json => json.data.movies);\r\n};\r\n```\r\nfetch를 사용하여 json파일을 가져왔고, [node-fetch의 NPM 링크](https://www.npmjs.com/package/node-fetch)를 참고하여 then() 메소드를 사용하였습니다.  \r\nschema.graphql도 yts API에 맞게 type을 재설정해주겠습니다. \r\n\r\n```javascript\r\ntype Movie{\r\n  id: Int!\r\n  title: String!\r\n  rating: Float!\r\n  summary: String!\r\n  launguage: String!\r\n  medium_cover_image: String!\r\n}\r\n\r\ntype Query{\r\n  movies: [Movie]!\r\n}\r\n```\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-13.jpg\" alt=\"\">\r\n<figcaption>Playground에서 data를 불러오는 것 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\nPlayground에서 fetch를 통해서 data를 불러오는 것을 확인할 수 있다. data가 오는 것을 확인했으니 제어를 해봅시다. 우리가 사용할 argument는 limit와 rating 입니다. limit로는 가져오는 영화의 개수를 제어하고, rating으로는 정해준 rating값의 이상인 movie만 가져오게 하겠습니다.\r\n\r\n```javascript\r\n(...)\r\nexport const getMovies = (limit, rating) => {\r\n  let REQUEST_URL = API_URL;\r\n  if (limit > 0) {\r\n    REQUEST_URL += `limit=${limit}&`;\r\n  }\r\n  if (rating > 0) {\r\n    REQUEST_URL += `minimum_rating=${rating}&`;\r\n  }\r\n  return fetch(REQUEST_URL)\r\n    .then(res => res.json())\r\n    .then(json => json.data.movies);\r\n};\r\n```\r\n\r\n들어오는 매개변수의 값을 찾아 0이상이면 URL의 Endpoint를 제어하게 했습니다.  \r\nschema부분도 조금 수정하겠습니다.\r\n\r\n```javascript\r\n(...)\r\ntype Query{\r\n  movies(limit: Int, rating: Float): [Movie]!\r\n}\r\n```\r\nmovies의 args가 필수 사항은 아니기 때문에 !는 제외했습니다.  \r\n마지막으로 resolver도 수정해줍니다.\r\n\r\n```javascript\r\nimport { getMovies } from \"./db\";\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    movies: (_, { limit, rating }) => getMovies(limit, rating)\r\n  }\r\n};\r\n\r\nexport default resolvers;\r\n```\r\n\r\n위의 코드들로 Playground에선 limit, rating를 제어한 결과를 확인할 수 있습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-13.gif\" alt=\"\">\r\n<figcaption>Playground에서 data를 제어</figcaption>\r\n</figure>\r\n</center>\r\n\r\n"},"id":"839de800-5366-53e8-9f88-2dd1db090f5c"}},{"node":{"frontmatter":{"title":"Movie API - Mutations","category":"GraphQL"},"fields":{"slug":"2020-02-11-graphql4"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# Creating Movie API by using GraphQL\r\n\r\n## 8 Defining Mutations\r\n\r\n자 이번엔 본격적으로 Movie App을 만들겠습니다. 처음으로 만들 것은 영화를 추가하는 함수 addMovie()입니다.  \r\n\r\n```javascript\r\nexport const addMovie = (name, score) => {\r\n  const newMovie = {\r\n    id: `${movies.length + 1}`,\r\n    name,\r\n    score\r\n  };\r\n  movies.push(newMovie);\r\n  return newMovie;\r\n};\r\n```\r\naddMovie()함수를 분석해보겠습니다. arguments로 name과 score가 들어오고 두 argument를 기반으로 newMovie라는 변수를 생성합니다.  \r\n그리고 movies에 추가합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-9.jpg\" alt=\"\">\r\n<figcaption>movies의 name과 score를 return하는 Playground</figcaption>\r\n</figure>\r\n</center>\r\n\r\n현재는 바뀐게 없고, 우리가 정의한 movies만 확인 가능합니다. 이제 Mutation을 설정하면 addMovie()가 실행될 것입니다. Mutation은 Database의 상태가 변할 때 사용됩니다.\r\n\r\nschema.graphql에 Mutation에 대한 정보를 입력하겠습니다. Mutation은 schema.graphql안에 정의한다면 여러분이 원하는 만큼 사용할 수 있습니다.\r\n\r\n```javascript\r\n(...)\r\ntype Mutation{\r\n  addMovie(name: String!, score: Int!): Movie!\r\n}\r\n```\r\naddMovie라는 함수를 넣어주었습니다. 총 3가지의 속성중에 id값은 자동으로 설정되기 때문에 제외하고 name과 score를 넣어주었고, 그것은 필수로 Movie의 타입으로 생성되게 하겠습니다.  \r\n\r\nschema.graphq에 Mutation을 설정했으니, resolvers.js에도 Mutation을 추가해야 합니다.\r\n\r\n## 9 Creating first Mutation\r\n\r\nresolvers.js에 resolver.Mutation을 작성해주겠습니다.\r\n\r\n```javascript\r\nimport { getMovies, getById, addMovie } from \"./db\";\r\n  (...)\r\n  Mutation: {\r\n    addMovie: (_, { name, score }) => addMovie(name, score)\r\n  }\r\n  (...)\r\n```\r\n그리고 코드를 실행하고 Playground를 확인해보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-10.jpg\" alt=\"\">\r\n<figcaption>Playground에서 확인할 수 있는 DOCS</figcaption>\r\n</figure>\r\n</center>\r\n\r\naddMovie를 실행하기 전에 **DOCS**를 살펴보면 우리가 만든 Query와 Mutation에 관한 정보를 알 수 있습니다. 여러분은 DOCS를 참고하여 addMovie를 작성해주면 됩니다! \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-11.jpg\" alt=\"\">\r\n<figcaption>Playground에서 확인할 수 있는 DOCS</figcaption>\r\n</figure>\r\n</center>\r\n\r\nmutation을 통해 addMovie로 test를 생성했습니다. 이제 movies를 확인해봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-11.gif\" alt=\"\">\r\n<figcaption>addMovie를 실행 후 객체가 추가된 movies</figcaption>\r\n</figure>\r\n</center>\r\n\r\n새로 고침을 하니 test가 생성된게 확인됩니다.  \r\n위 상황에서 확인했듯이, gql의 Playground는 여러분의 API를 확인하는 쉽고 빠른 방법입니다! \r\n\r\n## 10 Delete Mutation\r\n\r\n이번엔 movie를 지우는 deleteMovie()함수를 생성하고 실행해보겠습니다.\r\n\r\n```javascript\r\nexport const deleteMovie = id => {\r\n  const cleanedMovies = movies.filter(movie => movie.id !== id);\r\n  if (movies.length > cleanedMovies.length) {\r\n    movies = cleanedMovies;\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n```\r\ndeleteMovie를 분석해보겠습니다. 위 함수는 id를 argument로 받는 callback함수를 실행합니다.  \r\ncallback함수 내부에는 cleanedMovies라는 변수가 있고, 그 변수는 movies에게 filter()메소드를 실행합니다. cleanedMovies는 movies의 id가 argument로 들어온 id와 같지 않은 배열로만 이뤄지게 했습니다. (cleanedMovies에는 argument와 같은 id값을 가진 movie는 없음)  \r\n\r\n그리고 movies.length와 cleanedMovies.length를 비교하여 movies.length가 더 많다면, movies에 cleanedMovies들어가게 했고, 그렇지 않다면 아무 일도 일어나지 않게 했습니다.  \r\n\r\nresolvers.js에도 추가하겠습니다.\r\n\r\n```javascript\r\nimport { getMovies, getById, addMovie, deleteMovie } from \"./db\";\r\n(...)\r\n  Mutation: {\r\n    addMovie: (_, { name, score }) => addMovie(name, score),\r\n    deleteMovie: (_, { id }) => deleteMovie(id)\r\n(...)\r\n```\r\nresolver에 추가했으니 schema에도 추가해야합니다.\r\n```javascript\r\n(...)\r\ntype Mutation{\r\n  addMovie(name: String!, score: Int!) : Movie!\r\n  deleteMovie(id: Int!) : Boolean!\r\n}\r\n```\r\n\r\ndeleteMovie()는 true와 false만 return하니 Boolean을 type으로 적어줍니다.  \r\n자, 여러분이 addMovie()를 실행했을때, 새 movie가 생성되었는지 확인이 필요합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-12.jpg\" alt=\"\">\r\n<figcaption>Playground에서 deleteMovie실행</figcaption>\r\n</figure>\r\n</center>\r\n\r\n오른쪽 화면에서 deleteMovie는 true를 반환했습니다. 그럼 database도 변화가 있는지 확인해봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-12.gif\" alt=\"\">\r\n<figcaption>Playground에서 deleteMovie실행 후의 movies</figcaption>\r\n</figure>\r\n</center>\r\n\r\n지금까지 우리는 영화 정보를 받을 때 Query를 썼고, Database의 상태를 바꾸기 위해서 Mutation을 사용했습니다.  \r\n물론 addMovie와 deleteMovie로 변화를 준 movies는 서버를 재시작할 경우에는 사라집니다. 왜냐면 movies는 정적인 상태로 생성한 것이기 때문입니다.  \r\n\r\n이제 다음장에선 GraphQL 서버를 가져가서 다른 API와 연결해봅시다. \r\n\r\n\r\n\r\n"},"id":"06e2abe4-6ec9-55d6-a89f-545d9512c123"}},{"node":{"frontmatter":{"title":"Movie API - Arguments","category":"GraphQL"},"fields":{"slug":"2020-02-10-graphql3"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# Creating Movie API by using GraphQL\r\n\r\n## 7 Creating Queries with Arguments\r\n\r\n`Resolvers`는 `GraphQL 서버에서 요청을 받는 위치`입니다.  \r\n**GraphQL서버가 Query나 Mutation을 발견하면 Resolvers를 찾고, 해당 함수 실행하게 합니다**. Resolvers가 하는일을 확인해봅시다. resolvers.js에 person을 추가하겠습니다.\r\n\r\n```javascript\r\nimport { people } from \"./db\";\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    people: () => people,\r\n    person: (_, args) => console.log(args)\r\n  }\r\n};\r\n\r\nexport default resolvers;\r\n```\r\n\r\n위의 resolvers코드의 Query.person에 들어가는 argument들이 있는데 첫번째 인자는 Object입니다. 지금은 중요하지 않으니 넘어가고, 두번째 인자를 살펴보기 위해 console 코드를 삽입하고 Playground에 가서 확인해보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-7.jpg\" alt=\"\">\r\n<figcaption>id값을 필수로 요청하는 person</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지에서 알 수 있는 사실은 요청한 Query가 두번째인자 args로 넘어간다는 것입니다.  \r\n그러면 db.js에 getById라는 함수를 만들어보겠습니다. getById는 people을 filter메소드를 사용하여 id값이 같은 person만 return하게 합니다.\r\n\r\n```javascript\r\nexport const getById = id => {\r\n  const filteredPeople = people.filter(person => person.id === id);\r\n  return filteredPeople[0];\r\n};\r\n```\r\ngetById()를 쉽게 설명하면 **매개변수로 들어온 id값과 같은 person을 return**하는 함수 입니다.  \r\nexport하였으니, resolevers.js에서 import하여 사용하겠습니다.\r\n\r\n```javascript\r\nimport { people, getById } from \"./db\";\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    people: () => people,\r\n    person: (_, { id }) => getById(id)\r\n  }\r\n};\r\n\r\nexport default resolvers;\r\n```\r\n\r\n{ id }는 args.id라고 작성하는 것과 같습니다. 이제 Playground에서 <u>person에 대한 id값을 입력하면 그에 맞는 정보만 return 할 것</u>입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-8.jpg\" alt=\"\">\r\n<figcaption>person.name의 data를 보여주는 Playground</figcaption>\r\n</figure>\r\n</center>\r\n\r\n여러분들은 **Database가 갖고 있는 data가 어떻게 보여질지 정의하고 Query를 resolve하는 함수**를 만들면 됩니다.  \r\n\r\n이제 지금까지 배운것을 토대로 people은 Movies가 될거고, person은 각각의 movie가 될 겁니다. ID로 가져오기, 감독으로 가져오기 등으로 활용해봅시다.  \r\n\r\n**resolver는 view를 정해주고, schema는 url처럼 어디로 갈 지 정해준다고 생각**하면 됩니다.\r\n\r\n### movie app's foundation\r\n\r\n기존의 변수 people을 movies로 변경하고 age를 score로 변경, gender는 삭제하겠습니다.\r\n\r\n```javascript\r\nlet movies = [\r\n  {\r\n    id: 0,\r\n    name: \"Movie_name_00\",\r\n    score: 15\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Movie_name_01\",\r\n    score: 25\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Movie_name_02\",\r\n    score: 35\r\n  },\r\n  (...)\r\n];\r\n\r\nexport const getMovies = () => movies;\r\n\r\nexport const getById = id => {\r\n\tconst filteredMovies = movies.filter(movie => movie.id === id);\r\n\treturn filteredMovies[0];\r\n};\r\n```\r\n기존에는 변수 자체를 export했었지만 getMovies() 함수를 생성하여 movies를 export하도록 수정하였습니다. 기존의 getById()함수는 people을 movies로 person을 movie로 변경하였습니다. \r\n\r\nreservers.js도 변경된 변수에 맞게 변경합니다.\r\n\r\n```javascript\r\nimport { getMovies, getById } from \"./db\";\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    movies: () => getMovies(),\r\n    movie: (_, { id }) => getById(id)\r\n  }\r\n};\r\n(...)\r\n```\r\n\r\n기존에 import 해오던 people 대신 getMovies로 변경하고, Query.movies도 변수 people에서 getMovies() 함수로 변경했습니다.\r\n\r\n당연히 schema.graphql도 변경해줍니다. \r\n\r\n```javascript\r\ntype Movie{\r\n  id: Int!\r\n  name : String!\r\n  score : Int!\r\n}\r\n\r\ntype Query{\r\n  movies: [Movie]!\r\n  movie(id: Int!): Movie\r\n}\r\n```\r\n헷길리지만 movie는 배열의 movie이고, Movie는 type의 Movie입니다.\r\n"},"id":"d8c78c6a-b9aa-55f4-8393-468f2ac5cfd7"}},{"node":{"frontmatter":{"title":"Movie API - Extending the Schema","category":"GraphQL"},"fields":{"slug":"2020-02-10-graphql2"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# Creating Movie API by using GraphQL\r\n\r\n## 5 Extending the Schema\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-2.jpg\" alt=\"\">\r\n<figcaption>GraphQL Playground에서 Query확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지의 왼쪽 화면에서 Query를 요청했고, gql은 내 서버에서 schema.graphql을 발견하고, resolvers를 찾아서 hj를 반환합니다.  \r\n\r\n그러면 resolvers.js에서 name을 myName으로 변경해봅시다.\r\n\r\n```javascript\r\nconst resolvers = {\r\n  Query: {\r\n    myName: () => \"hj\"\r\n  }\r\n};\r\n(...)\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-3.jpg\" alt=\"\">\r\n<figcaption>resolvers.js에서 name을 myName으로 변경한 후의 error</figcaption>\r\n</figure>\r\n</center>\r\n\r\nQuery.myName이 schema에는 없고, resolvers에만 정의되어 있다고 말합니다. 이런 상태에서 gql은 schema.graphql의 Query에 접근할 수 없습니다.\r\n\r\n이번엔 schema.graphql의 String!을 Int!로 변경해보겠습니다.\r\n\r\n```\r\ntype Query{\r\n  name: Int!\r\n}\r\n```\r\nInt, 그러니까 우리는 Query를 Database에서 숫자로 return하도록 하였습니다. 하지만 우리가 반환하는 것은 'hj' String이죠? 그래서 gql은 error라고 말합니다. Int를 return해야하는데 왜 String을 주는건가? 하고 말합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-4.jpg\" alt=\"\">\r\n<figcaption>resolvers.js에서 name을 myName으로 변경한 후의 Playground</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그럼 Playground의 기능은 무엇일까요? Playground는 graphql-yoga에 의해 따라 오는건데 여러분의 Database를 테스트하게 해주는 것 뿐입니다. Postman같은 기능을 하는겁니다.\r\n\r\n이번엔 좀 더 나은 resolvers를 만들어보겠습니다. resolvers.js에 hj라는 변수를 만들어주겠습니다.\r\n\r\n```javascript\r\nconst hj = {\r\n  name: \"hjban\",\r\n  age: 25,\r\n  gender: \"female\"\r\n};\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    person: () => hj\r\n  }\r\n};\r\n(...)\r\n```\r\n\r\n변수 hj안에는 name, age, gender라는 정보를 넣었고, Query의 name부분은 person으로 변경하였습니다. 그리고 person은 hj를 return 합니다.  \r\n\r\n바뀐 resolvers에 맞게 Query도 변경하겠습니다.\r\n\r\n```javascript\r\ntype hj{\r\n  name : String!\r\n  age : Int!\r\n  gender : String!\r\n}\r\n\r\ntype Query{\r\n  person: hj!\r\n}\r\n```\r\n\r\nresolvers에서 hj를 return한다고 했죠? 그러니 Query도 hj를 return한다고 설명했습니다. hj의 정보 각각은 name은 String!, age는 Int!, gender는 String! 이라고 설명해줬습니다.  \r\n그리고 서버를 재시작 한 후 Playground를 살펴봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-5.jpg\" alt=\"\">\r\n<figcaption>resolvers와 schema 변경 후 Playground</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지의 오른쪽 부분처럼 우린 schema를 통해 이름, 나이, 성별에 대한 정보를 얻을 수 있습니다. 여러분의 database의 정보를 설명해주고, 또 왼쪽 화면의 Query입력으로 data자체를 얻어올 수도 있습니다. age뿐만 아니라 name, gender에 대한 정보도 여러분들의 선택에 의해 얻을 수 있습니다.  \r\n\r\n---\r\n\r\n## 6 Extending the Schema part Two\r\n\r\n이제부터 본격적으로 GraphQL을 활용해보겠습니다.  \r\n\r\nschema.graphql에서 Query는 people에서 hj타입을 return하는지 요청했었습니다. 이번에는 people은 person이라는 배열의 정보를 가져오도록 요청하겠습니다. 그리고 person에 각각의 ID로 접근할 수 있게 정의하겠습니다. \r\n```javascript\r\ntype Person{\r\n  id: Int!\r\n  name : String!\r\n  age : Int!\r\n  gender : String!\r\n}\r\n\r\ntype Query{\r\n  people: [Person]!\r\n  pesrson(id: Int!): Person\r\n}\r\n```\r\n위 Query는 people은 배열person들을 리턴하고, 그 person은 ID가 필수사항이라고 합니다.  \r\n\r\ngraphql폴더에 db.js라는 파일을 만들고, 기존의 resolvers.js에 있던 변수 hj를 잘라서 붙여넣겠습니다. 그리고 hj였던 변수 이름을 people로 변경하고, 배열 형태로 만들어 여러개의 객체를 삽입해주겠습니다.\r\n\r\n```javascript\r\nexport const people = [\r\n  {\r\n    id: 0,\r\n    name: \"hjban0\",\r\n    age: 15,\r\n    gender: \"female\"\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"hjban1\",\r\n    age: 25,\r\n    gender: \"female\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"hjban2\",\r\n    age: 35,\r\n    gender: \"female\"\r\n  },\r\n  (...)\r\n];\r\n```\r\n변수 people의 각각의 객체는 id, name, age, gender 값을 갖고 있고 export 시켰습니다.  \r\n다시 resolvers.js로 가서 Query의 people은 import해온 people을 return하게 하겠습니다.\r\n\r\n```javascript\r\nimport { people } from \"./db\";\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    people: () => people\r\n  }\r\n};\r\n\r\nexport default resolvers;\r\n```\r\n변수 resolevers는 Query를 포함하고 있고 그 Query는 people이라는 값을 가지고 있습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-6.jpg\" alt=\"\">\r\n<figcaption>people의 id를 return하는 Playground</figcaption>\r\n</figure>\r\n</center>\r\n\r\nQuery를 통해 data를 불러오는 Playground\r\n"},"id":"532ab7fa-690a-5989-b9db-8d3a53a9c727"}},{"node":{"frontmatter":{"title":"Movie API - Introduction for Graph QL class","category":"GraphQL"},"fields":{"slug":"2020-02-07-graphql1"},"internal":{"content":"\r\n> 노마드코더의 GraphQL로 영화 API 만들기를 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# Creating Movie API by using GraphQL\r\n\r\n## 1 Hello and Introduction\r\n\r\nGraphQL은 서버 API를 통해 정보를 주고받기 위해 사용하는 질의 언어(query language)이다.  \r\n\r\n대부분의 어플리케이션은 자원을 사용하는 방식으로 HTTP method를 사용하여 REST API를 사용한다. REST API는 직관적이고 단순하다는 장점이 있지만 데이터가 복잡해 질수록 여러번의 http 요청이 생기게 되고, 이것은 REST API를 설계하는데 있어 굉장히 까다로운 일이다. \r\n\r\nGraphQL은 REST API의 효율적인 대안이 될 수 있는 새로운 API 기준이다. GraphQL은 /GraphQL이라는 하나의 엔드포인트를 가지며 Over fetching과 Under fetching이 없이 클라이언트가 서버와 좀 더 유연하게 소통할 수 있다는 점이다.  \r\n(GraphQL 설치 관련 설명 후 다음장에서 부가 설명)\r\n\r\n시작하기전 movieql이라는 이름의 git repository를 생성하고, yarn init으로 아래와 같은 package.json을 만듭니다. \r\n\r\n```javascript\r\n{\r\n  \"name\": \"movieql\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Movie API with Graphql\",\r\n  \"main\": \"index.js\",\r\n  \"repository\": \"https://github.com/hjban-dev/movieql\",\r\n  \"author\": \"hjban\",\r\n  \"license\": \"MIT\",\r\n}\r\n```\r\n\r\n필자의 경우 repository 생성 단계에서 Initialize this repository with a README에 check를 해주었기 때문에 git pull을 하고 시작.\r\n\r\n```\r\ngit init\r\ngit remote add origin https://github.com/hjban-dev/movieql\r\ngit pull origin master\r\n```\r\n\r\ngraphql-yoga를 설치하여 시작하겠습니다. graphql-yoga는 create-react-app과 비슷하게 GraphQL 프로젝트를 빠르게 시작할 수 있다.\r\n<u>yarn add graphql-yoga</u>로 설치.  \r\n\r\n> [graphql-yoga의 설치, 사용법 등을 확인할 수 있는 git repository](https://github.com/prisma-labs/graphql-yoga)\r\n\r\n---\r\n\r\n## 2 Problems solved by GraphQL\r\n\r\n아래의 Over-fetching과 Under-fetching은 Rest API에서 겪는 문제임\r\n\r\n- Over-fetching: 요청한 정보보다 많은 정보를 서버에서 받는 것  \r\n  (개발자는 유저의 이름 정보만 필요하지만, 유저의 모든 정보를 가져와서 활용하는 것)\r\n- Under-fetching: 필요한 정보가 여러개이면, 여러번의 요청이 필요하다는 것  \r\n  (한 페이지를 구성할때 사용자 정보, 피드 내용, 알림이 필요하다면 서버에게 3번의 요청을 해야되는 것)\r\n\r\nGraphQL을 사용하면 한 query에 정확하게 원하는 정보만 받을 수 있다.  \r\n(Query: Database에 GraphQL언어로 요청하면, 내가 원하는 정보를 알려줌)  \r\n위에서 설명했듯이 GraphQL에서는 URL은 없음. URL체계도 없고 /graphql 단 하나의 엔드포인트만 있습니다.  \r\n\r\n```javascript\r\nquery {\r\n  feed {\r\n    comments\r\n    likeNumber\r\n  }\r\n  notifications{\r\n    isRead\r\n  }\r\n  user{\r\n    username\r\n    profilePic\r\n  }\r\n}\r\n```\r\n\r\n위에 보이는 js의 객체 형식과 비슷한 코드가 GraphQL언어의 query입니다. 위 코드를 GraphQL의 Backend에 보내면 우리가 요청한 정보를 js의 Object를 반환할 것 입니다.\r\n\r\n---\r\n\r\n## 3 Creating a GraphQL Server with GraphQL Yoga\r\n\r\nnodemon은 여러분이 파일을 수정할 때 마다 자동으로 서버를 재시작. <u>yarn global add nodemon</u>로 설치.\r\n\r\n제일 최상단 디렉토리에 index.js를 생성하고 의미 없는 console.log를 작성하고 ex) console.log(hello)  \r\npackage.json에 `start`명령어를 추가하겠습니다.\r\n\r\n```javascript\r\n// package.json\r\n(...)\r\n  \"scripts\": {\r\n    \"start\": \"nodemon\"\r\n  }\r\n}\r\n```\r\n이제 터미널에 <u>yarn start</u>를 입력하면 nodemon이 실행된다. 실행 확인은 터미널창에 좀 전에 index.js에 적었던 console이 실행되었는지 보고 확인할 수 있다.  \r\n\r\nconsole의 텍스트를 변경하면 nodemon이 자동으로 재실행. 아래 터미널 코드가 실시간으로 변경되는 것을 확인할 수 있다.\r\n\r\n```\r\n[nodemon] starting `node index.js`\r\nhello <!-- index.js의 console 실행 -->\r\n[nodemon] clean exit - waiting for changes before restart\r\n[nodemon] restarting due to changes...\r\n[nodemon] starting `node index.js`\r\nhi <!-- index.js의 console 재실행 -->\r\n[nodemon] clean exit - waiting for changes before restart\r\n```\r\n\r\n이제 [graphql-yoga의 git repository](https://github.com/prisma-labs/graphql-yoga)의 사용법을 참고하여 index.js를 작성. 그 전에 js 최신 문법을 사용하기 위해 babel을 설치.  \r\n(babel 관련은 노마드 강의는 2018년 제작이라 필자가 따로 찾아서 정리)\r\n\r\n<u>yarn add @babel/core @babel/cli @babel/node @babel/preset-env --save-dev</u>로 설치 후 .babelrc 파일 생성하여 presets 추가\r\n\r\n```\r\n{\r\n  \"presets\": [\"@babel/preset-env\"]\r\n}\r\n```\r\n\r\n그리고 package.json에서 script 부분 수정\r\n\r\n```javascript\r\n// package.json\r\n(...)\r\n  \"scripts\": {\r\n    \"start\": \"nodemon --exec babel-node index.js\"\r\n  }\r\n}\r\n```\r\n\r\nyarn start를 입력했을 때 import 부분에서 error가 뜨지 않으면, babel이 제대로 작동하는 것!  \r\n\r\nbabel을 설치했으니, 최신 문법으로 서버를 만들자.  \r\n폴더의 최상단에 index.js를 생성하고, [graphql-yoga의 git repository](https://github.com/prisma-labs/graphql-yoga)의 사용법을 참고하여 새로운 GraphQLServer를 만드는 `sever`라는 변수를 만든다.\r\n\r\n```javascript\r\nconst server = new GraphQLServer({});\r\nserver.start(() => console.log(\"gql server start\"));\r\n```\r\n\r\n첫번째 줄을 server를 만들었고, 두번째 줄은 start()의 매개변수로 console을 확인하게 했다. \r\n\r\n----\r\n\r\n## 4.Creating the first Query and Resolver\r\n\r\n- `schema` : 여러분이 받거나 주게 될 data에 대한 설명  \r\n\r\n일단 지금 터미널의 error는 <u>No schema defined</u> 이다. schema가 정의되지 않았다고 한다.  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-1.jpg\" alt=\"\">\r\n<figcaption>터미널 yarn start 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### scheme 생성\r\n\r\ngraphql이라는 이름의 폴더를 만들고, **schema.graphql**이라는 파일을 생성한다. schema.graphql 파일에는 사용자가 무엇을 할지에 대해 정의를 적어주는데,  \r\n하나는 Database로 부터 정보를 얻는 것이고, 다른 하나는 정보를 Database로 보내는 것이다.  \r\n\r\nDatabase로 부터 정보를 얻는 것을 우리는 query라고 부른다. <u>다시 말해, query는 여러분이 정보를 받을 때만 쓰임</u>  \r\n(지금은 쓰지 않지만 gql의 mutation은 서버나 database, 메모리에서 정보를 바꾸는 작업을 할 때 사용)\r\n\r\nschema.graphql안에 모든 query를 넣음. (= 사용자에게 정보를 주는 모든 것들)\r\n\r\n```javascript\r\ntype Query{\r\n\tname: String!\r\n}\r\n```\r\n\r\nname으로 String을 !를 사용하여 필수(isRequired)로 주는 query를 만들었다.  \r\n그리고 index.js에 typeDefs를 적었다. typeDefs는 모든 type들에 대한 정의.\r\n\r\n```javascript\r\nimport { GraphQLServer } from \"graphql-yoga\";\r\n\r\nconst server = new GraphQLServer({\r\n  typeDefs: \"graphql/schema.graphql\"\r\n});\r\n\r\nserver.start(() => console.log(\"gql server start\"));\r\n```\r\n\r\n\r\n### resolvers 생성\r\n\r\n우리가 방금 한 것은 여러분이 Query에 이름을 요청하면 String을 보낸다는 설명을 했을 뿐이다.\r\nNode.js에게 우리가 만든 Query의 기능을 프로그래밍 해야한다.  \r\n\r\n그래서 Query를 해결(resolve)해주는 **resolvers.js**라는 파일 생성해야 한다.  \r\nDatabase는 혼자 Query를 해결할 수 없다. 그래서 우린 이 Query를 해결(resolve)하게 해야합니다.\r\n\r\n```javascript\r\nconst resolvers = {\r\n  Query: {\r\n    name: () => \"hj\"\r\n  }\r\n};\r\n\r\nexport default resolvers;\r\n```\r\n\r\n해결(resolve)하고 싶은 문제는 Query이고, 여러분이 name Query를 요청하면 hj를 반환하는 함수를 만들었다.  \r\n\r\n우리는 schema.graphql에서 Query를 설명했고, resolvers.js에는 Resolvers를 프로그래밍 했다. gql에서는 Query와 Resolvers로 원하는대로 프로그래밍 할 수 있다.\r\n\r\nResolvers를 생성했으니, index.js에 Resolvers도 정의해준다.\r\n\r\n```javascript\r\nimport { GraphQLServer } from \"graphql-yoga\";\r\nimport resolvers from \"./graphql/resolvers\";\r\n\r\nconst server = new GraphQLServer({\r\n  typeDefs: \"graphql/schema.graphql\",\r\n  resolvers // resolvers : resolvers 를 짧게 표현 가능\r\n});\r\n\r\nserver.start(() => console.log(\"gql server start\"));\r\n```\r\n\r\n이제 터미널 창에선 gql server start라는 텍스트를 확인할 수 있고, http://localhost:4000/를 확인하면 **GraphQL Playground**를 확인 할 수 있다. GraphQL Playground는 GraphQL yoga안에 있는 내용으로, 우리가 작성한 Query를 빠르고 쉽게 확인 할 수 있다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/graphql/movie_graphql_1-2.jpg\" alt=\"\">\r\n<figcaption>GraphQL Playground에서 Query확인</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"9fba24cf-a3ab-56c7-80bd-7f177a8e278f"}},{"node":{"frontmatter":{"title":"Todo_List ReactJS Palette 컴포넌트 추가","category":"React"},"fields":{"slug":"2020-02-06-react-todo-list4"},"internal":{"content":"\r\n> React 기초 입문 프로젝트 – 흔하디 흔한 할 일 목록 만들기 by velopert <https://velopert.com/3480>\r\n> [Todo-List 결과물 확인](https://github.com/hjban-dev/todo-react)\r\n\r\n# Todo_List\r\n\r\n여기서부터는 필자가 만든 정리...\r\n\r\n## 4. Palette 컴포넌트 추가\r\n\r\n### 다섯번째 컴포넌트, Palette \r\n\r\n- src/components/Palette.js\r\n- src/components/css/Palette.css\r\n\r\n```javascript\r\n// --- src/components/Palette.js ---\r\nimport React from \"react\";\r\nimport \"./css/Palette.css\";\r\n\r\nconst Color = ({ color, active, onClick }) => {\r\n  return (\r\n    <div\r\n      className={`color ${active && active}`}\r\n      style={{ background: color }}\r\n      onClick={onClick}\r\n    ></div>\r\n  );\r\n};\r\n\r\nconst Palette = ({ colors, selected, onSelect }) => {\r\n  const colorList = colors.map(color => (\r\n    <Color\r\n      color={color}\r\n      active={selected === color}\r\n      onClick={() => onSelect(color)}\r\n      key={color}\r\n    />\r\n  ));\r\n  return <div className=\"palette\">{colorList}</div>;\r\n};\r\n\r\nexport default Palette;\r\n```\r\n\r\n\r\n```javascript\r\n// --- src/App.js ---\r\n(...)\r\nimport Palette from \"./components/Palette\";\r\n\r\nconst colors = [\"#343a40\", \"#f03e3e\", \"#12b886\", \"#228ae6\"];\r\n(...)\r\n  handleCreate = () => {\r\n    const { input, todos, color } = this.state;\r\n    this.setState({\r\n      input: '', // 인풋 비우고\r\n      // concat 을 사용하여 배열에 추가\r\n      todos: todos.concat({\r\n        id: this.id++,\r\n        text: input,\r\n        checked: false,\r\n        color\r\n      })\r\n    });\r\n  }\r\n(...)\r\n  handleSelectColor = (color) => {\r\n    this.setState({\r\n      color\r\n    })\r\n  }\r\n(...)\r\n    return (\r\n      <TodoListTemplate \r\n        form={\r\n          <Form \r\n            value={input}\r\n            onKeyPress={handleKeyPress}\r\n            onChange={handleChange}\r\n            onCreate={handleCreate}\r\n          />\r\n        }\r\n        palette={\r\n          <Palette colors={colors} />\r\n        }>\r\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\r\n      </TodoListTemplate>\r\n    );\r\n```\r\n\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress, color}) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color}}/>\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n```\r\n\r\nTodoListTemplate.js, TodoItemList.js, TodoItem.js는 생략하겠습니다.  \r\n\r\n> [Todo-List 결과물 확인](https://github.com/hjban-dev/todo-react)\r\n"},"id":"dbe47df4-4d5d-5a8e-a0fd-46550cc3cebb"}},{"node":{"frontmatter":{"title":"Todo_List ReactJS 컴포넌트 최적화","category":"React"},"fields":{"slug":"2020-02-06-react-todo-list3"},"internal":{"content":"\r\n> React 기초 입문 프로젝트 – 흔하디 흔한 할 일 목록 만들기 by velopert <https://velopert.com/3480>\r\n> [Todo-List 결과물 확인](https://github.com/hjban-dev/todo-react)\r\n\r\n# Todo_List\r\n\r\n## 3. 컴포넌트 최적화\r\n\r\n### TodoItemList 최적화\r\n\r\n지금 TodoItem는 input창에 텍스트를 입력할 때 마다 render함수가 실행되고 있습니다. React에서는 가상 DOM을 사용하기 때문에 변화는 없지만, 미세하게 자원이 낭비되고 있습니다.\r\n\r\n```javascript\r\n// --- src/components/TodoItemList.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.todos !== nextProps.todos;\r\n  }\r\n\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    const todoList = todos.map(\r\n      ({id, text, checked}) => (\r\n        <TodoItem\r\n          id={id}\r\n          text={text}\r\n          checked={checked}\r\n          onToggle={onToggle}\r\n          onRemove={onRemove}\r\n          key={id}\r\n        />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {todoList}    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;\r\n```\r\n컴포넌트 라이프 사이클 메소드중 shouldComponentUpdate 는 컴포넌트가 리렌더링을 할 지 말지 정해줍니다.  \r\n\r\ntodos 값이 바뀔 때 리렌더링 하면 되니까 this.props.todos 와 nextProps.todos 를 비교해서 이 값이 다를때만 리렌더링하게 설정하였습니다.\r\n\r\n### TodoItem 컴포넌트 최적화\r\n\r\n그리고 TodoItem에서도 선택한 TodoItem만 업데이트 되는게 아니라 모든 TodoItem들이 렌더링 되고 있습니다.\r\n\r\n```javascript\r\n// --- src/components/TodoItem.js ---\r\nimport React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.checked !== nextProps.checked;\r\n  }\r\n\r\n  render() {\r\n    (...)\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n```\r\nthis.props.checked와 nextProps.checked 가 다를 때만 return합니다.\r\n"},"id":"097b9d84-b7a3-5268-90d4-226620421924"}},{"node":{"frontmatter":{"title":"Todo_List ReactJS 상태관리 하기","category":"React"},"fields":{"slug":"2020-02-06-react-todo-list2"},"internal":{"content":"\r\n> React 기초 입문 프로젝트 – 흔하디 흔한 할 일 목록 만들기 by velopert <https://velopert.com/3480>\r\n> [Todo-List 결과물 확인](https://github.com/hjban-dev/todo-react)\r\n\r\n# Todo_List\r\n\r\n## 2. 상태관리 하기\r\n\r\n### 상태관리는 어떻게 해야 할까?\r\n\r\n현재 프로젝트에서 상태가 필요한 컴포넌트는 Form 과 TodoItemList 입니다. 컴포넌트들은 부모를 통하여 대화를 해야합니다.  \r\n\r\n그래서 `App` 이 **Form 과 TodoItemList** 의 부모 컴포넌트이니, 해당 컴포넌트에 input, todos 상태를 넣어주고 해당 값들과 값들을 업데이트 하는 함수들을 각각 컴포넌트에 `props` 로 전달해주어서 기능을 구현하게됩니다.\r\n\r\n### 초기 state 정의하기\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\n\r\nclass App extends Component {\r\n\r\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\r\n\r\n  state = {\r\n    input: '',\r\n    todos: [\r\n      { id: 0, text: ' 리액트 소개', checked: false },\r\n      { id: 1, text: ' 리액트 소개', checked: true }\r\n      { id: 2, text: ' 리액트 소개', checked: false }\r\n    ]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TodoListTemplate form={<Form/>}>\r\n        <TodoItemList/>\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n초기 state 에 input 의 값과, todos 배열의 기본 아이템 3개를 넣어줍니다.\r\n\r\n### Form 기능 구현하기\r\n\r\n1. 텍스트 내용 바뀌면 state 업데이트\r\n1. 버튼이 클릭되면 새로운 todo 생성 후 todos 업데이트\r\n1. 인풋에서 Enter 누르면 버튼을 클릭한것과 동일한 작업진행하기\r\n\r\nApp 컴포넌트에 handleChange, handleCreate, handleKeyPress 메소드를 구현하고, 이를 상태의 input 값과 함께 Form 컴포넌트로 전달하세요.\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\r\n\r\n  state = {\r\n    input: '',\r\n    todos: [\r\n      { id: 0, text: ' 리액트 소개', checked: false },\r\n      { id: 1, text: ' 리액트 소개', checked: true },\r\n      { id: 2, text: ' 리액트 소개', checked: false }\r\n    ]\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      input: e.target.value // input 의 다음 바뀔 값\r\n    });\r\n  }\r\n\r\n  handleCreate = () => {\r\n    const { input, todos } = this.state;\r\n    this.setState({\r\n      input: '', // 인풋 비우고\r\n      // concat 을 사용하여 배열에 추가\r\n      todos: todos.concat({\r\n        id: this.id++,\r\n        text: input,\r\n        checked: false\r\n      })\r\n    });\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    // 눌려진 키가 Enter 면 handleCreate 호출\r\n    if(e.key === 'Enter') {\r\n      this.handleCreate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { input } = this.state;\r\n    const {\r\n      handleChange,\r\n      handleCreate,\r\n      handleKeyPress\r\n    } = this;\r\n\r\n    return (\r\n      <TodoListTemplate form={(\r\n        <Form \r\n          value={input}\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleChange}\r\n          onCreate={handleCreate}\r\n        />\r\n      )}>\r\n        <TodoItemList/>\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n인풋에 텍스트를 쓰고 버튼을 누르면 DOM의 변화는 없지만 [React 개발자도구](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)를 사용하면 App컴포넌트에 state가 추가된 것을 확인 할 수 있습니다.\r\n\r\n### TodoItemList 에서 배열을 TodoItem 컴포넌트 배열로 변환하기\r\n\r\ntodos 배열을 컴포넌트 배열로 변환하여 노출시킵시다. \r\n\r\n```javascript\r\n// --- src/App.js의 render함수 ---\r\n  render() {\r\n    const { input, todos } = this.state;\r\n    const {\r\n      handleChange,\r\n      handleCreate,\r\n      handleKeyPress\r\n    } = this;\r\n\r\n    return (\r\n      <TodoListTemplate form={(\r\n        <Form \r\n          value={input}\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleChange}\r\n          onCreate={handleCreate}\r\n        />\r\n      )}>\r\n        <TodoItemList todos={todos}/>\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n```\r\n위의 코드에서 TodoItemList 컴포넌트에 props todos를 넘겨주었습니다.\r\n\r\n```javascript\r\n// --- src/components/TodoItemList.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    const todoList = todos.map(\r\n      ({id, text, checked}) => (\r\n        <TodoItem\r\n          id={id}\r\n          text={text}\r\n          checked={checked}\r\n          onToggle={onToggle}\r\n          onRemove={onRemove}\r\n          key={id}\r\n        />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {todoList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;\r\n```\r\n받은 todos를 재배열하여 todoList에 props로 넘기고, todoList를 return하였습니다.\r\n\r\n### 체크 하기/체크 풀기\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  (...)\r\n\r\n  handleToggle = (id) => {\r\n    const { todos } = this.state;\r\n\r\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    const selected = todos[index]; // 선택한 객체\r\n\r\n    const nextTodos = [...todos]; // 배열을 복사\r\n\r\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\r\n    nextTodos[index] = { \r\n      ...selected, \r\n      checked: !selected.checked\r\n    };\r\n\r\n    this.setState({\r\n      todos: nextTodos\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { input, todos } = this.state;\r\n    const {\r\n      handleChange,\r\n      handleCreate,\r\n      handleKeyPress,\r\n      handleToggle\r\n    } = this;\r\n\r\n  (...)\r\n\r\n    return (\r\n      <TodoListTemplate form={(\r\n        <Form \r\n          value={input}\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleChange}\r\n          onCreate={handleCreate}\r\n        />\r\n      )}>\r\n        <TodoItemList todos={todos} onToggle={handleToggle}/>\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nnextTodos로 배열의 값을 수정했습니다.\r\n\r\n### 아이템 제거하기\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\n\r\n\r\nclass App extends Component {\r\n  (...)\r\n\r\n  handleRemove = (id) => {\r\n    const { todos } = this.state;\r\n    this.setState({\r\n      todos: todos.filter(todo => todo.id !== id)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { input, todos } = this.state;\r\n    const {\r\n      handleChange,\r\n      handleCreate,\r\n      handleKeyPress,\r\n      handleToggle,\r\n      handleRemove\r\n    } = this;\r\n\r\n    return (\r\n      <TodoListTemplate form={(\r\n        <Form \r\n          value={input}\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleChange}\r\n          onCreate={handleCreate}\r\n        />\r\n      )}>\r\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\ntodos를 filter 메소드로 재배열했습니다.\r\n"},"id":"1894f026-b61d-57bd-9e64-42c9d3447fec"}},{"node":{"frontmatter":{"title":"Todo_List ReactJS 컴포넌트 구성","category":"React"},"fields":{"slug":"2020-02-05-react-todo-list1"},"internal":{"content":"\r\n> React 기초 입문 프로젝트 – 흔하디 흔한 할 일 목록 만들기 by velopert <https://velopert.com/3480>\r\n> [Todo-List 결과물 확인](https://github.com/hjban-dev/todo-react)\r\n\r\n# Todo_List\r\n\r\n## 0. 시작하기\r\n\r\n필자는 node, yarn, VS code 사용. \r\n\r\n```\r\nyarn global add create-react-app <!-- create-react-app 설치 -->\r\ncreate-react-app todo-list <!-- todo-list 프로젝트 생성 -->\r\nyarn start <!-- todo-list 디렉토리에서 명령어를 실행 -->\r\n```\r\n\r\n### 프로젝트 구성요소\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/todo-list_1.jpg\" alt=\"\">\r\n<figcaption>프로젝트 구성요소</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### 프로젝트 초기화\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        App\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n같은 위치에 App.css, App.test.js, logo.svg 파일도 제거\r\n\r\n## 1. 컴포넌트 구성하기\r\n\r\nsrc 내부에 components 디렉토리 생성하여 컴포넌트들을 이곳에 생성\r\n\r\n### 첫번째 컴포넌트, TodoTemplate\r\n\r\n- src/components/TodoListTemplate.js\r\n- src/css/components/TodoListTemplate.css\r\n\r\nTodoListTemplate이라는 이름 그대로 **todo-list를 감싸주는 wrapper**역할을 합니다.\r\n\r\n```javascript\r\n// --- src/components/TodoListTemplate.js ---\r\nimport React from 'react';\r\nimport './css/TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n  return (\r\n    <main className=\"todo-list-template\">\r\n      <div className=\"title\">\r\n        오늘 할 일\r\n      </div>\r\n      <section className=\"form-wrapper\">\r\n        {form}\r\n      </section>\r\n      <section className=\"todos-wrapper\">\r\n        { children }\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoListTemplate;\r\n```\r\n\r\n함수형 컴포넌트이고 form, children 이라는 props를 받습니다.  \r\ncss는 생략하겠습니다.  \r\n\r\nTodoListTemplate을 App에서 불러오겠습니다.\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <TodoListTemplate>\r\n        템플릿 완성\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\nTodo-list의 전체 wrapper 생성\r\n\r\n### 두번째 컴포넌트, Form\r\n\r\n그 다음은 텍스트를 입력할 수 있는 **input과 button을 구성하는 Form 컴포넌트**를 생성하겠습니다.  \r\nForm은 총 네개의 props를 받아와야 합니다.\r\n\r\n- src/components/Form.js\r\n- src/components/css/Form.css\r\n\r\n```javascript\r\n// --- src/components/Form.js ---\r\nimport React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n```\r\n- value: 인풋의 내용\r\n- onCreate: 버튼이 클릭 될 때 실행 될 함수\r\n- onChange: 인풋 내용이 변경 될 때 실행되는 함수\r\n- onKeyPress: 인풋에서 키를 입력 할 때 실행되는 함수. 이 함수는 나중에 **Enter** 가 눌렸을 때 onCreate 를 한 것과 동일한 작업을 하기 위해서 사용합니다.\r\n\r\ncss는 생략하겠습니다.  \r\nForm 컴포넌트를 생성했으니, App.js에 렌더링하겠습니다.\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <TodoListTemplate form={<Form/>}>\r\n        템플릿 완성\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\nTodoListTemplate의 props form으로 Form 컴포넌트를 넘겨주었습니다. 그리고 TodoListTemplate는 받은 props form을 form-wrapper안에 넣어서 return 합니다.\r\n\r\n### 세번째 컴포넌트, TodoItemList\r\n\r\nTodoItemList 컴포넌트는 TodoItem 컴포넌트 여러개를 렌더링해주는 역할을 합니다.  \r\n‘리스트’ 를 렌더링하게 될 때는, 클래스형 컴포넌트로 작성해야 나중에 컴포넌트 성능 최적화할 수 있습니다.\r\n\r\n- src/components/TodoItemList.js\r\n\r\n```javascript\r\n// --- src/components/TodoItemList.js ---\r\nimport React, { Component } from 'react';\r\n\r\nclass TodoItemList extends Component {\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    return (\r\n      <div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;\r\n```\r\n\r\n- todos: todo 객체들이 들어있는 배열\r\n- onToggle: 체크박스를 키고 끄는 함수\r\n- onRemove: 아이템을 삭제시키는 함수\r\n\r\n### 네번째 컴포넌트, TodoItem \r\n\r\n이 컴포넌트는, 체크 값이 활성화되어있으면 우측에 체크마크 (✓) 를 보여주고, 마우스가 위에 있을때는 좌측에 엑스마크 (×) 를 보여줍니다.\r\n\r\n- src/components/TodoItem.js\r\n- src/components/css/TodoItem.css\r\n\r\n```javascript\r\n// --- src/components/TodoItem.js ---\r\nimport React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n    const { text, checked, id, onToggle, onRemove } = this.props;\r\n\r\n    return (\r\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n        <div className=\"remove\" onClick={(e) => {\r\n          e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n          onRemove(id)}\r\n        }>&times;</div>\r\n        <div className={`todo-text ${checked && 'checked'}`}>\r\n          <div>{text}</div>\r\n        </div>\r\n        {\r\n          checked && (<div className=\"check-mark\">✓</div>)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n```\r\n\r\n- text: todo 내용\r\n- checked: 체크박스 상태\r\n- id: todo 의 고유 아이디\r\n- onToggle: 체크박스를 키고 끄는 함수\r\n- onRemove: 아이템을 삭제시키는 함수\r\n\r\n그러면 TodoItemList에서 TodoItem컴포넌트를 불러오겠습니다.\r\n\r\n```javascript\r\n// --- src/components/TodoItemList.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <TodoItem text=\"안녕\"/>\r\n        <TodoItem text=\"리액트\"/>\r\n        <TodoItem text=\"반가워\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;\r\n```\r\n\r\nApp 에서도 TodoItemList를 불러와야 합니다.\r\n\r\n```javascript\r\n// --- src/App.js ---\r\nimport React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <TodoListTemplate form={<Form/>}>\r\n        <TodoItemList/>\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n"},"id":"de2a310d-5911-50dd-8909-0aacb593ff1d"}},{"node":{"frontmatter":{"title":"Gulp Deploying to GH Pages","category":"Gulp"},"fields":{"slug":"2020-02-05-gulp-nomad_gulp7"},"internal":{"content":"\r\n> 노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 6 Deploying to GH Pages\r\n\r\n## 6.0 Deploying to GH Pages\r\n\r\ngulp의 작업은 끝났지만 이번엔 github page를 사용해보겠습니다. gulp-gh-pages를 사용할거고 npm i -D gulp-bro로 설치 할 수 있습니다.\r\n\r\n> [Npm gulp-gh-pages 링크](https://www.npmjs.com/package/gulp-gh-pages)\r\n\r\n[Npm gulp-gh-pages 링크](https://www.npmjs.com/package/gulp-gh-pages)에서 확인할 수 있는 gulp-gh-pages 사용법\r\n```javascript\r\ngulp.task('deploy', function() {\r\n  return gulp.src('./dist/**/*')\r\n    .pipe(ghPages());\r\n});\r\n```\r\n\r\n설치를 했으니 import 하겠습니다.\r\n\r\n```javascript\r\nimport ghPages from \"gulp-gh-pages\";\r\n```\r\n\r\ngh task를 생성하겠습니다. 생성법은 위 사용법과 같습니다.\r\n\r\n```javascript\r\n// ---gh task---\r\nconst gh = () => gulp.src(\"build/**/*\").pipe(ghPages())\r\n```\r\n\r\n그리고 처음에 만들어줬던 명령어 dev와 build 밑에 deploy를 만들어주겠습니다.\r\n\r\n```javascript\r\n{\r\n...\r\n  \"scripts\": {\r\n    \"dev\": \"gulp dev\",\r\n    \"build\": \"gulp build\",\r\n    \"deploy\": \"gulp deploy\"\r\n  },\r\n...\r\n} \r\n```\r\n우리는 지금까지 dev만 export 했었습니다. 이번엔 build를 export 해줄거고, build가 하는 일은 gulp.series([prepare, assets]); 입니다. 그리고 기존의 dev는 build와 live를 series 하겠습니다.\r\n\r\n```javascript\r\n// 기존 코드\r\nexport const dev = gulp.series([prepare, assets, live]);\r\n\r\n// 바뀐 코드\r\nexport const build = gulp.series([prepare, assets]);\r\nexport const dev = gulp.series([build, live]);\r\n```\r\n\r\n방금 만든 명령어인 deploy를 더 추가해야 합니다. deploy는 build, gh, clean을 하겠습니다.\r\n\r\n```javascript\r\nexport const deploy = gulp.series([build, gh, clean]);\r\n```\r\n\r\n즉 build는 서버가 연결되기 전에 코드들을 준비하는 역할인 prepare와 assets을 불러오고, dev는 이것들을 live하여 서버로 보냅니다. 그리고 deploy는 그것들을 배포하고, 필요 없는 코드는 지워줍니다.\r\n"},"id":"ac581128-74a6-5c7a-98b4-4e1a618e5253"}},{"node":{"frontmatter":{"title":"Gulp Babel Support","category":"Gulp"},"fields":{"slug":"2020-02-05-gulp-nomad_gulp6"},"internal":{"content":"\r\n> 노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 5 Babel Support\r\n\r\n## 5.0 Babelify + Browserify\r\n\r\n마지막 남은 js를 실행해보겠습니다. gulp-bro를 사용하여 import, export등 브라우저가 알지 못하는 문법을 정리해줍시다. yarn add gulp-bro로 설치합니다.\r\n\r\n> [Npm gulp-bro 링크](https://www.npmjs.com/package/gulp-bro)\r\n\r\n[Npm gulp-bro 링크](https://www.npmjs.com/package/gulp-bro)에서 확인할 수 있는 gulp-bro 사용법\r\n```javascript\r\ngulp.task('build', () =>\r\n  gulp.src('app.js')\r\n    .pipe(bro({\r\n      transform: [\r\n        babelify.configure({ presets: ['es2015'] }),\r\n        [ 'uglifyify', { global: true } ]\r\n      ]\r\n    }))\r\n    .pipe(gulp.dest('dist')\r\n)\r\n```\r\n\r\n위 사용법을 확인해보면 babelify 사용한게 보입니다. babelify도 같이 설치해주고 두 가지 모두 import 해주겠습니다.\r\n\r\n```javascript\r\nimport bro from \"gulp-bro\";\r\nimport babelify from \"babelify\";\r\n```\r\n\r\n이제 js관련 rotues와 js task를 생성하겠습니다. 생성법은 이전 코드들과 비슷합니다.\r\n\r\n```javascript\r\n// ---js routes---\r\nconst routes = {\r\n  (...)\r\n  js:{\r\n    watch :\"src/js/**/*.js\",\r\n    src: \"src/js/main.js\",\r\n    dest: \"build/js\"\r\n  }\r\n};\r\n\r\n// ---js task---\r\nconst js = () => \r\n  gulp\r\n    .src(routes.js.src)\r\n    .pipe(bro({\r\n      transform:[\r\n        babelify.configure({ presets: ['@babel/preset-env'] }),\r\n        [ 'uglifyify', { global: true } ]\r\n      ]\r\n    })).pipe(gulp.dest(routes.js.dest));\r\n```\r\n\r\n위의 js task에 보면 uglifyify가 사용되었는데 저것도 모듈이라 따로 설치 필요합니다.\r\n\r\n```javascript\r\n// ---watch에 js추가---\r\nconst watch = () => {\r\n  gulp.watch(routes.pug.watch, pug);\r\n  gulp.watch(routes.img.src, img);\r\n  gulp.watch(routes.scss.watch, styles);\r\n  gulp.watch(routes.js.watch, js);\r\n};\r\n\r\n// ---assets 부분에 js 추가---\r\nconst assets = gulp.series([pug, styles, js]);\r\n```\r\n\r\n위 코드를 진행하고 서버를 실행 했을 때, 처음에 만들었던 random() 함수가 실행된다면 정상 작동하는 것 입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_5-7.jpg\" alt=\"\">\r\n<figcaption>console창에서 random()함수 실행 확인</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"95090b52-5f0b-5a22-8ca1-a5c1fc7f65c5"}},{"node":{"frontmatter":{"title":"Gulp SCSS Compilation","category":"Gulp"},"fields":{"slug":"2020-02-04-gulp-nomad_gulp5"},"internal":{"content":"\r\n> 노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 4 SCSS Compilation\r\n\r\n## 4.0 Gulp SASS\r\n\r\n이번엔 SASS파일을 compile하겠습니다. 이번에도 gulp-sass라는 플러그인을 사용할거고, npm i node-sass gulp-sass -D 로 설치할 수 있습니다. 명령어가 조금 다른 이유는 gulp-sass는 node-sass와 같이 설치해야 합니다.\r\n\r\n> [Npm gulp-sass 링크](https://www.npmjs.com/package/gulp-sass)\r\n\r\ngulp-sass가 node-sass로 sass파일을 전달해주는 흐름입니다.  \r\n위 링크를 확인하시면 먼저 gulp-sass를 import해야 하고, 그 다음 gulp-sass를 compiler로 보내고 있습니다. 우리도 같은 방법으로 import 해오고, routes를 작성해봅시다.  \r\n\r\nscss는 src와 dest 뿐만 아니라 watch도 작성해주어야 합니다. 왜냐햐면 compile할 파일은 style.scss 하나이지만, 변경을 감지해야 하는건 scss폴더 내부 모든 scss 파일이기 때문입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_5-1.jpg\" alt=\"\">\r\n<figcaption>gulp-sass import와 routes의 scss작성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n설치와 import가 끝났으니 task를 만들어줍시다. task의 이름은 styles 이고, 이전에 만든 task img와 같습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_5-2.jpg\" alt=\"\">\r\n<figcaption>styles 작성</figcaption>\r\n</figure>\r\n</center>\r\n\r\npipe의 on()부분의 error는 [Npm gulp-sass 링크](https://www.npmjs.com/package/gulp-sass)에 있는 부분을 그대로 가져왔습니다. 가져오려는 scss가 없다면 그에 관련된 오류를 반환하라는 의미의 error입니다.  \r\n브라우저의 console창에 단순히 'css파일이 없습니다.' 같은 error가 아니라 어떤 부분이 다르다고 알려줍니다.  \r\n\r\n_variabels 의 변수 $red를 $red2로 변경한 후 터미널 창을 살펴봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_5-4.jpg\" alt=\"\">\r\n<figcaption>styles 작성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n'Undefined variable: \"$red\"'라고 정확히 알려줍니다.\r\n\r\n다시 코드로 돌아가서 watch부분에도 styles를 추가하여 주었습니다. 위에서 말했듯이 모든 파일 정보를 넣은 routes.scss.watch를 첫번째 인자로 넣었습니다.  \r\n\r\nassets부분에 styles를 추가하면 끝입니다. yarn dev로 실행 해보겠습니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_5-3.jpg\" alt=\"\">\r\n<figcaption>실행결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n정상 작동하고 있습니다. style.scss에서 _reset.scss나 _variables.scss를 import해오는건 scss가 하는 일이고 scss를 css로 변경하는 것을 gulp가 한 것 입니다.  \r\n\r\n사실 style.scss를 살펴보면 display: flex나 flex-direction: column와 같이 최신 css 문법을 사용하고 있습니다. 이건 모든 브라우저가 이해할 수는 없을 것입니다. 다음장에선 우리의 css를 좀 더 호환성 좋게 만들어봅시다! \r\n\r\n----\r\n\r\n## 4.1 Minify + Autoprefixer\r\n\r\n전 장에서 설명했듯이, css의 호환성을 향상시키기 위해 gulp-autoprefixer를 설치하겠습니다. npm i gulp-autoprefixer -D로 설치하고 import 해주겠습니다.\r\n\r\n> [Npm gulp-autoprefixer 링크](https://www.npmjs.com/package/gulp-autoprefixer)\r\n\r\n```javascript\r\nimport autoprefixer from \"gulp-autoprefixer\";\r\n```\r\n\r\n우리가 보통 task를 작성할 때 작업하는 순서는 src, pipe, dest 세 단계였지만 styles에게는 pipe를 하나 더 넣어주겠습니다.  \r\n\r\ngulp-autoprefixer에게는 많은 옵션들이 있습니다. 그 중 하나인 browsers는 여러분의 코드를 얼마나 호환 가능하게 할지 정하는 것입니다. (20.2월 browsers옵션이 development로 바뀐걸로 보입니다. 사용할 때 [Npm gulp-autoprefixer 링크](https://www.npmjs.com/package/gulp-autoprefixer)를 참고하길 바랍니다.)\r\n\r\n```javascript\r\nconst styles = () => \r\n  gulp\r\n    .src(routes.scss.src)\r\n    .pipe(sass().on('error', sass.logError))\r\n    .pipe(autoprefixer({\r\n      \"development\": [\r\n        \"last 2 chrome version\",\r\n        \"last 2 firefox version\",\r\n        \"last 2 safari version\",\r\n        \"last 2 ie version\"\r\n      ]\r\n    }))\r\n    .pipe(gulp.dest(routes.scss.dest))\r\n```\r\n\r\n이제 서버를 다시 실행시키면 내가 작성한 css외에 코드들이 들어간것을 볼 수 있습니다!\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_5-5.jpg\" alt=\"\">\r\n<figcaption>작성했던 style.scss와 컴파일 된 style.css</figcaption>\r\n</figure>\r\n</center>\r\n\r\n컴파일은 완료 됐으나 css를 보니 공백이 많이 있습니다. 공백 하나당 1바이트이니 길이가 긴 css는 gulp가 느려질 위험이 있습니다. 그래서 우리는 gulp-csso를 사용하여 css파일을 최소화 하겠습니다. \r\n\r\n> [Npm gulp-csso 링크](https://www.npmjs.com/package/gulp-csso)\r\n\r\nnpm i gulp-csso -D로 설치하고, import하겠습니다. gulp-csso도 사용가능한 몇 옵션들이 있는데 옵션은 사용하지 않고 styles()에 하나의 pipe만 더 추가해주겠습니다.\r\n\r\n```javascript\r\nconst styles = () => \r\n  gulp\r\n    .src(routes.scss.src)\r\n    .pipe(sass().on('error', sass.logError))\r\n    .pipe(autoprefixer({\r\n      \"development\": [\r\n        \"last 2 chrome version\",\r\n        \"last 2 firefox version\",\r\n        \"last 2 safari version\",\r\n        \"last 2 ie version\"\r\n      ]\r\n    }))\r\n    .pipe(miniCSS())\r\n    .pipe(gulp.dest(routes.scss.dest))\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_5-6.jpg\" alt=\"\">\r\n<figcaption>gulp-csso로 압축된 style.css</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이렇게 여러분이 원하는 모든것을 설치할 수 있습니다.  \r\n다음 장에서는 js를 배워봅시다!\r\n"},"id":"af23590d-5d4e-5a26-9009-8522fdfddf9c"}},{"node":{"frontmatter":{"title":"Gulp Image Optimization","category":"Gulp"},"fields":{"slug":"2020-02-04-gulp-nomad_gulp4"},"internal":{"content":"\r\n> 노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 3 Image Optimization\r\n\r\n## 3.0 Image Optimization\r\n\r\n이제 이미지를 최적화 해봅시다. 이번에도 gulp-image 라이브러리를 설치하여 사용해야합니다. 설치는 npm install -D gulp-image로 가능합니다.\r\n\r\n> [Npm gulp-image 링크](https://www.npmjs.com/package/gulp-image)\r\n\r\n설치가 되었으면 import한 후 routes를 만들겠습니다. 우리는 src/img 폴더의 모든 파일을 선택하려고 하니 전 장과 마찬가지로 *부호로 선택해주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-10.jpg\" alt=\"\">\r\n<figcaption>gulp-image를 import하고 routes 생성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이미 알겠지만 img의 **src**는 가져오려는 이미지의 정보, **dest**는 최적화 한 이미지를 보낼 경로의 정보 입니다. 우리는 모든 파일을 가져와서 `\"src/img/*`를 사용했다고 했습니다. 만약 폴더 내부의 모든 png파일을 가져오고 싶다면 `\"src/img/*.png\"` 라고 작성하면 됩니다.  \r\n\r\n자, 이제 img함수를 만들어보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-11.jpg\" alt=\"\">\r\n<figcaption>img()의 구성 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\npug()를 만들었던 그대로 만들겠습니다. gulp.src()를 return하고 image()를 실행하는 pipe와 gulp.dest()를 실행하는 pipe를 만들었습니다.  \r\n\r\n그리고 assets 단계가 아니라 prepare 단계에 img를 추가 하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-12.jpg\" alt=\"\">\r\n<figcaption>img()의 구성 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지를 보시면 터미널 창에 logo.svg의 이미지 용량을 줄였다고 말해줍니다. 기존 대비 용량이 0.5%라고 말합니다. 이미지의 용량을 훌륭하게 줄였습니다!  \r\n그리고 build폴더를 확인해보면 logo.svg파일이 생성되어 있는 것을 확인할 수 있습니다.  \r\n\r\ngulp-image에는 여러 옵션들이 있으니 [Npm gulp-image 링크](https://www.npmjs.com/package/gulp-image)에서 확인해보시기 바랍니다.\r\n\r\n문제는 우리가 위에서 만든 img()가 시간이 많이 걸릴 수도 있다는 것 입니다. 만약 여러분이 큰 용량의 jpg파일이나 img폴더에 img들이 많이 존재한다면 그것을 처리하는데 시간이 오래 걸릴 것입니다.  \r\n그래서 우리는 img를 save할 때 마다 매번 돌리지 않고, 변화가 있을 때만 처리하도록 watch()에 넣어줍시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-13.jpg\" alt=\"\">\r\n<figcaption>watch()에서 img()를 사용한 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이로써 우리는 gulp에서 html을 compile하고 img를 최적화하는 방법까지 알아보았습니다. 이제 css와 javascript만 남았습니다. 다음 장에서 계속 알아봅시다.\r\n"},"id":"5728ec16-d8e6-5e3a-a96f-f96311e567d3"}},{"node":{"frontmatter":{"title":"Gulp Webserver and Watching Files","category":"Gulp"},"fields":{"slug":"2020-02-03-gulp-nomad_gulp3"},"internal":{"content":"\r\n> 노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 Webserver and Watching Files\r\n\r\n## 2.0 Dev Server\r\n\r\n개발 흐름을 파악했으니 이제 우리가 해야할 일은 개발 서버를 만들어보겠습니다. 우리는 gulp-webserver라는 플러그인을 사용하겠습니다.\r\n\r\n> [Npm gulp-webserver 링크](https://www.npmjs.com/package/gulp-webserver)\r\n\r\n<u>yarn add gulp-webserver -D</u>로 설치하고 import해주겠습니다.\r\n\r\n```javascript\r\nimport ws from \"gulp-webserver\"\r\n```\r\n\r\nwebserver라는 상수를 만들어주겠습니다. gulp는 처음에 src()로 서버에서 보여주고 싶은 폴더를 넣어주고, pipe로 ws(webserver)를 실행하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-7.jpg\" alt=\"\">\r\n<figcaption>상수 webserver의 구성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지의 ws의 옵션 부분은 [Npm gulp-webserver 링크](https://www.npmjs.com/package/gulp-webserver)를 참고하여 추가하였습니다.  \r\n\r\n그리고 dev 상수에 webserver를 추가하여 실행할 수 있지만 이번에도 다른 series를 만들겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-8.jpg\" alt=\"\">\r\n<figcaption>상수 postDev의 생성과 사용</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이제 터미널에 yarn dev를 실행하면 localhost의 8000번 포트에 build 폴더 내부 내용이 노출됩니다. 하지만 index.pug나 footer.pug를 수정해도 반영되지 않습니다. gulp가 우리의 명령에 따라 우리의 파일들을 컴파일을 한걸로 task가 끝난 것입니다.  \r\n다음장에선 gulp가 우리의 파일들을 계속 지켜보고 있게 만들어봅시다.\r\n\r\n----\r\n\r\n## 2.1 Watching Files\r\n\r\nGulp의 API중 하나인 watch()를 사용해봅시다. \r\n\r\n> [Gulp의 공식 사이트의 watch() 관련 내용 링크](https://gulpjs.com/docs/en/api/watch)\r\n\r\nwatch()는 무엇을 해주는 기능이냐면, 첫번째 인자로 있는 부분을 계속 지켜보는 기능을 합니다. 그러니까 watch()는 지켜봐야 하는 파일이랑 몇 옵션을 인자로 받아주는 task를 만들어주면 됩니다.  \r\n\r\nwatch라는 함수를 만들고 내부엔 gulp의 watch를 실행하게 하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-9.jpg\" alt=\"\">\r\n<figcaption>watch할 파일들 지정, watch 함수 코드 구성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n최상단의 routes.put.watch 부분은 src폴더의 모든 pug파일을 지정해두었습니다. 그리고 모든 파일을 watch한 후에는 pug를 실행한다고 써있습니다.  \r\n이제 그러면 내가 partials의 footer.pug를 바꿔도 실시간으로 반영된다는 말입니다.\r\n\r\n그리고 postDev 상수에 watch를 추가해줍니다.\r\n\r\n```javascript\r\nconst postDev = gulp.series([webserver, watch]);\r\n```\r\n\r\n서버를 실행하면 조금 느리지만 제대로 실행되고 있습니다. 위 postDev에서 ([webserver, watch])부분을 동시에 실행하게 하려면 series를 parallel로 변경해주면 됩니다. parallel은 gulp의 API중 하나입니다.\r\n\r\n> [Gulp의 공식 사이트의 parallels() 관련 내용 링크](https://gulpjs.com/docs/en/api/parallel)\r\n\r\n```javascript\r\nconst postDev = gulp.parallel([webserver, watch]);\r\n```\r\n\r\n코드 실행의 변화는 없지만 gulp는 두 가지의 task를 동시 진행하고 있습니다.  \r\n\r\n다음장에서는 watch해야 하는 파일과 compile해야 하는 파일을 구분해보겠습니다.\r\n"},"id":"a48d080a-6262-5238-b476-23bd60478310"}},{"node":{"frontmatter":{"title":"Gulp Pug Compilation","category":"Gulp"},"fields":{"slug":"2020-02-03-gulp-nomad_gulp2"},"internal":{"content":"\r\n> 노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 1 Pug Compilation\r\n\r\n## 1.0 Pug Task part One\r\n\r\n자, 이제 Gulp에게 task를 주겠습니다! 아주 간단하게! :)  \r\n그냥 function을 export하거나 const하면 됩니다!\r\n\r\n우리는 저번에 package.json에서 \"dev\"라는 명령어를 만들었죠? 그러니까 dev라는 function을 만들어보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-1.jpg\" alt=\"\">\r\n<figcaption>dev function 생성 후 테스트 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nyarn dev명령을 했더니 console창에 알람이 뜬게 보이시죠? 작동을 하고 있습니다.  \r\ngulp는 최신 파일들을 구형 브라우저도 작동하도록 compile하는 일을 한다고 했죠? 그러면 이제 gulp에게 일을 만들어주겠습니다.  \r\n\r\n> [Gulp 공식사이트 링크](https://gulpjs.com/)\r\n\r\n위 링크를 확인하면 Gulp는 수 많은 플러그인을 가지고 있습니다. 20년 2월 기준으로 4105개가 있네요. 우리는 그 중 <u>gulp pug</u>라는 플러그인을 사용하겠습니다.\r\n\r\n> [Npm gulp-pug 링크](https://www.npmjs.com/package/gulp-pug)\r\n\r\n만약 여러분이 webpack을 안다면 loaders 플러그인을 생각하면 됩니다. (필자는 webpack을 모르지만 뭐 파일들을 build하는 그런 것으로 보입니다.)  \r\n\r\n설치는 터미널 창에 <u>yarn add gulp-pug -D</u> 입력으로 설치합니다. 설치가 완료되면 gulpfile.babel.js로 돌아와서 import 해줍시다.  \r\n\r\n```javascript\r\nimport gulpPug from \"gulp-pug\";\r\n```\r\n\r\n우리는 Gulp를 import했으니까 이제 Gulp를 사용가능 합니다.  \r\n다행히 Gulp는 많지 않은 API를 가지는데([Gulp 공식사이트 링크](https://gulpjs.com/docs/en/api/concepts)에서 확인 가능) 그 중 src()와 dest()는 사용하기 위해 꼭 알아야 합니다.  \r\nsrc()를 먼저 알아봅시다.\r\n\r\ngulpfile.babel.js로 돌아가서 우리는 상수 2개를 만들겠습니다.  \r\n하나는 routes라는 이름의 상수이고, 그 안에는 compile 할 파일들의 정보를 넣겠습니다.  \r\n다른 하나는 pug라는 이름의 상수이고, 그 안에는 gulp의 src()를 사용할거고 그 안의 매개변수로 routes의 일부를 넣어주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-2.jpg\" alt=\"\">\r\n<figcaption>gulp의 src() 사용</figcaption>\r\n</figure>\r\n</center>\r\n\r\ngulpPug의 src()를 사용했고 그 안의 매개변수로는 routes.put.src 그러니까 \"src/*.pug\"가 들어가 있습니다. `\"src/*.pug\"`의 뜻은 src폴더 바로 밑의 모든 pug파일이라는 의미이고, src폴더의 하위 폴더까지 compile하려면 `\"src/**/*.pug\"` 로 바꿔주면 됩니다.  \r\n\r\ngulp는 pipe()랑 같이 쓰입니다. gulp는 src()를 통해서 파일의 흐름을 만들고 여러분은 pipe()로 그 흐름이 어디로 나오게 할 지 만드는 것 입니다. 어떤 pipe는 코드를 컴파일하고, 어떤 pipe는 코드를 복사하게 하고, 어떤 pipe는 코드를 최소화하고 등등..  \r\n\r\n이번엔 pipe()를 사용해봅시다. 우리는 이전 코드에 pipe()를 연결하면서 pug를 부르고, 다시 pipe()를 연결하여 gulpPug.dest()를 실행하겠습니다.  \r\ndest()는 destination으로 컴파일한 파일을 어느곳에 저장할지 정해주는 것입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-3.jpg\" alt=\"\">\r\n<figcaption>gulp의 src()와 dest() series() 사용</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위에서 부터 차례로 분석해보겠습니다. routes 상수에 put객체를 넣었고, 그 안엔 src와 dest라는 각각 컴파일할 파일, 컴파일 된 파일이 저장될 경로를 지정해주었습니다. 그 밑엔 pug라는 함수를 만들었고 gulp를 사용하여 src()와 pipe()로 코드를 생성했습니다.  \r\n마지막으로 packagae.json에서 만든 명령어와 같게 만든 상수 dev는 export를 사용하여 밖에서도 사용하게 하였고 dev의 기능은 gulp를 series() 메서드로 연결하여 pug 작업을 결합하였습니다.  \r\n\r\n결과로는 dev가 시작하고, pug가 시작하고 끝났고, dev가 끝나는 실행 순서를 갖고 있습니다.\r\n\r\n그리고 supergulp 폴더에는 build폴더가 생겼고, 내부엔 html5로 작성된 index.html을 확인 할 수 있습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-4.jpg\" alt=\"\">\r\n<figcaption>index.pug와 컴파일 된 index.html</figcaption>\r\n</figure>\r\n</center>\r\n\r\n----\r\n\r\n## 1.1 Pug Task part Two\r\n\r\n이번에는 build폴더 내부의 파일을 제거하는 법을 알아봅시다. 만약 여러분이 파일을 컴파일 했는데 수정을 했을 경우에 기존 파일을 지우고 새로 작성해야 하죠? 그럴 때 사용하게 될 부분입니다.  \r\n\r\n먼저 터미널에 <u>yarn add del -D</u>로 설치하고, gulpfile.babel.js파일에 import 하겠습니다.  \r\n그리고 claen이라는 함수를 생성하고 그 함수는 del()을 사용하겠습니다. del() 함수 내부에는 우리가 삭제하려는 폴더인 \"build/\"를 넣어주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-5.jpg\" alt=\"\">\r\n<figcaption>del()으로 만든 clean함수</figcaption>\r\n</figure>\r\n</center>\r\n\r\nclean() 함수를 만들고, 마지막 줄에 series에 claen을 추가해주었습니다. 그래서 yarn dev를 실행하면 clean과 pug를 동시에 실행해서 기존 파일을 지우고 새로 작성하는 흐름을 갖습니다.\r\n\r\n이로써 끝났지만 우리는 조금 더 코드를 정리해보겠습니다. 마지막 줄의 series는 clean과 pug를 같이 실행하고 있습니다. 하지만 둘이 전혀 다른 일을 하고 있습니다. clean은 build를 위한 준비 과정이고, pug는 실제로 파일을 변형시키는 작업을 하고 있습니다. \r\n\r\n그래서 우리는 prepare와 assets라는 또 다른 series들을 만들어보겠습니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_1-6.jpg\" alt=\"\">\r\n<figcaption>prepare와 assets생성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이렇게 하는 이유는 dev라는 상수는 명령어 입니다. 지금은 dev하나 이지만 나중에 build나 publish같은 과정도 있을 수 있습니다. 그게 무엇이든간에 여러분은 pug라는 task를 또 사용하게 될 것이기 때문에 상수로 만들었습니다.\r\n\r\n자 지금까지의 과정으로 html파일 변환은 했지만, css나 js는 안될겁니다. 나머지는 다음 장에서 알아봅시다.\r\n"},"id":"37fb667c-2a45-5f31-a8bb-ce2638c45920"}},{"node":{"frontmatter":{"title":"Gulp Introduction","category":"Gulp"},"fields":{"slug":"2020-01-31-gulp-nomad_gulp1"},"internal":{"content":"\r\n> 노마드코더의 Gulp 90분 마스터하기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 0 Introduction\r\n\r\n## 0.1 Introduction\r\n\r\nGulp.js가 어떻게 webpack을 대체할 수 있는지, 또 어떻게 우리의 워크플로우를 자동화할 수 있을지 배워봅시다.  \r\n우리는 pug, scss, 최신 javascript들을 Gulp로 Compiling하겠습니다.\r\n\r\n---\r\n\r\n## 0.2 Scaffolding Part One\r\n\r\n> [Gulp 공식사이트 링크](https://gulpjs.com/)\r\n\r\nNico는 강의에서 맥과 yarn을 사용하고 있지만, 필자는 윈도우 + yarn + 조금 npm 을 사용하겠습니다.  \r\n\r\n파일을 넣을 디렉토리 supergulp를 생성하고, 터미널에서 `yarn add gulp-cli -g`로 설치합니다.  \r\ngulp-cli는 여러분이 콘솔에서 gulp를 호출할 수 있도록 도와주는 패키지입니다.\r\n\r\n우리는 이 디렉토리 안의 파일들을 gulp를 사용해서 컴파일 할 것 입니다.  \r\nsupergulp안에 폴더 구성은 아래 이미지처럼 해주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-1.jpg\" alt=\"\" style=\"width: 320px;\">\r\n<figcaption>supergulp 폴더 구조(동영상캡쳐)</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그리고 img폴더에는 [Gulp 공식사이트](https://gulpjs.com/)에서 로고를 logo.svg 파일로 저장하겠습니다.\r\n\r\n다시 터미널로 돌아가 yarn init으로 초기 세팅을 해주겠습니다. 세팅이 끝나면 package.json파일이 생성확인을 해주시면 됩니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-3.jpg\" alt=\"\">\r\n<figcaption>yarn init으로 생성된 package.json파일</figcaption>\r\n</figure>\r\n</center>\r\n\r\n---\r\n\r\n## 0.3 Scaffolding Part Two\r\n\r\n이번엔 util.js, main.js를 javascript의 최신 문법으로 작성하고,\r\nindex.pug, footer.pug, laygout.pug 파일도 작성하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-4.jpg\" alt=\"\">\r\n<figcaption>js와 pug파일들 내부 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\nscss폴더 내부의 scss파일들도 세팅해주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-5.jpg\" alt=\"\">\r\n<figcaption>scss파일들 내부 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\nreset.scss 파일의 내부는 구글에서 reset.css를 검색하여 복사해왔습니다.\r\n\r\n이제 파일 구조 생성은 끝났고, webpack의 경우 실행할 때 webpack.config로 초기 세팅을 합니다. 비슷하게 Gulp에서도 gulpfile.js를 만들어야 합니다. gulp를 사용하기 위한 설정을 정의하는 파일이라고 알아두고, 위치는 package.json과 같은 위치입니다. 파일 생성만 한 후, gulp 세팅을 마저 진행하겠습니다.\r\n\r\n우리는 아까 gulp-cli를 설치했었습니다. 말했듯이 gulp-cli는 console창에서 쓴다고 말했지만 만약 여러분이 터미널에서 gulp-cli를 사용하고 싶다면 package.json에 명령어를 추가해야 합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-6.jpg\" alt=\"\">\r\n<figcaption>package.json에 명령어 추가</figcaption>\r\n</figure>\r\n</center>\r\n\r\n명령어를 보니 뭔지는 모르겠지만 gulp를 사용하겠다는 뜻 같으니, 이번엔 gulp를 설치해줍시다.\r\n\r\n터미널에 yarn add gulp -D 으로 gulp 명령으로 설치하고, yarn dev를 실행하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-7.jpg\" alt=\"\">\r\n<figcaption>터미널에 yarn dev 명령 실행</figcaption>\r\n</figure>\r\n</center>\r\n\r\n에러부분은 무시하고, gulp가 제대로 작동하고 있고, gulpfile.js를 활용하고 있는게 확인되니, 이번엔 gulpfile.js에 코드를 추가합시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-8.jpg\" alt=\"\">\r\n<figcaption>gulpfile.js 파일</figcaption>\r\n</figure>\r\n</center>\r\n\r\n첫번째 줄에 있는 import 키워드를 사용해서 gulp를 불러오려고 했는데 문법 오류라는 오류를 반환합니다. 세번째 줄에 있는 코드처럼 require를 사용해서 불러오라고 합니다.  \r\n**gulp가 최신 문법을 이해하지 못하고 있습니다!**\r\n\r\n하지만 저희는 최신 자바스크립트 문법을 사용하고 싶으니, babel을 사용하겠습니다.\r\n\r\n---\r\n\r\n## 0.4 Gulp + Babel\r\n\r\n우리는 저번 시간에 gulp를 설치했고 dev와 build 명령어도 추가하여 터미널에서도 테스트할 수 있게 만들었습니다. 하지만 gulp가 최신 문법을 이해하지 못하는게 문제였습니다.\r\n\r\n자 이제 babel을 사용해보겠습니다.  \r\ngulpfile.js의 파일명을 **gulpfile.babel.js**로 변경하고, 같은 위치에 **.babelrc**파일을 생성하겠습니다.  \r\n\r\n.babelrc 바벨의 설정파일입니다. 기본적으로 만들어지지 않기 때문에 여러분이 만들어야하고, packages.json이 있는 위치에 만들어야 합니다. presets는 현재의 babel이 번역할 버전을 의미한다고 알아둡시다. .babelrc파일 내부엔 \"@babel/preset-env\"이라는 이름의 presets을 생성하겠습니다.\r\n\r\n그리고 터미널 창에가서 gulp dev를 실행하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-2.jpg\" alt=\"\">\r\n<figcaption>터미널에서 gulp dev 실행(동영상캡쳐)</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n그랬더니 외부모듈을 찾을 수 없다는 에러가 여러개 뜰겁니다. \r\n우리가 아직 babel을 설치하지 않았기 때문입니다.  \r\n\r\n강의에서는 yarn add @babel/{register, core} 를 실행하라고 했는데 필자는 자꾸 오류가 떠서\r\n아래 링크 확인하고 **npm install @babel/register @babel/core @babel/preset-env -D** 로 실행했더니 실행 되었습니다.\r\n\r\n> [구글링해서 Stackoverflow 참고](https://stackoverflow.com/questions/29207878/requirebabel-register-doesnt-work)\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-9.jpg\" alt=\"\">\r\n<figcaption>package.json의 devDependencies확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n지금까지 총 4개의 모듈을 설치했고, package.json에서 확인 가능합니다.\r\n앞에 붙는 @ 표시는 최신 버전이라는 뜻입니다.\r\n\r\n자 다시 터미널 창에서 gulp dev를 실행해보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/gulp/nomad_gulp_0-10.jpg\" alt=\"\">\r\n<figcaption>터미널에서 gulp dev를 실행</figcaption>\r\n</figure>\r\n</center>\r\n\r\n결과는 babel을 사용하고 있다고 나오고, 중간의 빨간 글씨는 현재 작업이 없다는 의미이고 오류는 아닙니다. \r\n이로써 우리가 gulp프로젝트를 시작하는 방법을 알게 되었습니다.\r\n파일 구조를 만들었던 단계가 아니라, <u>.packages.json, bulpfile.babel.js, .babelrc 파일</u> 등이 gulp를 구성하는 단계입니다.\r\n"},"id":"2c816b55-cf0f-53bd-a6dc-c5ac82d3bada"}},{"node":{"frontmatter":{"title":"Movie App ReactJS Routing Bonus 3","category":"React"},"fields":{"slug":"2020-01-30-react-nomad_react6_3"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 6 Routing Bonus\r\n\r\n## 6.4 Redirecting\r\n\r\n지난 장의 Detail Component에 props를 확인했더니, 4가지의 props가 나왔죠? 우리는 그 중 location 부분만 필요했으니 props를 location으로 수정하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-14.jpg\" alt=\"\">\r\n<figcaption>props를 location으로 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\n페이지에서 movie card를 누르면 이전 장에서 확인했던 것처럼 props 정보를 받을 수 있었지만,  \r\n그냥 <u>직접적으로 /movie-detail로 들어오면 여전히 undefined로 뜹니다</u>. 그것을 막기 위해 우리는 직접적으로 링크를 들어온다면 home으로 redirect되게 만들겠습니다.\r\n\r\n먼저 기존의 function Component를 class Component로 변경하고, 전 장에서 /movie-detail 링크를 직접적으로 들어오면 location.state이 undefined 인 것을 확인했으니, location.state이 undefined라면 유저를 인덱스 페이지로 redirect 시키겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-16.jpg\" alt=\"\">\r\n<figcaption>props를 console창에서 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지는 route에서 props를 console창에서 확인한 것 입니다. 가져온 history안에 있는 go, goBack, goFoward가 url을 변경합니다.  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-15.jpg\" alt=\"\">\r\n<figcaption>Detail을 class Component로 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\nthis.props에서 history도 가져와서 history.push('/')로 인덱스 페이지로 돌아가게 합니다. 한번 실행해봅시다!\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-16.jpg\" alt=\"\">\r\n<figcaption>movie-detail 페이지로 이동했더니 인덱스로 redirect</figcaption>\r\n</figure>\r\n</center>\r\n\r\n직접적으로 movie-detail 페이지에 갈 수 없는게 확인됩니다. 그러면 이제 카드를 클릭해서 이동 했을 때, 해당 카드의 정보를 가져와 페이지에 보이게 해봅시다.\r\n\r\ndetail 내부는 movie 카드 구조와 style을 가져와서 사용하겠습니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-17.jpg\" alt=\"\">\r\n<figcaption>Detail Component return 구조와 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n인덱스 페이지에서 카드를 클릭하면 detail페이지로 잘 넘어가고 안의 내용도 잘 나옵니다. 그런데 movie-detail 페이지에서 새로고침을 하면 에러가 발생합니다. 왜냐하면 render()가 먼저 작동하고 componentDidMount()가 작동한다는 것 기억할 것 입니다.  \r\n\r\nrender() 함수가 실행됐을때 넘어오는 location이 없기 때문에 componentDidMount() 함수가 실행되기 전에 오류가 발생하는 것 입니다. 그래서 우리는 render() 함수에서 체크를 한번 해주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-18.jpg\" alt=\"\">\r\n<figcaption>render() 함수에서 location 체크</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 코드를 보면 if(location.state)이면 detail을 return 하고, 아니면 null을 반환한다고 했습니다. 만약 null을 반환한다면 위의 componentDidMount() 함수가 인덱스 페이지로 이동시키겠죠?\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-20.gif\" alt=\"\">\r\n<figcaption>movie-detail 페이지로 페이지 이동했을 때 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 영상을 확인해보면 직접적으로 페이지 이동을 했더니 인덱스 페이지로 이동하는 것을 확인할 수 있습니다.  \r\n우리는 Link와 Router를 통해 주어진 props를 이용하여 정보를 공유하는 방식을 알아보았습니다. \r\n\r\n---\r\n\r\n## 6.5 Conclusions\r\n\r\nMovie App에서 우리가 about페이지를 갔다가 home으로 이동하면 다시 로딩됩니다. 이 현상은 home에 state가 갇혀 있기 때문입니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-19.jpg\" alt=\"\">\r\n<figcaption>Home Component에 state</figcaption>\r\n</figure>\r\n</center>\r\n\r\n말 그대로 여러분이 about페이지를 갔다가 home으로 돌아온다면 state는 다시 비어있을것 입니다. 그럼 데이터를 다시 불러와야 합니다.  \r\n이런 현상을 고치고 싶다면 여러분은 Redux를 사용해야 합니다. Redux는 state를 스크린 밖에 있도록 도와줍니다. Redux는 무비리스트를 다른 곳에 저장했다가 여러분이 home으로 돌아와도 좀 더 빠르게 노출시켜 줄 수 있습니다. 다시 로딩창을 볼 필요가 없죠.\r\n\r\n---\r\n\r\n## Done!! Movie App Completion! \r\n\r\nReact의 개념을 다시 한번 다져보는 시간이였다! 위 코드들 활용하면 더 재밌는거 많이 만들수 있을 듯! 노마드 강의 ㅅㅅㅅㅅㅅㅅㅌㅊ!!\r\n\r\n> [필자의 Movie App 링크](https://hjban-dev.github.io/nomad_movie_app/#/)\r\n"},"id":"f63d4df2-7c7b-550a-8066-1ecda08fb1aa"}},{"node":{"frontmatter":{"title":"Movie App ReactJS Routing Bonus 2","category":"React"},"fields":{"slug":"2020-01-30-react-nomad_react6_2"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 6 Routing Bonus\r\n\r\n## 6.2 Building the Navigation\r\n\r\n이번엔 Navigation Component를 만들고 모든 페이지의 상단에 떠있게 만들어봅시다.  \r\nroutes폴더에 Navigation.js를 만들고 Home과 About 두 개의 메뉴를 가진 div를 return하는 function Component를 만들겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-8.jpg\" alt=\"\">\r\n<figcaption>function Component로 구성된 Navigation.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 코드를 실행해보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-19.gif\" alt=\"\">\r\n<figcaption>페이지가 새로고침되어 이동되는 모습</figcaption>\r\n</figure>\r\n</center>\r\n\r\n상단에 링크의 파비콘이 새로고침 되는게 보이시죠?  \r\n\r\n위 현상은 React는 페이지가 이동할 때 다운되고, 링크가 이동된 후에 다시 실행되는 것입니다. 하지만 우리는 React로 만든 SPA페이지에서 그런 현상을 원하지 않습니다.  \r\n그래서 우리는 a 태그의 href가 아니라 'react-router-dom'을 이용한 `Link`를 사용할겁니다.\r\n\r\n'react-router-dom'에서 Link를 import 해오고, a 태그를 전부 Link로 변경하고, href속성은 to로 변경해주겠습니다.  \r\n\r\n왜? 라고 물으신다면 아래 링크를 확인해보시면 됩니다. 그냥 'react-router-dom'의 문법입니다!\r\n\r\n> [react-router의 공식페이지 구성요소 링크](https://reacttraining.com/react-router/web/guides/primary-components)\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-9.jpg\" alt=\"\">\r\n<figcaption>a태그를 Link로 변경한 Navigation.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\n다시 한번 코드를 실행해보겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-16.gif\" alt=\"\">\r\n<figcaption>a태그를 Link로 변경한 Navigation.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이번에도 상단 파비콘과 url쪽을 살펴보면 페이지는 새로고침되지 않고 url과 뷰 페이지만 변경되는게 보입니다. 속도도 매우 빠르고, 새로고침 없이 React를 다운시키지도 않았습니다.  \r\n\r\n참고로 여러분은 **Router밖에선 Link를 사용할 수 없습니다**.  \r\n만약 여러분이 바뀌지 않을 부분, 예를 들면 footer Component 같은 부분은 Router 밖에 넣어도 되지만, Link를 사용하기 위해선 Router내부에서 실행되야 합니다.\r\n\r\n------\r\n\r\n## 6.3 Sharing Props Between Routes\r\n\r\n네비게이션은 만들었고, 이제 movie를 클릭하면 movie에 대한 정보가 나오는 detail 페이지를 만들어봅시다.  \r\n\r\n그러면 우리는 <u>카드를 클릭 했을때 그 movie에 대한 정보</u>를 받아와야겠죠?\r\n\r\n아시다 시피 모든 Component에는 props를 넣을 수 있습니다. 우리는 이전에 만들었던 단순 태그들을 return하는 Detail Component에 <u>props를 넣고 console로 props를 확인</u>해봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-12.jpg\" alt=\"\">\r\n<figcaption>movie-detail Component에서 props확인하기</figcaption>\r\n</figure>\r\n</center>\r\n\r\nrouter안에 들어있는 모든 route들은 react-router가 주는 props를 가지고,  \r\nhistory, location, match, staticContext 4가지의 props가 react-router에 의해 넣어진 props들 입니다.  \r\n이 props가 각각 무엇인지는 지금은 몰라도 됩니다.\r\n\r\n\r\n> [react-router-dom의 공식문서의 Link 페이지](https://reacttraining.com/react-router/web/api/Link)\r\n\r\n그 props를 활용하기 전에 위 링크를 확인해보면 우리는 to의 속성 부분을 객체로 변경할 수 있는 것을 확인 할 수 있습니다.  \r\n\r\n우리의 경우는 pathname과 state를 정의해주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-10.jpg\" alt=\"\">\r\n<figcaption>pathname과 state를 정의한 Navigation Component와 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nHome에서 Navigation을 통해 movie-detail 페이지로 들어올 때, **state를 전달하고 있는 것을 확인** 할 수 있습니다.  \r\n위의 확인으로 `우리는 props를 전달하고 전달 받을 수 있다는 것`을 알았습니다!  \r\nprops를 movie-detail화면으로 가져올 수도 있다는 말입니다!  \r\n\r\n이제 우리는 movie를 클릭하면 movie-detail 페이지로 이동하게 하고, 그 movie의 데이터를 movie-detail 페이지로 보낼 수 있겠죠?\r\n\r\n먼저 Movie 카드 각각을 만들어주는 Movie Component에 가서 각 카드를 감싸는 태그를 Link로 감싸주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-13.jpg\" alt=\"\">\r\n<figcaption>pathname과 state를 정의한 Navigation Component와 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n'react-router-dom'의 Link를 사용하여 movie태그를 감싸주었고, state로 Movie Component의 props들을 전송하였습니다.  \r\n\r\n이제 movie 카드를 클릭하면 React router는 User를 /movie-detail로 데려가고 Detail Component를 보여주면서 전달받은 props를 확인시켜줍니다. Movie Component가 Detail Component로 정보를 보내고 있는 것 입니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-11.jpg\" alt=\"\">\r\n<figcaption>다른 카드를 선택 했을 때의 console 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nstate의 값이 각각 다른게 확인됩니다!\r\n"},"id":"6c96bac8-3712-5ca9-9637-6e5db02055f5"}},{"node":{"frontmatter":{"title":"Movie App ReactJS Routing Bonus 1","category":"React"},"fields":{"slug":"2020-01-29-react-nomad_react6_1"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 6 Routing Bonus\r\n\r\n## 6.0 Getting Ready for the Router\r\n\r\n이번엔 완성했던 Movie App에 조금 더 인터랙션을 추가하고, 상단에 메뉴를 추가해봅시다.\r\n\r\n한번쯤 들어보셨던 얘기겠지만, React는 `SPA`(Single Page Applicatoin)입니다. 페이지가 하나인 어플리케이션이라는 말 입니다. 자, 다시 생각해보면 페이지가 하나이기 때문에 페이지 이동이 불가능 하겠죠? 하지만 이럴 때 **일반 웹 사이트처럼 URL에 따른 페이지 이동을 할 수 있게 하는 것이 Router** 입니다.  \r\n\r\n그리고 우리는 react-router-dom 라이브러리를 사용하겠습니다. 참고로 react-router는 공식 라이브러리는 아닙니다. 하지만 React 사용자들에게 가장 많이 사용되고 있습니다. 만약 여러분이 React로 어플리케이션을 만든다면 react-router는 필수 일 것입니다.  \r\n\r\n> [react-router의 공식페이지 링크](https://reacttraining.com/react-router/web/guides/quick-start)\r\n\r\n설치는 터미널 창에 npm install react-router-dom 입력으로 가능합니다.  \r\n\r\n그리고 우리가 만들었던 Movie App의 폴더를 정리하겠습니다. 모든 파일들이 전부 들어가 있던 src폴더를 routes폴더와 components폴더를 생성하여 각각의 기능에 따라 구분하겠습니다.  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-2.jpg\" alt=\"\">\r\n<figcaption>src폴더의 파일 구조(동영상 캡쳐)</figcaption>\r\n</figure>\r\n</center>\r\n\r\n우리는 **두 개의 route**를 생성할 것이고, 하나는 현재 노출되고 있는 영화리스트 페이지인 home과 다른 하나는 영화 각각의 about 페이지를 만들겠습니다.  \r\n\r\n기존의 App.js에 있는 부분을 전부 Home.js 내부에 옮겨 새 route로 만들고, App.js에서는 react-router-dom을 사용하여 요청에 맞는 컴포넌트를 매칭시키겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-1.jpg\" alt=\"\">\r\n<figcaption>기존의 App.js를 전부 Home.js에 옮긴 후 이름 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\nComponent의 이름과 import 파일의 경로를 변경했고, 기존의 App.scss를 Home.scss로 파일명을 바꿨습니다.  \r\n\r\n그리고 기존의 App.js는 다 지우고, 단순한 function Component 하나만 만들어두겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-3.jpg\" alt=\"\">\r\n<figcaption>function Component로 구성된 App.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\n자 위에서 말했듯이, 일반 웹 사이트처럼 URL에 따른 페이지 이동을 할 수 있게 하는 것이 Router 라고 했죠? 우린 React에게 Home과 About Component 둘 다 줄 것이고, 페이지 이동 명령을 받아 알맞은 Component를 반환하게 할 것 입니다.  \r\n다음 장에서 Router를 알아봅시다.\r\n\r\n---\r\n\r\n## 6.1 Building the Router\r\n\r\n우리는 App.js에 Router를 반환하게 만들겁니다. \r\n위 이미지를 참고하면 지금의 React는 선택할 필요 없이 무조건 <div>Something</div>를 Return하고 있습니다.\r\n\r\n또 다시 한번 설명하자면, Router가 하는 일은 현재의 url을 확인하고, 그에 맞는 Component를 반환합니다.\r\n\r\n> [react-router의 공식페이지 링크](https://reacttraining.com/react-router/web/guides/quick-start)\r\n\r\nreact-router-dom에는 여러 router가 있는데 우리는 그 중 HashRouter와 Route를 사용할 겁니다. 두 router를 'react-router-dom'에서 import 해오고, HashRouter를 return 해주겠습니다.  \r\n그리고 HashRouter안에 Route를 넣어주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-4.jpg\" alt=\"\">\r\n<figcaption>HashRouter와 Route로 구성된 App.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그리고 Route안에는 매우 중요한 props가 들어가야 합니다.. 하나는 **렌더링할 경로**이고, 다른 하나는 **prop이 무엇을 불러올지** 정해주면 됩니다.\r\n\r\n우리는 <u>사용자가 /about 을 들어온다면 about Component를 return하게 할겁니다</u>.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-5.jpg\" alt=\"\">\r\n<figcaption>about Component를 return하는 App.js와 About.js의 구성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-6.jpg\" alt=\"\">\r\n<figcaption>/about 경로에서 About Component를 return하는 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 경로에서 hash(#)는 HashRouter를 사용해서 나오는 결과로 보이니 지금 신경쓰지 않기로 합시다.  \r\n\r\n위 결과에서 알 수 있는 것은 우리는 **경로에 따라 나오는 뷰 페이지를 변경할 수 있다**는 뜻입니다. 이번에는 인덱스 페이지에선 Home Component를 return 하게 해봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_6-7.jpg\" alt=\"\">\r\n<figcaption>path를 인덱스로 가지는 Route추가</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그런데 위 코드를 보시면 **exact={true}**라는 부분이 추가 되었습니다. 저 속성의 의미는 정확히 인덱스 페이지에서만 작용한다는 뜻입니다. 저 속성이 없으면 사용자가 가는 모든 경로에 Home Component가 return 될 것 입니다.\r\n\r\n이제 우리는 \r\n\r\n1. http://localhost:3000/#/ \r\n2. http://localhost:3000/#/about \r\n\r\n두 개의 각각 다른 Compenent를 return하는 두 페이지를 만들었습니다.\r\n"},"id":"be30003d-ec75-5bed-8dbe-48d117f90f78"}},{"node":{"frontmatter":{"title":"Movie App ReactJS Conclusions","category":"React"},"fields":{"slug":"2020-01-28-react-nomad_react5_1"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 5 Conclusions\r\n\r\n## 5.0 Deploying to Github Pages\r\n\r\n자, 이제 우리가 만든 코드를 cloud에 올려봅시다. 먼저 gh-pages를 설치해야 합니다. \r\n\r\ngh-pages 모듈은 만든 코드를 github page 도메인에 파일을 게시해줍니다. 쉽게 말하면 github로 구성된 웹 사이트입니다. 여러분들이 html, css, javascript 등으로 **올린 파일로 구성된 웹 사이트를 제공**해줍니다!!✦‿✦  \r\n\r\n> [gh-pages 공식 사이트 링크](https://www.npmjs.com/package/gh-pages)  \r\n\r\n실행 방법은 진행중인 폴더의 터미널 창에서 `npm i gh-pages`를 실행하고 package.json에서 설치가 되었는지 확인합니다.  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-18.jpg\" alt=\"\">\r\n<figcaption>package.json에서 gh-pages 설치 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n설치 확인을 했으면 우리는 homepage 속성을 추가해야 합니다.  \r\n\r\ngh-pages는 일반적으로 **github**에서 여러분의 **project이름**을 가져오는 식으로 실행됩니다. 우리 첫 장에서 craete-reate-app을 설치하면서 github에 repository를 생성했었죠? 필자의 경우는 해당 repository이름을 nomad_movie_app로 만들었습니다.  \r\n\r\n> [필자의 nomad_movie_app repository](https://github.com/hjban-dev/nomad_movie_app)  \r\n\r\nhomepage 속성은 gh-pages가 동작하기 위한 필수 동작이고, 값은  \r\n`https://{your github username}.github.io/{the name of your project}`   \r\n입니다. 또한 조건으로 **무조건 소문자**만 가능하고, **띄어쓰기는 할 수 없습니다**.  \r\n필자의 경우는 <u>\"homepage\"</u> : <u>\"https://hjban-dev.github.io/nomad_movie_app/\"</u> 입니다.  \r\n\r\n그 다음 단계는 명령어 2개를 추가해야 합니다.  \r\npackage.json의 script부분에 deploy라는 명령어를 추가하여 주겠습니다. deploy 명령어가 하는 일은 gh-pages를 호출하는 일입니다.  \r\n\r\n따라서 script내부에 **\"deploy\" : \"gh-pages\"**로 명령어 생성 후 터미널에서 npm run build를 실행해보겠습니다. 그런데 갑자기 왜 npm run build라는 명령어를 사용할까요?\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-20.jpg\" alt=\"\">\r\n<figcaption>gh-pages를 설치한 후에 터미널 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n좀 전에 gh-pages를 설치한 후에 결과 입니다. 제일 아래에 있는 문장을 읽어보면, develoment build가 만들어있지 않습니다. production build를 하고 싶으면 npm run build를 하라고 합니다.  \r\n\r\nnpm run build 명령의 의미는 **build폴더에 프로덕션 용 앱을 컴파일하는 것** 입니다. 쉽게 말해 우리가 지금껏 만든 코드로 압축한 build라는 폴더를 생성합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-19.jpg\" alt=\"\">\r\n<figcaption>npm run build 명령 후 터미널 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nCompile이 성공적으로 되었다고 합니다. 실제로 movie_app 폴더 내부에 build라는 폴더가 생성된 것을 확인 할 수 있습니다. 내부엔 맨 처음에 설치했던 create-react-app의 정보와 우리가 만들었던 Movie Component정보들이 압축되어 생성되었습니다.\r\n\r\n우리는 이 폴더를 gh-pages에 업로드 할 것 입니다. 기존의 **\"deploy\" : \"gh-pages\"**명령을 **\"deploy\" : \"gh-pages -d build\"**로 변경해줍니다.   \r\n-d 뒤에 build 부분은 생성된 폴더 명과 같게 해주어야 합니다.\r\n\r\n그리고 위의 터미널 결과 이미지를 살펴보면 중간쯤에 <u>Add the following script in your package.json</u>이라고 쓰여있습니다. npm이 하라는대로 script내부에 **\"predeploy\": \"npm run build\"**를 작성해주겠습니다.  \r\n\r\npredeloy은 'deploy 실행 전' 이라는 의미입니다. 우리가 deploy를 실행할 때 마다 똑똑한 npm은 predeploy를 먼저 실행할 것 입니다. predeploy는 npm run build을 실행 할 것이고, build는 build script를 실행합니다. script는 build라는 폴더를 여러분에게 줄 것이고, 그렇게 되면 predeploy는 끝이 납니다. 그 후엔 deploy가 실행될 것이고, deploy는 gh-pages를 호출하고 build폴더를 업로드 할 것 입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-21.jpg\" alt=\"\">\r\n<figcaption>package.json의 script 부분</figcaption>\r\n</figure>\r\n</center>\r\n\r\n자 위의 터미널 결과의 하단에 쓰여있는 npm run deploy를 실행하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-22.jpg\" alt=\"\">\r\n<figcaption>npm run deploy 명령 후 터미널 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위에서 말했듯이 deploy는 기본적으로 predeploy를 호출하고, run build로 모든 파일이 컴파일됩니다. 그리고 https://hjban-dev.github.io/nomad_movie_app/ 에 build폴더가 publish 되었습니다.\r\n\r\n\r\n> [필자의 movie_app 링크](https://hjban-dev.github.io/nomad_movie_app/)\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-23.jpg\" alt=\"\">\r\n<figcaption>링크확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이제 위 링크에서 Movie App이 잘 실행되는 것을 확인할 수 있습니다!  \r\n너무나도 싱기방기...\r\n\r\n----\r\n\r\n## 5.1 Are we done?\r\n\r\n이제 Movie App은 끝났습니다! 알아야 할 것은 여러분은 더 이상 state를 갖기 위해 class component를 가질 필요는 없다는 것 입니다! 왜냐하면 React hook이라는 것이 있기 때문입니다.  \r\n\r\n하지만 그렇다고 지금 배운 것들이 오래된 것은 아닙니다. React hook은 대체물이 아니라 새로운 것 입니다. 일을 하는 다른 방식인것 입니다!  \r\n\r\n필자는 Movie App 강의가 끝나면 React hook 강의도...들..어봐야..겠슴미다..ㅎㅎ\r\n"},"id":"1073fd27-a783-56c5-96da-2e03d3483c79"}},{"node":{"frontmatter":{"title":"level 1-31. 문자열 내 마음대로 정렬하기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-27-level1-31-text_array"},"internal":{"content":"\r\n# level 1. 문자열 내 마음대로 정렬하기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12915>\r\n\r\n## 문제\r\n\r\n```\r\n문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [\"sun\", \"bed\", \"car\"]이고 n이 1이면 각 단어의 인덱스 1의 문자 \"u\", \"e\", \"a\"로 strings를 정렬합니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n- strings는 길이 1 이상, 50이하인 배열입니다.\r\n- strings의 원소는 소문자 알파벳으로 이루어져 있습니다.\r\n- strings의 원소는 길이 1 이상, 100이하인 문자열입니다.\r\n- 모든 strings의 원소의 길이는 n보다 큽니다.\r\n- 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 - 문자열이 앞쪽에 위치합니다.\r\n\r\n#### 입출력 예\r\n\r\nstring | n   | return  |\r\n--- | ------- |------- |\r\n[\"sun\", \"bed\", \"car\"]  | 1 | \t[\"car\", \"bed\", \"sun\"]\r\n[\"abce\", \"abcd\", \"cdx\"]  | 2 | \t[\"abcd\", \"abce\", \"cdx\"]\r\n\r\n***\r\n\r\n입출력 예 설명\r\n\r\n1. sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [\"car\", \"bed\", \"sun\"] 입니다.\r\n\r\n1. abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다. abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [\"abcd\", \"abce\", \"cdx\"] 입니다.\r\n\r\n## 내가 한 풀이\r\n\r\n```javascript\r\nfunction solution(strings, n) {\r\n  var new_arr = strings.map(function(curr, idx){\r\n  \treturn curr[n]+curr\r\n  })\r\n  var answer = new_arr.sort().map(function(a){\r\n  \treturn a.slice(1, a.length)\r\n  })\r\n\r\n  return answer;\r\n}\r\n```\r\n들어오는 strings의 n번째 string을 텍스트의 맨 앞에 붙인 새 배열 new_arr을 만들고, 그 new_arr을 sort()로 정렬한 후 붙였던 첫번째 string을 slice()로 자른 배열 answer를 return 했다.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n\r\n```javascript\r\nfunction solution(strings, n) {\r\n  return strings.sort((s1, s2) => s1[n] === s2[n] ? s1.localeCompare(s2) : s1[n].localeCompare(s2[n]));\r\n}\r\n```\r\nㅎ..너무 간결해서 할 말이 없다.  \r\n위 코드...짧지만 분석이 은근히 안되서 보니까 localeCompare() 내장 메소드를 몰랐다. 문자열을 구분해주는 메소드이다.  \r\n짧게 쓴 풀이들이 다 localeCompare() 메소드를 사용해서 굳이 다른 풀이 안가져오고, localeCompare()만 정리하자..\r\n\r\n* localeCompare() : 주어진 문자열의 앞 또는 뒤에 오거나 같은지 여부를 나타내는 숫자를 정렬 순서로 리턴합니다.  \r\n  두 문자열을 비교하여 일치하면 0, 다르면 -1, 인자값이 원본문자열의 일부분이면 1을 리턴\r\n\r\n## 배운점\r\n\r\n처음엔 객체 형식의 배열을 생각했다가, 어렵게 가지 말자 생각하고 텍스트를 붙였다. 하지만 마음에 들지 않는 풀이이다...언제쯤 내 코드가 마음에 들지...원...  \r\n리팩토링을 해도 점수가 바뀌지 않으니 아쉬운 마음만 든다.  \r\n그리고 문제가 도중에 바뀌었는지 다른사람의 풀이가 실행 되지 않아서 당황스러웠다.\r\n"},"id":"309aeb0f-2ef4-5aee-930b-b61df773e146"}},{"node":{"frontmatter":{"title":"level 1-30. 모의고사 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-24-level1-30-mock_test"},"internal":{"content":"\r\n# level 1. 모의고사\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/42840>\r\n\r\n## 문제\r\n\r\n```\r\n수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.\r\n\r\n1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...\r\n2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...\r\n3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...\r\n\r\n1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- 시험은 최대 10,000 문제로 구성되어있습니다.\r\n- 문제의 정답은 1, 2, 3, 4, 5중 하나입니다.\r\n- 가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.\r\n\r\n#### 입출력 예\r\n\r\nanswers   | return  |\r\n--- | ------- |\r\n[1,2,3,4,5]  | [1] |\r\n[1,3,2,4,2]   | [1,2,3] |\r\n\r\n***\r\n\r\n입출력 예 설명\r\n\r\n1. 가장 문제를 많이 맞힌 사람은 수포자 1입니다.\r\n    -  수포자 1은 모든 문제를 맞혔습니다.\r\n    -  수포자 2는 모든 문제를 틀렸습니다.\r\n    -  수포자 3은 모든 문제를 틀렸습니다.  \r\n\r\n1. 모든 사람이 2문제씩을 맞췄습니다.\r\n\r\n## 내가 한 풀이\r\n\r\n```javascript\r\nfunction solution(answers) {\r\n  var answer = [];\r\n  var peoples = [[1, 2, 3, 4, 5], [2, 1, 2, 3, 2, 4, 2, 5], [3, 3, 1, 1, 2, 2, 4, 4, 5, 5]]\r\n  var score = [0, 0, 0]\r\n\r\n  peoples.map(function(a,b){\r\n    for(var i =0; i<answers.length; i++ ){\r\n      if(answers[i] == peoples[b][i % peoples[b].length]){\r\n        score[b] += 1;\r\n      }\r\n    }\r\n  })\r\n\r\n  score.map(function(a,b){\r\n    if(a == Math.max(...score)){\r\n      answer.push(b+1)\r\n    }\r\n  })\r\n\r\n  return answer;\r\n}\r\n}\r\n```\r\n\r\n흠 은근히 까다로운 문제였다.  \r\npeoples라는 변수에 수포자들의 찍는 흐름을 넣는 배열을 만들었고, peoples 자체를 map()메소드로 반복문 돌렸다. 수포자 각각을 for문으로 answer의 개수만큼 반복하여 맞는 점수가 나오면 score에 +1점을 주면서 score배열을 완성시켰다.  \r\n그리고 나온 결과 score를 다시 map()메서드로 반복했다. 다시 보니까 반복문이 3개나 있다. 흠...반성..  \r\nscore의 최댓값이 a와 같다면 answer배열에 push.  \r\n  \r\n다시보니 마음 아픈 코드...네...^^;  \r\n채점할 때 걸린 시간이 4ms 대가 나온 이유가 있었..ㅎ...\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n\r\n```javascript\r\nfunction solution(answers) {\r\n  var answer = [];\r\n  var a1 = [1, 2, 3, 4, 5];\r\n  var a2 = [2, 1, 2, 3, 2, 4, 2, 5]\r\n  var a3 = [ 3, 3, 1, 1, 2, 2, 4, 4, 5, 5];\r\n\r\n  var a1c = answers.filter((a,i)=> a === a1[i%a1.length]).length;\r\n  var a2c = answers.filter((a,i)=> a === a2[i%a2.length]).length;\r\n  var a3c = answers.filter((a,i)=> a === a3[i%a3.length]).length;\r\n  var max = Math.max(a1c,a2c,a3c);\r\n\r\n  if (a1c === max) {answer.push(1)};\r\n  if (a2c === max) {answer.push(2)};\r\n  if (a3c === max) {answer.push(3)};\r\n\r\n  return answer;\r\n}\r\n```\r\n\r\n나는 다른 사람들의 코드도 테스트를 해보는데 이 코드가 통과 속도가 제일 빨랐다. 인정하고 싶지 않지만..  \r\n흠...어쩌면 나는 초심으로 돌아가야 할지도..?  \r\n위 코드는 굳이 분석 할 필요 없어보인다. 가독성이 아주 좋다.  \r\n\r\n## 배운점\r\n\r\n저번 포스팅 최대공약수, 최소공배수에서는 다른 사람의 풀이를 보고 한참이나 이해 못하면서 아직 멀었나 내가 더 분발해야 하나 싶었지만, 이번 포스팅의 다른 사람의 풀이는...흠...나를 되돌아보게 하는 코드였다.  \r\n무조건 간결하고 짧게가 아닐 때도 있네..ㅎ.. \r\n"},"id":"3f025e95-5038-54b3-b7a3-c177ed1d783c"}},{"node":{"frontmatter":{"title":"Movie App ReactJS Making the Movie App 2","category":"React"},"fields":{"slug":"2020-01-23-react-nomad_react4_2"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 4 Making the Movie App\r\n\r\n## 4.2 Styling the Movies\r\n\r\n전 장에서 Component를 불러와 노출시키는 것까지 진행했으니, 이번엔 불러온 Component에 스타일을 적용해봅시다. \r\n\r\nstyle을 적용하기 전에 각각의 태그에 클래스를 넣어주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-10.jpg\" alt=\"\">\r\n<figcaption>태그와 클래스로 정리한 App Component</figcaption>\r\n</figure>\r\n</center>\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-11.jpg\" alt=\"\">\r\n<figcaption>태그와 클래스로 정리한 Movie.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이전 장에 있던 id값은 사용하지 않아서 지워줬습니다. 필자가 **class=\"container\"**속성을 줬는데 사실 **className=\"container\"**으로 사용해야 합니다.  \r\nReact의 Component안에 class속성을 줄 땐 `className`이라고 지정해주어야 합니다.  \r\n왜냐하면 React가 선언하는 class인지 속성의 class인지 확인하지 못하기 때문입니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-12.jpg\" alt=\"\">\r\n<figcaption>실행되는 화면</figcaption>\r\n</figure>\r\n</center>\r\n\r\n아름다운 구조와 멋진 클래스로 구성이 되었다면 이번엔 SCSS를 사용해서 style속성을 지정하겠습니다.\r\n\r\nReact에서도 html처럼 내부에 인라인으로 스타일을 지정해줄수도 있습니다. 그럴땐 중괄호를 두번 묶어주고, 속성을 Camelcase로 사용해주면 됩니다. 하지만 이 방법은 안쓰는게 좋습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-14.jpg\" alt=\"\">\r\n<figcaption>React에서 인라인으로 스타일 지정</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## 4.3 Adding Genres\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-15.jpg\" alt=\"\">\r\n<figcaption>list_movies.json파일을 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n가져온 list_movies.json파일을 확인해보았더니 genres의 부분이 배열로 되어 있습니다. Movie Component에 prop로 genres를 전달하고, 전에 배웠던 map() 메소드로 genres를 활용하여 movie안에 list로 넣어봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-16.jpg\" alt=\"\">\r\n<figcaption>genre를 추가한 코드 구성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n먼저 App.js의 Movie Component에 prop로 genres를 추가하였고,  \r\nMovie.js에서 ul안의 li에 넘어온 genre 각각의 요소를 넣어주었습니다. 그리고 propTypes 검사를 통해서 genre가 string 형태인지 확인도 하였습니다.\r\n\r\n## 4.4 Styles Timelapse\r\n\r\nSCSS를 사용하기 위해선 윈도우에 SCSS가 설치되어 있어야 하고, 설치가 되어 있다면 터미널 창에서 npm install node-sass로 node-sass까지 설치해주어야 합니다.\r\n\r\njs파일이 있는 동일 경로 src에 Movie.scss를 생성하고 내부 스타일을 지정해주겠습니다.\r\nscss파일도 import는 동일합니다. 확장자만 scss로 선택해주면 됩니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-13.jpg\" alt=\"\">\r\n<figcaption>실행되는 화면</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## 4.5 Cutting the summary\r\n\r\n위의 실행되는 화면 이미지를 보면 summary 부분이 영화에 따라 텍스트의 길이가 각각 다른게 보이시죠?  \r\n텍스트에 따라 movie 영역도 들쑥날쑥하니 우리는 summary의 텍스트를 최대 180글자로 잘라주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-17.jpg\" alt=\"\">\r\n<figcaption>변경한 코드와 실행되는 화면</figcaption>\r\n</figure>\r\n</center>\r\n\r\nslice() 메소드로 인덱스 0번째부터 180번째 까지 잘라주었고, 실행 창도 같은 높이 값으로 나옵니다!\r\n"},"id":"e093a4a5-24e2-58ce-a3a0-6f9cf4b9bfb1"}},{"node":{"frontmatter":{"title":"Movie App ReactJS Making the Movie App 1","category":"React"},"fields":{"slug":"2020-01-22-react-nomad_react4_1"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 4 Making the Movie App\r\n\r\n## 4.0 Fetching Movies from API\r\n\r\n**fetch**의 사전적 의미 : 가지고 오다, 불러오다  \r\n위 단어를 프로그래밍에서 사용할 땐 데이터를 가져온다는 의미로 사용할 수 있겠죠?  \r\nJavascript에서 data를 fetch하는 방법 중 하나는 fetch 입니다. 짧게 알아보고 가겠습니다.\r\n\r\n**fetch**  \r\n  : Fetch API로 부르고 javascript의 서버와의 **비동기 요청 방식**입니다. Ajax의 방식 중 하나이고, promise 방식의 기반으로 구성되어 있습니다. [공식 사이트](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\r\n\r\n대충 무슨 개념인지만 이해하고 넘어갑시다. 우리는 이번에 fetch가 아닌 axios를 사용할겁니다. fetch의 의미 자체와 Fetch API는 다르다는 것을 알려주려고 설명한 부분입니다.\r\n\r\n**axios**  \r\n   : 클라이언트 라이브러리로써, anxios 역시 **비동기 요청 방식**이고, promise 방식의 기반으로 구성되어 있습니다. GET을 사용해 데이터를 받아오는 것 뿐만 아니라 직접 POST, PUT 메소드를 써가며 데이터를 저장, 변경하는 것 까지 직접 가능합니다.  \r\n\r\n터미널에서 npm install axios로 외부 라이브러리인 anxiox를 설치합니다. \r\n설치 후에 `import axios from 'axios';`로 import해오면 이제 우리는 anxios를 사용할 수 있습니다.\r\n\r\n그전에 우리는 토렌트를 사용하여 영화를 다운 받을 수 있게 만든 YTS라는 사이트의 API를 활용하여 List Movies를 가져올겁니다. 하지만 YTS의 API 링크가 계속 변경되기 때문에 노마드코더가 복사해 둔 이전 버전의 API를 사용합시다!  \r\n사용하는 파일 : https://yts-proxy.now.sh/list_movies.json\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-1.jpg\" alt=\"\">\r\n<figcaption>JSON view를 사용한 https://yts-proxy.now.sh/list_movies.json</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지는 https://yts-proxy.now.sh/list_movies.json 페이지이고 크롬 확장 프로그램 중 JSON view를 사용하면 json형식의 파일을 보기 좋게 정렬하여 보여줍니다.\r\n\r\n우리는 Mounting 순서에서 render함수 실행 후 componentDidMount함수가 실행되는 것을 배웠죠? componentDidMount함수 안에 axios를 사용해서 list_movies.json페이지를 가져오겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-2.jpg\" alt=\"\">\r\n<figcaption>componentDidMount함수 안에 axios사용 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-3.jpg\" alt=\"\">\r\n<figcaption>위 코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n개발자 도구의 Network창에서 axios를 사용해 list_movies.json을 확인할 수 있습니다.  \r\n\r\n이제 우리는 componentDidMount함수 안에 코드를 작성하지 않고 getMovies라는 이름의 함수를 만들고 그 안에 axios.get으로 구성해줄겁니다. 그리고 componentDidMount가 실행될 때 getMovies를 실행하게 해봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-4.jpg\" alt=\"\">\r\n<figcaption>componentDidMount가 실행될 때 getMovies를 실행</figcaption>\r\n</figure>\r\n</center>\r\n\r\n하지만 axios.get()이 항상 빠르지는 않습니다. 그말은 어쩌면 인터넷 속도가 아주 느려서 가져오지 못하거나, json파일안에 텍스트가 너무 많아 문제가 생길 수도 있다는 말입니다.  \r\n그래서 우리는 javascript에게 componentDidMount함수가 끝날 때까지 약간 시간이 걸릴 수도 있고 시간이 걸린다면 천천히 실행해도 된다고 말하려고 합니다.\r\n\r\n**ASYNC**의 사전적 의미 : 비동기 통신；정보를 일정한 속도로 보낼 것을 요구하지 않는 데이터 전송 방법  \r\n\r\n함수 안에 <u>비동기통신</u>이라는 의미를 갖고 있는 단어 async를 붙여주고 axios.get() 앞에 await 키워드를 붙여주면 해당 함수와 실행 명령을 비동기로 실행하라는 명령입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-5.jpg\" alt=\"\">\r\n<figcaption>getMovies를 async(비동기)로 실행</figcaption>\r\n</figure>\r\n</center>\r\n\r\n---\r\n\r\n## 4.1 Rendering the Movies\r\n\r\n도대체 우리가 axios.get()으로 어떤걸 가져왔는지 확인해봅시다. console로 movies를 노출시켜 봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-6.jpg\" alt=\"\">\r\n<figcaption>console.log(movies) 실행</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 형식은 우리가 자주 보던 객체 형식이죠? 그 말은 우리는 data안의 data안에 movies를 뽑을 수 있다는 말입니다.\r\n\r\n<i>console.log(movies.data.data.movies)</i>로 확인 할 수 있겠지만 이 코드는 너무 깁니다. Javascript es6문법을 사용해서 짧게 만들어봅시다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-7.jpg\" alt=\"\">\r\n<figcaption>es6문법을 사용하여 변수 선언</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이제 우리는 list_movies.json의 movie list를 가져왔습니다. 이제 가져온 리스트로 무엇을 할 수 있을까요? 우리는 이 리스트를 state에 넣어서, isLoading이 false라면 이 리스트들을 페이지에 뿌려주겠습니다...!\r\n어려워 할 필요 없습니다!  \r\n**우리는 API로 movie list를 가져왔고, React가 그 리스트를 가져오면 setState()로 isLoading을 변경하면서 페이지에 리스트를 뿌려준다는 말입니다 :)**\r\n\r\n기존의 render 함수에서 isLoading이 false일 때, \"We are ready!\"를 반환 시켰었죠?  \r\n그 부분에 movies.map() 을 활용하여 리스트 각각에 Movie Component를 반환 시켜봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-8.jpg\" alt=\"\">\r\n<figcaption>배열 movies 각각에서 반환하는 Movie Component</figcaption>\r\n</figure>\r\n</center>\r\n\r\nmovies.map() 안의 코드를 살펴보면 들어오는 movie의 id, year, title, summary, medium_cover_image를 porps로 Movie Component에 전달하고 있습니다. 이미지에 써있듯이, Component에 props를 보낼 때 key prop을 가져야 한다고 해서 우리는 id값을 활용하여 key값으로 지정해주었습니다.  \r\n\r\n이제 Movie Component는 App.js와 같은 폴더인 src에 만들어줍니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-9.jpg\" alt=\"\">\r\n<figcaption>src폴더의 Movie Component 코드 구성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n먼저 React를 import해주고, Movie Component에는 state가 필요하지 않기 때문에 function Component로 만들어 주겠습니다.\r\n가져온 list_movies.json의 type을 확인해야하니 2장에서 배웠던 propTypes를 검사하도록 하겠습니다. 우리는 id, year, title, summary, poster로 구성을 할 것이고, 지금은 title만 return 하도록 하겠습니다.\r\nComponent 구성 후 export로 App.js에서 사용할 수 있게 했습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_5-10.gif\" alt=\"\">\r\n<figcaption>Movie Component가 정상적으로 노출되는 모습</figcaption>\r\n</figure>\r\n</center>\r\n\r\n저장하면 처음엔 Loading 텍스트가 뜨고 잠시 후에 movie list의 title이 노출된다.\r\n"},"id":"98790305-8d55-50bc-8e63-6454a598becd"}},{"node":{"frontmatter":{"title":"Movie App ReactJS State 2","category":"React"},"fields":{"slug":"2020-01-21-react-nomad_react3_2"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 3 State\r\n\r\n## 3.2 Component Life Cycle\r\n\r\n우리는 Component가 생성된 후 render가 실행된다고 했는데 사실 render가 실행되기 전,후로 호출되는 몇 가지 function이 있습니다. 이번 장에서는 React가 Component를 생성하고 없앨 때 진행되는 Cycle에 대해 알아봅시다.\r\n\r\nReact class Component는 render말고 더 많은 걸 갖고 있습니다. 모든 Component들은 여러종류의 Life Cycle(생명주기) method를 가집니다.  \r\n\r\n우리는 자주 쓰는 **Mounting**, **Updating**, **Unmounting** 세가지만 알아봅시다.\r\n\r\n### Life Cycle : Mounting\r\n\r\n> React 공식 홈페이지  \r\n><https://reactjs.org/docs/react-component.html#mounting> - 원글  \r\n><https://ko.reactjs.org/docs/react-component.html#mounting> - 한국어 \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-7.jpg\" alt=\"\">\r\n<figcaption>공식 사이트의 Mounting 캡쳐</figcaption>\r\n</figure>\r\n</center>\r\n\r\nLife Cycle 중 Mounting은 처음 DOM상에 삽입될 때 위 메서드의 순서대로 호출됩니다. 처음 페이지를 로드 했을 때라고 생각하면 됩니다. 확인해봅시다.\r\n\r\n우리는 굵은 글씨로 쓰여 있는 메서드만 알아볼겁니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-6.jpg\" alt=\"\">\r\n<figcaption>App Component의 Component Life Cycle 테스트</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위의 순서대로 constructor, render, componentDidMount 순으로 실행되는 것을 확인 할 수 있습니다.\r\n\r\n* constructor()는 자바스크립트에서 class 내에서 작성된 오브젝트를 작성하고 초기화하기위한 특수 메소드입니다. React에서 나온 것이 아니기에 constructor, super 부분은 Javascript를 참고 하시면 됩니다.  \r\n  W3School - <https://www.w3schools.com/jsref/jsref_constructor_class.asp>\r\n\r\n### Life Cycle : Updating\r\n\r\n> React 공식 홈페이지  \r\n><https://reactjs.org/docs/react-component.html#updating> - 원글  \r\n><https://ko.reactjs.org/docs/react-component.html#updating> - 한국어 \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-8.jpg\" alt=\"\">\r\n<figcaption>공식 사이트의 Updating 캡쳐</figcaption>\r\n</figure>\r\n</center>\r\n\r\nUpdating은 업데이트 되었을 때 실행됩니다. Add나 Minus버튼을 클릭해서 state를 변경할 때 실행된다는 것 입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-9.jpg\" alt=\"\">\r\n<figcaption>Updating 실행결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nconstructor, render, componentDidMount 실행 후 Add button을 누르니  \r\nrender, componentDidUpdate가 실행되었습니다.\r\n\r\n### Life Cycle : Unmounting\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-10.jpg\" alt=\"\">\r\n<figcaption>공식 사이트의 Unmounting 캡쳐</figcaption>\r\n</figure>\r\n</center>\r\n\r\n마지막 Unmounting은 Component가 DOM에서 제거될 때 호출됩니다. 다른 작업을 하거나 페이지를 이동하거나 할 때 호출되지만 현재 코드에선 확인 할 수 없으니 그렇다고 생각합시다.\r\n\r\n---\r\n\r\n## 3.3 Planning the Movie Component\r\n\r\n우리는 Component Life Cycle을 알게 되었습니다! 이를 활용해서 간단한 예제를 작성 해보겠습니다!\r\n\r\n전 강의에서 했던 예제는 모두 지우고, App Component의 state에 isLoading 이라는 값을 넣어주겠습니다. 그리고 javascript의 삼항연산자(ternary operator)로 isLoading이 true 이면 \"Loading\"을 반환, 그렇지 않다면 \"We are ready!\"를 반환하게 만들겠습니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-11.jpg\" alt=\"\">\r\n<figcaption>isLoading을 활용하여 텍스트를 반환하는 코드와 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n잘 노출되고 있지만, 우리는 this.state를 자꾸 쓰고 싶지 않으니 javascript의 es6문법을 활용하여 this.state를 하나의 상수로 만들어 주겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-13.jpg\" alt=\"\">\r\n<figcaption>this.state를 상수로 만든 코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\n자, 이제 우리 이전 강의에서 React Component가 Mounting 할 때, render method 다음에 componentDidMount method가 실행된다고 배웠습니다?  \r\n이번엔 render 함수가 실행 되고 나서 3초 후에 isLoading을 false로 바꾸는 코드를 작성해봅시다.\r\n\r\n우리는 componentDidMount() method를 실행 할 것이고, componentDidMount() method 안에는 Javascript 코드인 setTimeout함수를 실행하겠습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-14.jpg\" alt=\"\">\r\n<figcaption>componentDidMount()의 실행과 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nsetTimeout으로 3초후에 setState() method가 실행되고, 브라우저에서도 확인 할 수 있습니다.  \r\n우리는 위의 방법과 비슷하게 Movie App을 실행할겁니다!\r\n"},"id":"e8ea5809-ac5d-58be-b05d-f5465fee32c2"}},{"node":{"frontmatter":{"title":"Movie App ReactJS State 1","category":"React"},"fields":{"slug":"2020-01-20-react-nomad_react3_1"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 3 State\r\n\r\n## 3.0 Class Components and State\r\n\r\nstate가 중요한 이유는 보통 **동적 데이터**와 함께 작업할 때 만들어지기 때문입니다. 동적 데이터는 갑자기 생기고, 사라졌다가 다시 변경되는 데이터들을 말합니다.\r\n\r\n전에 만들었던 Food Component는 지우고, function Component 만들어져 있던 App Component를 class Component로 변경해봅시다.\r\n\r\nclass Component의 선언은 `class App extends React.Component` 입니다.  \r\n**React.Component를 기반으로 class 형태인 App Component를 만들겠다는 의미**입니다.\r\n위 선언 작업은 class Component의 필수 단계이고, 선언 후엔 React.Component의 많은 부분들을 class Component를 구현할 때 사용할 수 있습니다.  \r\n\r\n우리는 React.Component를 사용하여 App Component를 생성한다고 했고, 똑똑한 React의 특징 중 하나는 **React가 class component를 만나면 자동으로 render method 실시**한다는 것 입니다.\r\n\r\n그래서 class로 구성된 App Component는 render method를 실행할 것 입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-2.jpg\" alt=\"\">\r\n<figcaption>App Component가 render method 실행</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## 3.1 All you need to know about State\r\n\r\nrender method가 실행된다는 것을 확인했으니, state를 변경해봅시다!  \r\nclass 방식이니 this를 사용해서 변경하면 될 것 같죠? React는 Javascript언어를 사용한다고 했으니, add function과 minus function을 만들어봅시다. add function과 minus function을 만들고 그 안엔 **this.state.count**을 사용했습니다. 그리고 각각의 버튼에 함수를 연결해줍니다!  \r\n\r\nbutton은 내부에서 onClick으로 {this.add}으로 add() 호출했습니다. ()를 쓰지 않는건 즉시 호출이 아니고 클릭 할때 호출이라 ()를 쓰지 않았습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-4.jpg\" alt=\"\">\r\n<figcaption>작동하지 않는 모습</figcaption>\r\n</figure>\r\n</center>\r\n\r\n엥... •́︿•̀ ...일단 위 이미지의 Warning 텍스트를 해석하자면.  \r\nstate를 직접적으로 바꾸지 말고, setState()를 사용하세요  \r\n\r\n먼저...우리에게 무슨 문제가 있는지 확인해봅시다..!   \r\nadd 함수 내부에서 this.state.count를 변경한다. 맞게 쓴 것 같은데 실행이 안되는 이유는 무엇일까요?  \r\n\r\n흠...state는 변경 되고 있는데 render fucntion은 실행되지 않는것 같네요. 우리는 state가 변경 될 때마다 React가 render fucntion을 실행해야 된다고 생각하는데요??\r\n\r\n여기서 우리가 알아야 할 것은 React는 setState function을 호출해야 state가 변경됐다는 것을 감지합니다. 또한 변경 된 state를 보여줘야 한다고 생각하고 rerender를 실행합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-3.jpg\" alt=\"\">\r\n<figcaption>state.count를 setState로 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\n버튼을 클릭할 때 마다 render method를 잘 실행하는 것을 확인했습니다.\r\n\r\n정리하자면 Component에는 data를 넣을 공간이 있습니다. 그리고 그 데이터는 변경될 수도 있습니다. 우리는 그러한 데이터를 state라고 말합니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4-5.jpg\" alt=\"\">\r\n<figcaption>state.count를 setState로 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\nthis.state를 쓰는 방법도 좋지 않기 때문에 minus 함수안에 current라는 변수를 넣어서 current.count를 변경하는 방법으로 변경했습니다.\r\n**this.state를 변경하는 것은 좋지 않습니다.**\r\n"},"id":"99f4eda8-63db-5bf2-8735-2f98c061f647"}},{"node":{"frontmatter":{"title":"참고하고 싶은 글들","category":"Etc"},"fields":{"slug":"2020-01-20-etc-bookmark"},"internal":{"content":"\r\n* [비전공자의 프로그래밍 공부법_데이먼]  \r\n  <https://brunch.co.kr/@reinitiate/6>  \r\n* [프로그래밍 독학할때 자주 하는 실수 5가지_노마드 코더 Nomad Coders]  \r\n  <https://www.youtube.com/watch?v=FF6CF8TZIhE&feature=emb_rel_pause>\r\n  1. 공부만 하지말고 직접 프로그래밍을 하라.\r\n  2. 준비가 안되었다고 생각 말고 1 번으로 돌아가 무언가를 만들어라.\r\n  3. 초반에 무리하지 말고 매일매일 프로그래밍하는 습관을 들여라.\r\n  4. 리스트만 보며 공부하지 마라. 배움의 끝은 없다.\r\n  5. 기간을 정해서 공부하라.\r\n* [지방대 개발 비전공자가 배달의민족 리드 개발자가 되기까지_이동욱]  \r\n  <https://youtu.be/V9AGvwPmnZU>  \r\n  <https://github.com/jojoldu>\r\n\r\n---\r\n\r\n추후 종종 추가"},"id":"8b4cec8c-3890-57dd-a148-bf7b84c91dee"}},{"node":{"frontmatter":{"title":"level 1-29. 최대공약수와 최소공배수 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-18-level1-29-greatest_least"},"internal":{"content":"# level 1. 최대공약수와 최소공배수\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12940>\r\n\r\n## 문제\r\n\r\n```\r\n두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n- 두 수는 1이상 1000000이하의 자연수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| n   | m   | return  |\r\n| --- | --- | ------- |\r\n| 3   | 12  | [3, 12] |\r\n| 2   | 5   | [1, 10] |\r\n\r\n***\r\n\r\n입출력 예 설명\r\n\r\n1. 자연수 3와 12의 최대공약수는 3, 최소공배수는 12이므로 [3, 12]을 리턴해야 합니다.\r\n1. 자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.\r\n\r\n## 내가 한 풀이\r\n\r\n```javascript\r\nfunction solution(n, m) {\r\n  var answer = [];\r\n  var i = n;\r\n    \r\n  while(i > 0){\r\n    if(n%i==0 && m%i==0){ \r\n      answer[0] = i\r\n      break;\r\n    };\r\n    i--;\r\n  }\r\n\r\n  answer.push((n*m)/answer[0]);\r\n  return answer;\r\n}\r\n```\r\n\r\n처음엔 i = 0 으로 for 반복문 돌렸다가 최대 공약수는 가장 큰 수 하나만 필요할 것 같아서 while 반복문으로 변경하고 break 주었다. for 반복문보다 전체적으로 0.2ms 정도 속도가 줄었다.  \r\n\r\n변수 i는 매개변수 n, i가 0보다 크다면 반복문 실행. 반복문 안의 조건 n과 m이 모두 i로 나누어 떨어진다면 그 값은 두 수의 최대공약수. answer[0]에 i 값을 넣고 break 실행. \r\nn과 m을 곱하여 최대공약수로 나눈 값은 두 수의 최소공배수.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n\r\n```javascript\r\nfunction greatest(n, m) {return m ? greatest(m, n % m) : n;}\r\nfunction least(n, m) {return (n * m) / greatest(n, m);}\r\n\r\nfunction solution(n, m) {\r\n    return [greatest(n, m), least(n, m)];\r\n}\r\n```\r\n\r\n함수명이 길어서 보기 편하게 변경했다. 일단 solution함수로 greatest(n, m), least(n, m)를 return했고, 정황상 greatest함수는 최대공약수를 구하는 함수, least함수는 최소공배수를 구하는 함수일 것이다.  \r\n\r\ngreatest함수는 내부에서 자기 자신을 다시 호출하는 재귀함수이다. 조건은 m에 값이 있다면(m의 값이 0이 아니라면) greatest(m, n % m)를 다시 실행하고, 값이 없다면(m의 값이 0이라면) n을 return. 다시 말하면 n의 값이 0이 되기 전까지 계속 반복\r\n\r\nleast함수는 내 풀이의 접근방법과 동일\r\n\r\n```javascript\r\nfunction solution(a, b) {\r\n  var r;\r\n  for(var ab= a*b; r = a % b; a = b, b = r){}\r\n  return [b, ab/b];\r\n}\r\n```\r\n\r\n호오...이것은 도대체 무엇인가...for문이 왜 저렇게 생긴것인가...  \r\n일단 위의 코드로 거의 3일을 잡고 있었다. 가독성도 좋지 않고, 내가 아는 for문과 많이 달라서 나는 내가 모르는 for 문법이 있는 줄 알았다...  \r\n위 코드를 리뷰하자면, r이라는 변수를 두고 r을 기준으로 반복문을 돌린다. return 값은 없고 for문 내부의 r의 값이 0이 될때까지 계속 반복한다. 초기값 var ab= a*b;는 사실 반복문 자체에선 사용하지 않는다.  \r\n흠...똑똑하고 창의력 좋은 사람의 코드 같은데 모르겠다..  \r\n\r\n여기서 새로 알게 된 점은 최대공약수를 구할 때 큰 수에 다른 작은 수를 나눈 나머지가 최대공약수가 된다는 점...\r\n\r\n## 배운점\r\n\r\n코드 분석조차 오래걸렸다...진짜 아직 갈길이 멀다ㅠㅠ  \r\n기존에 알던 약수를 구하는 방법이 아니라 큰 수에 작은 수를 나눈 나머지가 최대공약수가 된다는 점.. 이건 좀 새롭다.ㅎ;\r\n심지어 이 문제는 팀원이랑 같이 풀었는데 받은 점수차이가 있었다ㅠㅠ내가 1점 더 낮았음ㅠㅠ...흠...뭐가 문제지ㅠㅠ\r\n"},"id":"55cdf46b-3fbc-5554-b47b-b4b0b51cd7fb"}},{"node":{"frontmatter":{"title":"Movie App ReactJS JSX & Props 3","category":"React"},"fields":{"slug":"2020-01-17-react-nomad_react2_3"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 JSX & Props\r\n\r\n## 2.4 Protection with PropTypes\r\n\r\n이번 장에서는 <u>prop-types</u>를 배워봅시다. <u>prop-types</u>는 Father Component가 Children Component사이에서 알맞은 정보전달이 되었는지 확인하는 라이브러리입니다. 다시 말해서 **전달 받은 props가 내가 요청한 props가 맞는지 확인**할 수 있습니다.  \r\n> npm 공식 홈페이지의 prop-types : <https://www.npmjs.com/package/prop-types>\r\n\r\n예시로 foodILike에 rating정보를 추가 해보겠습니다. rating의 의미는 없고, 많은 정보 전달을 위해 예시의 값 추가하였습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-23.jpg\" alt=\"\">\r\n<figcaption>foodILike에 rating정보 추가</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그리고 터미널 창에 가서 <u>prop-types</u>를 설치하겠습니다. 터미널 창에서 `npm i prop-types`로 설치 가능하고, 설치가 잘 되어있는지 확인은 package.json에서 할 수 있습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-21.jpg\" alt=\"\">\r\n<figcaption>package.json에서 prop-types설치 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n설치 확인을 한 후 <u>prop-types</u>을 사용하기 위해선 해당페이지에 **import**해야합니다. 상단에 React를 import한 부분 밑줄에 `import propTypes from 'prop-types'`를 추가하고, propTypes를 사용해봅시다.\r\n\r\n이제 우리는 Food Component의 props가 의도대로 전달되고 있는지 확인할 것 입니다. <u>prop-types</u>의 사용법은 아래 이미지와 같습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-24.jpg\" alt=\"\">\r\n<figcaption>import propTypes 와 propTypes의 사용</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 코드의 의미는 name prop의 type이 string이고 필수 사항인지 확인한다는 의미입니다. 위 코드로 진행했더니 페이지는 문제없이 나오지만 console창에 Warning이 생겼습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-22.jpg\" alt=\"\">\r\n<figcaption>페이지의 시각적 문제는 없지만 Waring이 있는 console</figcaption>\r\n</figure>\r\n</center>\r\n\r\nWaring을 해석하자면 rating의 type이 **number**로 제공됐지만, 우리는 **string**을 예상한다고 합니다. 우리가 예상한 자료형과 다르다는 결과를 말해준다. rating의 type확인을 string에서 number로 수정해봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-25.jpg\" alt=\"\">\r\n<figcaption>rating의 자료형이 number인지 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 코드대로 진행하면 console창에 아무 문제 없이 페이지가 로드되는 것을 확인할 수 있습니다.\r\n\r\n자료형 확인 외에도 여러 다른 방법들과 옵션들을 확인 할 수 있습니다.  \r\nReact 공식 홈페이지에서 <u>prop-types</u> 사용법 확인 가능  \r\n> <https://reactjs-kr.firebaseapp.com/docs/typechecking-with-proptypes.html>\r\n\r\n<u>prop-types</u> 사용하면 만약 여러분이 props중 하나를 실수 했을 때 페이지는 망가지겠지만 여러분은 console을 보고 무엇이 실행되지 않는지 알 수 있습니다.\r\n\r\n## 2장을 끝내며\r\n\r\n이제 여러분은 `jsx`, `props`를 배웠습니다. 다음장에선 마지막으로 남은 특징 `state`에 대해 알아봅시다. \r\n"},"id":"751dc694-ca7f-5e2e-a9bc-9ec539cae56e"}},{"node":{"frontmatter":{"title":"level 1-28. 이상한 문자 만들기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-17-level1-28-strange_text"},"internal":{"content":"# level 1. 이상한 문자 만들기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12930>\r\n\r\n## 문제\r\n\r\n```\r\n문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다. 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- 문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.\r\n- 첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다.\r\n\r\n#### 입출력 예\r\n\r\n| d                 | return            |\r\n| ----------------- | ----------------- |\r\n| \"try hello world\" | \"TrY HeLlO WoRlD\" |\r\n\r\n***\r\n\r\n입출력 예 설명\r\n\r\n1. \"try hello world\"는 세 단어 \"try\", \"hello\", \"world\"로 구성되어 있습니다. 각 단어의 짝수번째 문자를 대문자로, 홀수번째 문자를 소문자로 바꾸면 \"TrY\", \"HeLlO\", \"WoRlD\"입니다. 따라서 \"TrY HeLlO WoRlD\" 를 리턴합니다.\r\n\r\n## 내가 한 풀이\r\n\r\n```javascript\r\nfunction solution(s) {\r\n  var answer = [];\r\n\r\n  for(var i of s.split(' ')){\r\n    var text = '';\r\n    for(var j =0; j<i.length; j++){\r\n      text += (j%2) ? i[j].toLowerCase() : i[j].toUpperCase() ;\r\n    }\r\n    answer.push(text);\r\n  }\r\n    \r\n  return answer.join(' ');\r\n}\r\n```\r\n\r\n들어오는 s를 split() 메소드로 띄어쓰기를 기준으로 배열을 만들고, 그 배열안에서 반복문 실행.  \r\ni의 텍스트 길이를 찾아서 이중반복문 실행. j가 짝수이면 대문자, 홀수이면 소문자로 변경하며 answer에 push.  \r\nanswer를 join() 메소드로 각 요소 사이에 띄어쓰기를 넣고 문자열로 변환 \r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n\r\n```javascript\r\nfunction solution(s) {\r\n  return s.toUpperCase().replace(/(\\w)(\\w)/g, function(a){\r\n    return a[0].toUpperCase() + a[1].toLowerCase();\r\n  })\r\n}\r\n```\r\n\r\n흠 정규표현식에 대한 공부가 시급하다.  \r\n/(\\w)(\\w)/g : 대소문자 구분 없이 두 글자씩 선택  \r\nreplace() 메소드로 새로운 문자열로 변경하려고 했고, 첫번째 글자는 대문자, 두번째 글자는 소문자로 return\r\n\r\n```javascript\r\nfunction solution(s) {\r\n  var result = \"\";\r\n\r\n  for(var word of s.split(\" \")) {\r\n    for(var i in word) {\r\n      result += word[i][parseInt(i) % 2 == 0 ? \"toUpperCase\" : \"toLowerCase\"]();\r\n    }\r\n    result += \" \";\r\n  };\r\n\r\n  return result.slice(0, -1);\r\n}\r\n```\r\n\r\n이중반복문을 사용해서 접근하는 방식은 같지만, 'word[\"toUpperCase\"]()'의 방식으로 함수를 호출하는게 신기해서 가져왔다.\r\n\r\n\r\n## 배운점\r\n\r\n반복문을 잘못사용하면 효율성 테스트에서 자꾸 실패 결과가 나와서 이 문제도 이중반복문을 돌려야겠다고 생각이 들었을 때 걱정되서 최대한 늦게 도전한 문제이다... 코드에 따라 받는 점수가 다르다는 걸 알게 되니까 더 쉽게 도전하기가 어렵다ㅠㅠ\r\n"},"id":"72629a02-a9cf-5975-b0bd-8440b73355b9"}},{"node":{"frontmatter":{"title":"Movie App ReactJS JSX & Props 2","category":"React"},"fields":{"slug":"2020-01-16-react-nomad_react2_1"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 JSX & Props\r\n\r\n## 2.2 Dynamic Component Generation\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-11.jpg\" alt=\"\">\r\n<figcaption>Component를 통해서 정보 전달</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위 이미지는 전 장에서 만들었던 코드이고, 당연하게 효율적이지 않습니다. 보다시피 새로운 음식을 추가할 때 마다 복사 + 붙여넣기로 수정하고 있습니다. 그 이유는 새로운 음식에 대한 데이터가 우리가 갖고 있던 데이터가 아니기 때문입니다.  \r\n다시 말하면 위 코드는 <u>정적 데이터</u>를 추가 하는 방법이였습니다.\r\n\r\n이번엔 <u>동적 데이터</u>를 추가하는 방법을 알아봅시다!\r\n자, 우리는 이미 API에서 가져온 **food**라는 데이터가 있다고 가정합시다.\r\n\r\n우리는 가져온 **food**로 리스트를 뽑는 함수를 만들겁니다. 먼저 foodILike로 부르는 array를 만들고 foodILike는 **food** object의 배열이 될 것입니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-14.jpg\" alt=\"\">\r\n<figcaption>상수 foodILike 배열안에 food 데이터</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n필자가 가정하여 생성한 **food**를 foodILike에 넣은 코드입니다.  \r\n\r\nReact는 Javascript기반으로 만들어진 프레임워크입니다. 그 말은 Javascript를 사용할 수 있다는 점!   \r\n우리는 Array 메소드인 `map()`을 활용하여 foodILike라는 긴 코드의 리스트를 뽑아 볼 겁니다!\r\n\r\n* array.map( function ( **currentValue** [, index] [, arr] ), thisValue ) : map 내부의 콜백함수의 결과로 array를 만들어 반환\r\n\r\n----\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-15.jpg\" alt=\"\">\r\n<figcaption>foodILike를 map()으로 Food Component로 name props정보 전달</figcaption>\r\n</figure>\r\n</center>\r\n\r\nComponent 내부에서 `{}` 중괄호를 사용하면 Javascript코드를 사용할 수 있습니다.\r\n\r\n위 이미지의 결과를 보면 foodILike의 name으로 들어가있던 chiken, kimbap, pizza가 잘 들어가 있습니다. 이번엔 imgae 리스트도 나올수 있게 만들어봅시다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-16.jpg\" alt=\"\">\r\n<figcaption>Food Component로 picture props추가</figcaption>\r\n</figure>\r\n</center>\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-13.jpg\" alt=\"\">\r\n<figcaption>결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nFood Component는 name, picture 두 개의 props를 가지고 있는 것을 볼 수 있고, 이미지 노출도 잘 되고 있습니다.\r\n\r\n----\r\n\r\n## 2.3 .map Recap\r\n\r\n이번엔 위의 코드의 App 컴포넌트에서 arrow function으로 return하는 부분을 renderFood라는 **function**을 따로 만들어서 진행해보자. 어려워 할 것 없이, 방식은 같습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-18.jpg\" alt=\"\">\r\n<figcaption>App()을 App() + renverFood() 로 변경</figcaption>\r\n</figure>\r\n</center>\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-17.jpg\" alt=\"\">\r\n<figcaption>결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n텍스트와 이미지가 나오는 결과는 같고 <u>rendering 하는 방식을 function 호출로 변경했을 뿐이다</u>. console창에서 나오는 array가 우리의 눈엔 좀 낯설지만 기본적인 react Component이다\r\n\r\n위와 같이 함수를 호출하는 방식도 있다는 예시였고 다시 내부 arrow funciton으로 호출하는 방식으로 돌아가서, 아까부터 계속 console창에서 거슬리는 Warning을 살펴보자.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-19.jpg\" alt=\"\">\r\n<figcaption>console warning</figcaption>\r\n</figure>\r\n</center>\r\n\r\n**Warning 메세지가 각각의 list안의 child가 unique한 key prop을 가져야 한다고 말하고 있습니다.**  \r\n그 말의 의미는 React의 element들은 유일해야하고 우리가 이것들을 list안으로 집어 넣으면 그것들이 각각 유일성이 사라진다는 것 입니다.  \r\n  \r\n옹?-? 우리는 foodILike의 element들이 서로 다른 name과 다른 image를 가지고 있는 것을 알수 있지만, React는 그것을 인식하지 못합니다. 흐음... =ටᆼට= 뭔가 이상하지만 이제 우리가 할 일은 foodILike의 element에 각각의 ID를 추가해야 한다는 것 입니다.\r\n\r\n그래서 우리는 foodILike에 **id**라는 값을 넣어줄거고, 그 id를 활용하여 Food Component에 새 **prop**을 넣어 주겠습니다. 그리고 그 prop은 React가 요청하던 바로 `key`입니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-20.jpg\" alt=\"\">\r\n<figcaption>id 값과 prop key 추가</figcaption>\r\n</figure>\r\n</center>\r\n\r\n보다시피 key prop은 Food Component로 전달되지 않습니다. 사용되고 있지도 않고.  \r\nkey prop을 생성하는 이유는 단지 react내부에서 사용하기 위한 것이고, 어렵게 생각하지 말고 이건 react를 활용하는 방법인 것 뿐입니다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},"id":"34d70dcf-d8f9-5fa0-af30-0aadefaea8ec"}},{"node":{"frontmatter":{"title":"Movie App ReactJS JSX & Props 1","category":"React"},"fields":{"slug":"2020-01-14-react-nomad_react2_1"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 2 JSX & Props\r\n\r\n## 2.0 Creating your first React Component\r\n\r\n`Component` 의 사전적 의미 : (구성) 요소, 부품  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-2.jpg\" alt=\"\">\r\n<figcaption>App Component</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이전 장에서 살펴봤던 코드이긴 한데... Component가 뭐지...?  \r\n자, 어렵게 생각하지 말고 위 코드를 살펴보자. App function이 HTML 코드를 return 하고 있다.  \r\n그걸로 끝이다.  \r\n`HTML을 반환하는 함수` 그게 바로 `Component`이다. 우리는 React에서 가장 중요한 개념인 Component를 이해했다.  \r\n**React는 항상 Component와 함께 동작한다.**\r\n\r\n### 2.0.1 What is 'JSX'?\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-3.jpg\" alt=\"\">\r\n<figcaption>index.js의 구성요소</figcaption>\r\n</figure>\r\n</center>\r\n\r\n당신은 이미 React를 시작 했을 때부터 `<App />` 이라는 형식을 보았을 것이다. HTML의 닫는 태그 같지만 안에 있는 <u>App이라는 태그명은 본적이 없다</u>. 낯설지만 익숙한 저 형식이 `JSX` 이다.  \r\n  \r\n**Javascript와 HTML의 조합** 다르게 말하면 **Javascript 안의 HTML**...새로운 개념이다. JSX는 React에서 아주 특별하게 사용된고, 만약 당신이 프론트개발자가 아니라면 JSX가 당신에게 썩 도움이 되지 않을 수도 있다. (하지만 vue, angular 등에는 유용)\r\n\r\n### 2.0.1 How to Create a Component?\r\n\r\nsrc 폴더(App.js가 있는 폴더)에 Potato.js 라는 파일을 생성합니다. 보통 Component명의 첫글자는 대문자를 쓰기 때문에 헷갈리지 않게 파일명도 동일하게 작성하였습니다.  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-4.jpg\" alt=\"\">\r\n<figcaption>Pototo.js의 구성요소</figcaption>\r\n</figure>\r\n</center>\r\n\r\n위에서 배웠듯이 h3을 return하는 function Potato를 만들었습니다.  \r\n하지만 App.js에는 Component를 기준으로 위 아래에 `import`, `export` 명령문이 있었습니다.  \r\n각각의 사전적 의미를 살펴보자면 **import** 와 **export** 는 서로 반의어입니다. \r\n\r\n|        |                      |\r\n| ------ | -------------------- |\r\n| **import** | 1. 수입품 2. 수입 3. 수입하다 |\r\n| **export** | 1. 수출 2. 수출하다        |\r\n\r\n`import` React from `\"react\"` : Potato Component를 React에서 사용하겠다는 의미.  \r\n`export` default `Potato` : 다른 페이지에서 Potato Component를 사용하게 한다는 의미.\r\n\r\n비슷한 듯 다른 두 명령어는 반드시 외워둡니다.  \r\n<u>export된 무언가를 import하여 사용합니다</u>. <u>export를 하지 않으면 선언만 했을 뿐 사용할 수 없습니다.</u>\r\n\r\n### 2.0.2 Importing a Component\r\n\r\nindex.js에서 **import App from './App'** App 컴포넌트를 가져와서 \r\n```javascript\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n```\r\n로 실행하는 걸 확인했었습니다. 우리도 Potato Component를 만들었으니 삽입해봅시다!\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-5.jpg\" alt=\"\">\r\n<figcaption>index.js에 Potato Component 삽입</figcaption>\r\n</figure>\r\n</center>\r\n\r\nApp Component를 불러온 방식 그대로 Potato를 불러옵니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-6.jpg\" alt=\"\">\r\n<figcaption>index.js에 Potato Component 삽입 했을때 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n흠...ʕ • o • ʔ 작동하지 않네요? 같은 명령어로 같은 위치에 삽입했는데...  \r\n  \r\n여기서 알 수 있는 것은 **React application**은 **하나의 Component**만 **rendering가능**하다는 것 입니다. 지금은 그 유일한 Component가 <u>App Component</u> 입니다.  \r\n  \r\n그렇다면 App Component와 동일한 위치 말고, App Component안에 넣어봅시다!\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-7.jpg\" alt=\"\">\r\n<figcaption>App.js 에서 Potato 불러오기</figcaption>\r\n</figure>\r\n</center>\r\n\r\nindex.js 에서 확인했듯이 `import`로 Potato Component 불러오고, `JSX`형식으로 App() Component 내부에 불러왔다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-8.jpg\" alt=\"\">\r\n<figcaption>App.js에 Potato Component 삽입한 후 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n그러면...!! h1태그와 h3태그가 구성되어 있는 것을 확인할 수 있다. ٩(•◡•)۶\r\n  \r\n이 포스팅에서 꼭 확인해야 할 부분은 **react application은 하나의 component만 rendering 가능!**\r\n\r\n## 2.1 Reusable Components with JSX + Props\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-9.jpg\" alt=\"\">\r\n<figcaption>App.js에 Potato Component를 생성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n페이지 이동을 줄이기 위해 Potato.js 는 지우고 App.js에 Potato Component를 생성했다. 결과도 그대로 문제없음. \r\n\r\n'JSX'에 대해 두번째로 이해해야 하는 것은 `Component에 정보`를 보낼 수 있다는 것이다.  \r\n\r\n자, 우리는 Potato Component를 Food Component로 변경하고 필자가 좋아하는 음식 여러가지를 노출하려고 한다. 그럴때 Food Component를 여러번 반복해서 노출시켜야 한다고 생각하면 React를 사용하는 의미가 없다.\r\n\r\nprops를 통해서 Component에서 Component children으로 정보를 보내는 법을 배워보자! (•̀ᴗ•́) و ̑̑\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-10.jpg\" alt=\"\">\r\n<figcaption>Component를 통해서 정보 전달</figcaption>\r\n</figure>\r\n</center>\r\n\r\nhtml을 이미 알고있다면 속성을 `\"\"` 를 사용하여 보내는 것은 매우 익숙할 것이다.  \r\nFood Component에 **favorite**라는 이름의 `props`를 **potato**라는 `value`로 준 것이다. 또한 value값으로 넘길 수 있는 자료형은 string 뿐만 아니라 boolean, array, number 등으로 보낼 수 있다.\r\n\r\nfood function Component는 arguemnt(인자)로 props를 가져온다. 확인해보자.  \r\nconsole.log(props)의 결과는 {favirite : \"potato\"} 나오고 여기서 알 수 있는 점은 argument는 객체로 반환한다는 것이다.\r\n\r\n---\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-11.jpg\" alt=\"\">\r\n<figcaption>Component를 통해서 정보 전달</figcaption>\r\n</figure>\r\n</center>\r\n\r\nobject를 열어서 favorite을 꺼내려면 원래 props 였던 부분을 `{} 대괄호`로 감싸주고, props값으로 넘겨주던 favorite 값으로 바꿔준다. 위의 상황에선 {favorite}으로 변경하면 됨.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3-12.jpg\" alt=\"\">\r\n<figcaption>위 코드의 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\nprops에 대해 이해했다면, props는 반드시 father -> children Component로만 전달 가능하다는 특징도 알아야 한다.\r\n\r\n**꼭 알아야 할 부분!!**\r\n\r\n1. jsx + props 로 모두 재사용가능\r\n2. jsx -> HTML + Javascript\r\n3. Component -> 대문자로 시작 \r\n4. children으로 props통해서 argument로 정보 전달가능\r\n"},"id":"ddefa91f-366e-5122-95b2-662d97c41265"}},{"node":{"frontmatter":{"title":"Nomadcoder's ReactJS Setup","category":"React"},"fields":{"slug":"2020-01-13-react-nomad_react2"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 1 Setup\r\n\r\n## 1.0 Creating your first React App\r\n\r\ncreate-react-app 설치를 했다는 가정하에 시작합니다.  \r\n* c-r-a 설치는 이전 포스팅 참고  \r\n  <https://hjban-dev.github.io/react/2019/08/19/react-10-create-react-app/> \r\n\r\n## 1.1 Creating a Github Repository\r\n\r\ngithub에서 새 Repisitory를 생성  \r\n(React 코드를 git에 업로드 하기 위해 생성하는 과정이고, React와 git은 사실상 무관하니 생략해도 됩니다.)\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_1-1.jpg\" alt=\"\">\r\n<figcaption>github에서 새 repisitory 생성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n생성 후 movie_app 작업하던 터미널 창에서\r\n\r\n1. git init\r\n2. git remote add origin 새 Repisitory url (ex) git remote add origin https://github.com/hjban-dev/nomad_movie_app\r\n3. git add .\r\n4. git commit -m \"커밋메세지\" (ex) git commit -m \"#1.0 Creating your first React App\"\r\n5. git push origin master\r\n\r\n잠시 후에 github Repisitory 창 새로 고침 하면 movie_app 폴더 업로드 되어 있음.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_2.jpg\" alt=\"\">\r\n<figcaption>push가 완료된 git repository</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## 1.2 How does React work?\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4.jpg\" alt=\"\">\r\n<figcaption>왼쪽은 public>index.html, 오른쪽은 src>index.js 와 src>app.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\nMovie_App 폴더에 필요하지 않은 파일은 전부 지우고, app.js의 app 컴포넌트에 <strong><div>hello!!!</div></strong>를 추가하였다.  \r\n오른쪽 창을 보면 `index.js`가 `app.js`를 **import**하여 가져왔고, <strong>ReactDOM.render(<App />, document.getElementById('root'));</strong>으로 `#root`안에 넣어주는 것을 확인할 수 있다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3_1.jpg\" alt=\"\">\r\n<figcaption>페이지 소스보기 했을 때 결과. 빈 #root만 보인다.</figcaption>\r\n</figure>\r\n</center>\r\n\r\n페이지 소스에서는 보이지 않는 이유는 hello가 없는 빈 index.html 파일을 보고 있기 때문이다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3.jpg\" alt=\"\">\r\n<figcaption>react가 app.js의 컴포넌트를 #root 안에 넣어서 보여준다.</figcaption>\r\n</figure>\r\n</center>\r\n\r\nReact는 load 할 때, html을 `Virtual Dom React`을 사용하여 보여준다. 가상 돔은 React가 빠른 이유이기도 하다.\r\n"},"id":"33568a83-5120-5937-94a8-50cb64562683"}},{"node":{"frontmatter":{"title":"Movie App ReactJS Introduction, Setup","category":"React"},"fields":{"slug":"2020-01-13-react-nomad_react0-1"},"internal":{"content":"\r\n> 노마드코더의 ReactJS로 웹 서비스 만들기 수업을 듣고 정리합니다. <https://academy.nomadcoders.co/>\r\n\r\n# 0 Introduction\r\n\r\n## 0.0 Introduction\r\n\r\n2019.07 버전 강의입니다.  \r\n이 강좌에서 리액트를 사용하는 이유, 방법, API에서 데이터를 가져오는 방법 등을 배웁니다.\r\n\r\n## 0.1 Requirements\r\n\r\nnode js, npm, npx, git 필요  \r\n설치되어 있는지는 cmd 창에서 확인 가능 ex) node -v, git -v 등\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_1.jpg\" alt=\"\">\r\n<figcaption>설치가 되어 있다면 결과 값으로 버전이 나옴</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## 0.2 Theory Requirements\r\n\r\nReact를 시작하기 전에 html, css와 기본적인 js 지식을 알아야 합니다.\r\n\r\n## 0.3 Why React\r\n\r\n왜 React 인가?\r\n\r\n1. React는 페이스북이 만들었다. 그리고 회사들이 점점 React를 활용하여 사이트를 운영하고 있다.(페이스북, 에어비앤비, 넷플릭스, 슬랙... 등)\r\n2. 2020년 1월 기준 react의 주간 다운로드 수는 약 600만명 : 페이스북은 React에 많은 시간, 돈, 자원을 지원 하고 있고, React는 점점 더 많은 자원, 커뮤니티, 서포트를 얻을 수 있음.\r\n3. React는 현재 프론트엔드 사용 언어 중 압도적으로 많은 사용자\r\n4. 프레임워크와 달리, React는 Javascript로 이루어져 있어 만약 React가 사라지더라도 사용자의 Javascript 지식은 사라지지 않음.\r\n\r\n많은 회사들은 React를 사용하고 있고, React를 사용하는 더 많은 사용자들이 있습니다. 또한 너를 더 멋진 Javascript 개발자로 만들어 줄 수 있습니다.\r\n\r\n------\r\n\r\n# 1 Setup\r\n\r\n## 1.0 Creating your first React App\r\n\r\ncreate-react-app 설치를 했다는 가정하에 시작합니다.  \r\n* c-r-a 설치는 이전 포스팅 참고  \r\n  <https://hjban-dev.github.io/react/2019/08/19/react-10-create-react-app/> \r\n\r\n## 1.1 Creating a Github Repository\r\n\r\ngithub에서 새 Repisitory를 생성  \r\n(React 코드를 git에 업로드 하기 위해 생성하는 과정이고, React와 git은 사실상 무관하니 생략해도 됩니다.)\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_1-1.jpg\" alt=\"\">\r\n<figcaption>github에서 새 repisitory 생성</figcaption>\r\n</figure>\r\n</center>\r\n\r\n생성 후 movie_app 작업하던 터미널 창에서\r\n\r\n1. git init\r\n2. git remote add origin 새 Repisitory url (ex) git remote add origin https://github.com/hjban-dev/nomad_movie_app\r\n3. git add .\r\n4. git commit -m \"커밋메세지\" (ex) git commit -m \"#1.0 Creating your first React App\"\r\n5. git push origin master\r\n\r\n잠시 후에 github Repisitory 창 새로 고침 하면 movie_app 폴더 업로드 되어 있음.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_2.jpg\" alt=\"\">\r\n<figcaption>push가 완료된 git repository</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## 1.2 How does React work?\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_4.jpg\" alt=\"\">\r\n<figcaption>왼쪽은 public>index.html, 오른쪽은 src>index.js 와 src>app.js</figcaption>\r\n</figure>\r\n</center>\r\n\r\nMovie_App 폴더에 필요하지 않은 파일은 전부 지우고, app.js의 app 컴포넌트에 <strong><div>hello!!!</div></strong>를 추가하였다.  \r\n오른쪽 창을 보면 `index.js`가 `app.js`를 **import**하여 가져왔고, <strong>ReactDOM.render(<App />, document.getElementById('root'));</strong>으로 `#root`안에 넣어주는 것을 확인할 수 있다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3_1.jpg\" alt=\"\">\r\n<figcaption>페이지 소스보기 했을 때 결과. 빈 #root만 보인다.</figcaption>\r\n</figure>\r\n</center>\r\n\r\n페이지 소스에서는 보이지 않는 이유는 hello가 없는 빈 index.html 파일을 보고 있기 때문이다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/nomad_react_3.jpg\" alt=\"\">\r\n<figcaption>react가 app.js의 컴포넌트를 #root 안에 넣어서 보여준다.</figcaption>\r\n</figure>\r\n</center>\r\n\r\nReact는 load 할 때, html을 `Virtual Dom React`을 사용하여 보여준다. 가상 돔은 React가 빠른 이유이기도 하다.\r\n"},"id":"70080c49-4d1b-5c9d-ac43-338229617b84"}},{"node":{"frontmatter":{"title":"level 1-27. 예산 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-13-level1-27-budget"},"internal":{"content":"# level 1. 예산\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12982>\r\n\r\n## 문제\r\n\r\n```\r\nS사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.\r\n\r\n물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.\r\n\r\n부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.\r\n- d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.\r\n- budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| d           | budget | result |\r\n| ----------- | ------ | ------ |\r\n| [1,3,2,5,4] | 9      | 3      |\r\n| [2,2,3,3]   | 10     | 4      |\r\n\r\n***\r\n\r\n입출력 예 설명\r\n\r\n1. 각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다. 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다. 항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다. 위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다.\r\n  - 1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다.\r\n  - 1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.\r\n  - 1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.\r\n  - 1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다.\r\n\r\n2. 모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다.\r\n\r\n## 내가 한 풀이\r\n\r\n```javascript\r\nfunction solution(d, budget) {\r\n  var answer = 0;\r\n  var sum = 0;\r\n  var d_arr = d.sort((a,b)=>a-b);\r\n\r\n  d_arr.map(function(a){\r\n    sum += a;\r\n    if(sum <= budget){\r\n      answer++;\r\n    }\r\n  })\r\n\r\n  return answer;\r\n}\r\n```\r\n\r\n대충 입출력 예를 보니 예산 안에서 최대한 많은 부서한테 지원을 해줘라... 이건데 들어오는 d가 배열이니까 배열 내장 메서드 사용해야겠다고 생각. reduce() 메서드로 더하고 budget보다 크면 멈추게 하려고 했으나... 왜인지 실행은 잘 됐는데 채점에서 계속 실패했음ㅠㅠ reduce, map, filter 다 사용했는데도 며칠째 실패하다가 포기하고 다른 문제 풀고 있었는데...!!!  \r\nsort() 메서드에 비교 함수를 안썼음ㅠㅠㅠ... 갑자기 생각나서 아...! 하고 넣었더니 바로 통과..ㅠㅠ 바보ㅠㅠ  \r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n\r\n```javascript\r\nfunction solution(d, budget) {\r\n  d.sort((a, b) => a - b);\r\n  while (d.reduce((a, b) => (a + b), 0) > budget) d.pop();\r\n  return d.length;\r\n}\r\n```\r\n\r\n흡...이렇게 쓰려고 생각했었음...ㅠㅠ 짧고 굵게 훌륭하다.\r\n\r\n## 배운점\r\n\r\n네주 문제점 1. 문제가 길면 읽을 생각 안함.  \r\nㅋㅋㅋㅋㅋ그래서 이거 문제 뭔지도 모르고 풀 생각도 없고 그냥 어렵고 복잡한 거라고 생각하고 있던 중에 회사 동료가 이 문제 괜찮다고 추천해줘서 강제 도전..ㅎㅎ근데 한참 못품ㅠㅠ;\r\n"},"id":"46c891fb-f001-578d-90c3-ccbae1443f5a"}},{"node":{"frontmatter":{"title":"level 1-26. 직사각형 별찍기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-13-level1-26-rectangle_star"},"internal":{"content":"# level 1. 직사각형 별찍기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12969>\r\n\r\n## 문제\r\n\r\n```\r\n이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.\r\n별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- n과 m은 각각 1000 이하인 자연수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| data | output                        |\r\n| ---- | ----------------------------- |\r\n| 5 3  | `*****` <br/> `*****` <br/> `*****` |\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nprocess.stdin.setEncoding('utf8');\r\nprocess.stdin.on('data', data => {\r\n  const n = data.split(\" \");\r\n  const a = Number(n[0]), b = Number(n[1]);\r\n  \r\n  for(var i=0; i<b; i++){\r\n    console.log('*'.repeat(a))\r\n  }\r\n});\r\n```\r\n이 문제도 문제 자체가 어려운건 아니였는데 초기화 상태의 기본 코드가 어려워서 도전을 미뤘다. 아래 코드가 기본 가이드 코드여서 process.stdin.on() 형식이 무슨 상태인지 몰랐음.  \r\n들어오는 매개변수가 각각 변수 a,b로 작성되어 있어서 어렵지 않게 제작. a만큼 반복한 *을 b만큼 반복\r\n\r\n```javascript\r\nprocess.stdin.setEncoding('utf8');\r\nprocess.stdin.on('data', data => {\r\n  const n = data.split(\" \");\r\n  const a = Number(n[0]), b = Number(n[1]);\r\n  console.log(a);\r\n  console.log(b);\r\n});\r\n```\r\n위 코드가 초기 기본 코드\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n\r\n```javascript\r\nprocess.stdin.setEncoding('utf8');\r\nprocess.stdin.on('data', data => {\r\n  const n = data.split(\" \");\r\n  const a = Number(n[0]), b = Number(n[1]);\r\n  const star = `${'*'.repeat(a)}\\n`;\r\n\r\n  console.log(star.repeat(b));\r\n});\r\n```\r\n\r\n접근 방법은 비슷. 반복문대신 repeat()메서드를 두번 사용.\r\n\r\n## 배운점\r\n\r\n혼자 풀때는 몰랐는데 작성한 코드에 따라 받는 점수가 다른가보다ㅠㅠ 팀원이랑 비교 해봤는데 다른 점수를 받았다ㅠ효율성을 좀 더 생각하면서 코드를 작성해야겠다ㅠㅠ\r\n "},"id":"89e6b791-c3d0-5bef-a136-3030c922836e"}},{"node":{"frontmatter":{"title":"level 1-25. 정수 제곱근 판별 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-10-level1-25-number_squr"},"internal":{"content":"# level 1. 정수 제곱근 판별\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12934>\r\n\r\n## 문제\r\n\r\n```\r\n임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.\r\nn이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- n은 1이상, 50000000000000 이하인 양의 정수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| n   | answer |\r\n| --- | ------ |\r\n| 121  | 144   |\r\n| 3  | -1   |\r\n\r\n입출력 예 설명\r\n\r\n1. 121은 양의 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다.\r\n2. 3은 양의 정수의 제곱이 아니므로, -1을 리턴합니다.\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(n) {\r\n  var answer = Math.sqrt(n);\r\n  var match = (answer == parseInt(answer));\r\n  \r\n  return (match) ? Math.pow(answer+1, 2) :  -1;\r\n}\r\n```\r\n제곱근이라는 말 자체가 어려웠지, 자바스크립트 Math객체에 sqrt()메서드 사용했다. 정규표현식으로 소수점 찾고 싶었는데 한참 했는데도 안되서 ParseInt() 사용했다ㅠㅠ\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n\r\n```javascript\r\nfunction solution(n) {\r\n  return Math.sqrt(n) === parseInt(Math.sqrt(n)) ? (Math.sqrt(n) + 1) ** 2 : -1\r\n}\r\n```\r\n\r\n접근방식은 같음\r\n\r\n## 배운점\r\n\r\n난이도 쉬운 문제들은 대부분 다 풀고 이제 어려운 문제만 남아있어서 머리가 너무 복잡하다ㅠㅠ\r\n"},"id":"dbdcf26e-b90b-5040-b845-28163326e57b"}},{"node":{"frontmatter":{"title":"level 1-24. 정수 내림차순으로 배치하기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-10-level1-24-number_sort"},"internal":{"content":"# level 1. 정수 내림차순으로 배치하기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12933>\r\n\r\n## 문제\r\n\r\n```\r\n함수 solution은 정수 n을 매개변수로 입력받습니다. n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요. 예를들어 n이 118372면 873211을 리턴하면 됩니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n- n은 1이상 8000000000 이하인 자연수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| n   | answer |\r\n| --- | ------ |\r\n| 118372  | 873211   |\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(n) {\r\n  const answer = (n+'').split('').sort( (a, b) => b - a ).join('');\r\n  return parseInt(answer); \r\n}\r\n```\r\n이것도 전 포스팅인 [21.자릿수 더하기](https://hjban-dev.github.io/algorithm/2020/01/08/level1-21-sum_of_number/), [22.자연수 뒤집어 배열로 만들기](https://hjban-dev.github.io/algorithm/2020/01/08/level1-22-arr_of_number/), [23.자연수 뒤집어 배열로 만들기](https://hjban-dev.github.io/algorithm/2020/01/08/level1-23-hashad/) 랑 비슷한 문제였다. \r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(n) {\r\n  return parseInt((n+\"\").split(\"\").sort().reverse().join(\"\"));\r\n}\r\n```\r\n한글자의 숫자뿐이라 굳이 sort() 내부 함수 쓸 필요없이 sort()와 reverse() 메서드 실행.\r\n\r\n## 배운점\r\n\r\n다 21-24번이 비슷한 문제였다.\r\n"},"id":"9a756201-01b4-5c40-9b21-9bebef7a88c8"}},{"node":{"frontmatter":{"title":"구글 애널리틱스와 태그 매니저 요약","category":"Google"},"fields":{"slug":"2020-01-09-etc-06-google_tagmanager3"},"internal":{"content":"> <https://analyticsmarketing.co.kr/> 참고  \r\n> 간단하고 불친절하게 설명합니다. (기본적인 부분 설명 생략)\r\n\r\n# 울면서 공부한 구글 어쩌구 후기\r\n\r\n1. 구글 애널리틱스 : 사람들이 내 홈페이지 왜 들어왔는지 확인 가능\r\n2. 구글 태그매니저 : 어떻게 들어올때 추적할지 설정\r\n\r\n## 구글 애널리틱스 [Google Analytics]\r\n\r\n페이지 관련 모든 통계를 확인 할 수 있음.  \r\n이벤트를 설정하기에 html 파일 수정 필요 : html 지식 필요  \r\n\r\n## 구글 태그매니저[Google Tag Manager]\r\n\r\n처음 설치 후엔 html 파일 수정 할 필요 없음  \r\n구글 애널리틱스 이벤트 기능보다 더 다양하고 효율적인 이벤트 삽입 가능\r\n\r\n---\r\n\r\n관련 내용 종종 추가 예정\r\n"},"id":"c06f2aeb-62c0-5c28-b105-93a2d917978e"}},{"node":{"frontmatter":{"title":"개발자를 위한 구글 태그매니저[Google Tag Manager]의 설치","category":"Google"},"fields":{"slug":"2020-01-09-etc-05-google_tagmanager2"},"internal":{"content":"> <https://analyticsmarketing.co.kr/> 참고  \r\n> 간단하고 불친절하게 설명합니다. (기본적인 부분 설명 생략)\r\n\r\n# 구글 태그매니저[Google Tag Manager]\r\n\r\n## '구글 태그매니저' 태그 설치 과정\r\n\r\n1. 태그생성 : 추가하고자 하는 태그(이벤트) 생성 \r\n2. 트리거 지정 : 태그를 실행시키는 트리거 작성 ex) 배너를 클릭\r\n3. 테스트 : 미리보기로 테스트\r\n4. 게시 : 컨테이너 버전 생성 및 게시\r\n\r\n## '구글 태그매니저' 태그 설치\r\n\r\n왼쪽 메뉴 태그 > 새로만들기 클릭\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-tag-new-tag.jpg\" alt=\"\">\r\n<figcaption>google tag manager 태그 새로 만들기</figcaption>\r\n</figure>\r\n</center>\r\n\r\n1. 태그 이름 지정\r\n2. 태그 구성\r\n3. 트리거 지정\r\n\r\n으로 태그를 생성할 수 있다.  \r\n\r\n태그 구성할때 태그 유형, 추적 유형 등을 선택하여 원하는 방향으로 생성 가능하고 트리거도 기본으로 페이지뷰 트리거 하나가 생성되어 있지만, 왼쪽 메뉴 **트리거 > 새로만들기** 를 클릭하여 다른 유형의 트리거를 생성한 후 지정 가능하다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-tag-new-tag2.jpg\" alt=\"\">\r\n<figcaption>필자가 만든 태그</figcaption>\r\n</figure>\r\n</center>\r\n\r\n필자의 경우 트리거는 클릭 요소를 넣었고 추적유형, 카테고리, 작업 은 직접 입력하였다. \r\n생성하였다면 오른쪽 상단에 미리보기 버튼있다. 미리보기 버튼 클릭 후 연결해 둔 사이트로 이동한다.  \r\n\r\n발생한 이벤트를 ‘GA’를 통해 보고 싶다면 `GA의 유니버셜코드와 GTM을 연결`시켜야된다. 한번 연결 후엔 재연결 필요 X\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-tag-new-tag3.jpg\" alt=\"\">\r\n<figcaption>미리보기 버전의 필자 사이트</figcaption>\r\n</figure>\r\n</center>\r\n\r\n필자는 '최근 글 바로가기'에 클릭 요소를 넣어서 클릭을 하면 하단 창에 클릭 이벤트가 발생한다. 이벤트 발생이 된다면 태그가 정상 작동하는 것!  \r\n클릭하면 페이지 이동이 되기 때문에 클릭할때 `'Ctrl'`을 누르고 클릭하면 페이지 이동을 막아준다. Variables 탭에서 클릭 이벤트로 인한 변수를 확인 할 수 있다.  \r\n\r\n정상 작동을 확인했으니, 제출하여 버전을 생성하면 GA에서 실시간으로 확인이 가능하다. \r\n**이 과정에서 처음 세팅할 때 24시간이라는 시간이 필요하다.**\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-tag-view.jpg\" alt=\"\">\r\n<figcaption>미리보기 버전의 필자 사이트</figcaption>\r\n</figure>\r\n</center>\r\n\r\n확인해보니 동일 아이피 재접속은 카운팅 되지 않는 것 같고, 크롬 시크릿 모드로 들어갈땐 카운팅이 된다.\r\n너무 어려워...!!\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/images/stop2.JPG\" alt=\"\">\r\n<figcaption>살려주쇼...</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"7abfa90c-9ac7-57c8-9910-fea8369df8fc"}},{"node":{"frontmatter":{"title":"개발자를 위한 구글 태그매니저[Google Tag Manager]의 개념","category":"Google"},"fields":{"slug":"2020-01-09-etc-04-google_tagmanager1"},"internal":{"content":"> <https://analyticsmarketing.co.kr/> 참고  \r\n> 간단하고 불친절하게 설명합니다. (기본적인 부분 설명 생략)\r\n\r\n# 구글 태그매니저[Google Tag Manager]\r\n\r\n## 후... GA는 대충 알았고 구글 태그매니저는 또 뭐지?-?\r\n\r\n홈페이지를 구성하는 요소들을 태그라고 한다. 버튼 하나, 글씨 하나, 이미지 하나하나 태그들로 이루어져 있습니다. \r\n자 그렇다면 태그매니저는 말 그대로 그 태그를 관리하는 것 입니다! 그 태그를 관리하여 이벤트를 생성, 제어 등을 할 수 있는 시스템입니다!\r\n\r\n### ? 무슨소리요! 구글 애널리틱스로 한 것은 무엇이요!!\r\n\r\n네네! 비슷한 기능입니다! 하지만 구글 애널리틱스를 사용할땐 가이드 코드를 수정하고 태그를 직접 변경했었죠? 비개발자라면 대부분 포기해버렸을 그 부분... `태그 매니저 시스템을 사용하면 클릭으로 적용`이 가능합니다! \r\n\r\n[구글 애널리틱스 이벤트 설정](https://hjban-dev.github.io/etc/2020/01/02/etc-01-google_analitics/)\r\n\r\n## TA 추적코드 설치\r\n\r\n이번에도 가입은 <https://analyticsmarketing.co.kr/digital-analytics/google-tag-manager-basics/3165/> 참고하시면 되고, 가입 후엔 아래 사진 처럼 GA와 비슷한 가이드 코드가 나온다. GA코드는 한 곳에만 붙여 넣으면 됐는데 태그 매니저는 < head >와 < body > **두 군데**에 설치해야 한다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-tag-code.jpg\" alt=\"\">\r\n<figcaption>google tag manager 추적코드 설치</figcaption>\r\n</figure>\r\n</center>\r\n\r\n이제 그 후에 밑에 있는 사진처럼 작업공간이 보일텐데 필자는 아래 표시한 오른쪽 상단 부분.\r\n컨테이너가 게시되지 않았다는게 추적코드 설치가 되지 않았다는 줄 알고 몇번이나 업로드를 했었다. 밑에 태그를 추가하라고 써있어서 추적태그를 삽입하라는 줄 알았지ㅠㅠ  \r\n\r\n저 부분은 `태그, 그러니까 이벤트를 추가하고자 하는 태그를 생성하지 않았다는 뜻`! 그것도 모르고 이틀을 넘게 잡고 있었다ㅠㅠ\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-tag-join.jpg\" alt=\"\">\r\n<figcaption>google tag manager 작업공간</figcaption>\r\n</figure>\r\n</center>\r\n\r\n설치가 되었는지 확인하려면 태그를 추가해야 알 수 있다. 다음 포스팅을 참고하여 태그를 추가해보고 되지 않는다면 위치를 잘 넣었는지 다시 한번 살펴보길 바란다.\r\n\r\n## 추적코드 설치 관련 FAQ\r\n\r\n### 질문1. 기존 GA 태그를 지우지 않아도 되나요?\r\n\r\n이론으로는 괜찮다고 하는데 필자의 경우 처음 실행에 오류가 있었다...ㅠㅠ 그것때문에 또 한참걸림ㅠㅠ  \r\n구글링으로 여러 변수를 찾아봤는데 gt를 설치하면 ga를 따로 설치하지 않아도 된다고도 하는 사람도 있었다. 태그가 제대로 실행되지 않는 이유는 워낙 많으니 ga를 먼저 설치하기 보다 기능이 더 많고 편리한 gt를 먼저 설치하는 것을 추천한다.\r\n"},"id":"f37900ed-8102-5654-a086-f0975227248e"}},{"node":{"frontmatter":{"title":"level 1-23. 하샤드 수 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-08-level1-23-hashad"},"internal":{"content":"# level 1. 자연수 뒤집어 배열로 만들기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12947>\r\n\r\n## 문제\r\n\r\n```\r\n양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다. 예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다. 자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- x는 1 이상, 10000 이하인 정수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| n   | answer |\r\n| --- | ------ |\r\n| 10  | true   |\r\n| 12  | true   |\r\n| 11  | false  |\r\n| 13  | false  |\r\n\r\n입출력 예 설명\r\n\r\n1. 10의 모든 자릿수의 합(1 + 0)은 1입니다. 10은 1로 나누어 떨어지므로 10은 하샤드 수입니다.\r\n2. 12의 모든 자릿수의 합(1 + 2)은 3입니다. 12는 3으로 나누어 떨어지므로 12는 하샤드 수입니다.\r\n3. 11의 모든 자릿수의 합(1 + 1)은 2입니다. 11은 2로 나누어 떨어지지 않으므로 11는 하샤드 수가 아닙니다.\r\n4. 13의 모든 자릿수의 합(1 + 3)은 4입니다. 13은 4로 나누어 떨어지지 않으므로 13은 하샤드 수가 아닙니다.\r\n\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(x) {    \r\n  var x_sum = (x + '').split('').reduce( (a, b) => Number(a) + Number(b));\r\n  return x % x_sum ? false : true;;\r\n}\r\n```\r\n이것도 바로 전에 풀었던 [21.자릿수 더하기](https://hjban-dev.github.io/algorithm/2020/01/08/level1-21-sum_of_number/), [22.자연수 뒤집어 배열로 만들기](https://hjban-dev.github.io/algorithm/2020/01/08/level1-22-arr_of_number/) 랑 비슷한 문제였다. \r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(x,i=0,sum=0) {\r\n  return String(x).length==i ? x%sum == 0 : solution(x,i+1,sum + String(x)[i]*1);\r\n}\r\n```\r\n재귀함수를 사용하면 속도가 두배정도 늦어진다고 하지만 참고용으로 가져옴. \r\n\r\n## 배운점\r\n\r\n나누기 관련해서 살짝 고민했었지만 복잡해지기 싫고 앞에 배운 split()메서드 사용했는데 다시 배우고 간다.\r\n"},"id":"bb4e9139-b4f0-5f57-8788-0ee9e342d9e5"}},{"node":{"frontmatter":{"title":"level 1-22. 자연수 뒤집어 배열로 만들기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-08-level1-22-arr_of_number"},"internal":{"content":"# level 1. 자연수 뒤집어 배열로 만들기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12932>\r\n\r\n## 문제\r\n\r\n```\r\n자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요. 예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n- n은 10,000,000,000이하인 자연수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| n     | answer      |\r\n| ----- | ----------- |\r\n| 12345 | [5,4,3,2,1] |\r\n\r\n입출력 예 설명\r\n\r\n1. 1 + 2 + 3 = 6이므로 6을 return 하면 됩니다.\r\n2. 9 + 8 + 7 = 24이므로 24를 return 하면 됩니다.\r\n\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(n) {\r\n  var answer = (n + '').split('').reverse().map((curent)=> Number(curent));\r\n  return answer;\r\n}\r\n```\r\n바로 전에 풀었던 [21.자릿수 더하기](https://hjban-dev.github.io/algorithm/2020/01/08/level1-21-sum_of_number/) 랑 비슷한 문제였다. 전 문제 다른 사람의 풀이를 활용해서 쉽게 풀었다.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(n) {\r\n  var arr = [];\r\n\r\n  do {\r\n    arr.push(n%10);\r\n    n = Math.floor(n/10);\r\n  } while (n>0);\r\n\r\n  return arr;\r\n}\r\n```\r\nn 을 10으로 나눈 나머지를 배열에 넣고, 몫을 n에 다시 넣어줬다. n이 0보다 크다면 계속 반복.  \r\nn의 값이 12345 일 때, n 을 10으로 나눈 나머지는 5, 몫은 1234.5 가 된다. 위 방법으로는 자료형 변경이 필요없다.\r\n\r\n## 배운점\r\n\r\n나누기 관련해서 살짝 고민했었지만 복잡해지기 싫고 앞에 배운 split()메서드 사용했는데 다시 배우고 간다.\r\n"},"id":"02fcab25-524c-55ed-9a93-496c687ca0c2"}},{"node":{"frontmatter":{"title":"level 1-21. 자릿수 더하기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-08-level1-21-sum_of_number"},"internal":{"content":"# level 1. 자릿수 더하기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12931>\r\n\r\n## 문제\r\n\r\n```\r\n자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요.\r\n예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다.\r\n```\r\n\r\n\r\n### 제한사항\r\n\r\n- N의 범위 : 100,000,000 이하의 자연수\r\n\r\n#### 입출력 예\r\n\r\n| n   | answer |\r\n| --- | ------ |\r\n| 123 | 6      |\r\n| 987 | 24     |\r\n\r\n입출력 예 설명\r\n\r\n1. 1 + 2 + 3 = 6이므로 6을 return 하면 됩니다.\r\n2. 9 + 8 + 7 = 24이므로 24를 return 하면 됩니다.\r\n\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(n){\r\n  var answer = 0;\r\n  var str_n = String(n)\r\n\r\n  for (let i of str_n) {\r\n    answer += Number(i)\r\n  }\r\n\r\n  return answer;\r\n}\r\n```\r\n흠 숫자를 배열로 넣어서 reduce() 메서드를 예상했는데 내가 못쓰는건지 왜 뭐가 문제인지 잘 안풀림..  \r\n그럴땐 모두 지우고 처음부터 시작...!  \r\n들어온 n의 타입이 number 라서 변형이 불가능하길래 String() 함수로 자료형 변형시키고, for of 반복문을 쓰니 string도 활용 가능했다. 반복가능 한 부분 확인하고선 수월하게 진행\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(n){\r\n  return (n+\"\").split(\"\").reduce((acc, curr) => acc + parseInt(curr), 0)\r\n}\r\n```\r\n내가 처음에 진행하려고 했던 방향이다. 위에서 말했듯이 들어오는 n의 자료형이 Number라서 나는 String() 함수를 사용했는데 Number에다가 문자열을 더하면 String으로 변환된다. 잊고 있었다.  \r\n처음에 (n+\"\") 실행하여 타입을 변경하고 split() 메서드로 문자열을 잘랐다. 나도 split() 메소드 기능을 쓰고 싶었는데 기억이 안나서ㅠㅠ slice, splice 밖에 기억 안나서 못썼음ㅠㅠ  \r\nsplit() 메서드의 결과로 나온 배열을 reduce() 메서드로 합을 구했다.\r\n\r\n## 배운점\r\n\r\n문제 해결하고 나서 내 코드에 애정을 느껴 다른사람 풀이에 관심을 안가지려 했다... 안했으면 큰일날뻔ㅠㅠ  \r\n이 문제 해결하고서 프로그래머스 순위 10000위권 안으로 들어갔다...ㅎ..\r\n"},"id":"23e54e28-985c-5e18-83e9-a8ec2d0ca306"}},{"node":{"frontmatter":{"title":"level 1-20. 콜라츠 추측 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-07-level1-20-collatz"},"internal":{"content":"# level 1. 콜라츠 추측\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12943>\r\n\r\n## 문제\r\n\r\n```\r\n1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.\r\n\r\n1-1. 입력된 수가 짝수라면 2로 나눕니다. \r\n1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.\r\n2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.\r\n\r\n예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.\r\n```\r\n\r\n\r\n### 제한사항\r\n\r\n- 입력된 수, num은 1 이상 8000000 미만인 정수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| n      | answer |\r\n| ------ | ------ |\r\n| 6      | 8      |\r\n| 16     | 4      |\r\n| 626331 | -1     |\r\n\r\n입출력 예 설명\r\n\r\n1. 입력된 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다.\r\n2. 16 → 8 → 4 → 2 → 1 이되어 총 4번만에 1이 됩니다.\r\n3. 626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다.\r\n\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(num) {\r\n  var result = 0;\r\n\r\n  while (num > 1 && result < 500){\r\n    num = (num%2 == 0) ?  num/2 : num*3+1;\r\n    result++;\r\n  };\r\n\r\n  return (result == 500) ? -1 : result;\r\n}\r\n```\r\n다행히 문제 보자마자 대충 흐름이 이해가 됐다. 그래서 금방 풀었는데...!  \r\n근데... 채점하는데 13번 테스트에서 계속 실패데스... 왜 인지 통 모르겠어서 한참 고생했는데 입력 수가 1이라면 return이 0 이 되어야 했다. 그 조건이 없으니 1일때 결과 값이 3이라서 그랬음ㅠㅠ\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(num,count = 0) {\r\n  return num == 1 ? (count >= 500 ? -1 : count) : solution(num % 2 == 0 ? num / 2 : num * 3 + 1,++count);\r\n}\r\n```\r\nsolution 함수를 내부에서 또 호출했다. 재귀함수 맞나..? 흠 이 코드는 꽤나 흥미롭군...  \r\n갈길이 멀었다는 걸 또 깨닫는다.  \r\n초기에 실행값으로 count를 지정해주고 return 삼항조건문으로 내부 코드 바로 실행.\r\n\r\n\r\n## 배운점\r\n\r\n내가 생각하지 못하는 변수가 있을 수 있다. 방심하지 말고 여러 방면에서 생각해보자.\r\n"},"id":"6ea8024b-859a-5ae0-a66b-eccd8d20f440"}},{"node":{"frontmatter":{"title":"후회만 남은 2019 돌아보며","category":"Etc"},"fields":{"slug":"2020-01-07-etc-2019"},"internal":{"content":"\r\n### 후회만 남은 2019 돌아보며\r\n\r\n\"책일기\", \"새로운 개발 언어 습득하기\" \"영어 서적 읽기\"   \r\n매년 초엔 새로운 다이어리를 썼고, 앞 장에 다가오는 년에 대한 다짐과 목표를 적었다.\r\n그저 습관처럼 하는 일이였고, 초여름이 되면 다이어리는 슬슬 먼지가 쌓이고, 점점 거들떠보지도 않게 되고...\r\n그건 그냥 나의 매년 이벤트였다. 연 초를 보내는 나만의 방법.\r\n\r\n문제는. 올해는 달랐다는 것이다.  \r\n나도 모르는 사이 어른이라고 인식하고 있던 나이 25.  \r\n누군가 들으면 비웃겠지만, 나에겐 오지 않을 것 같았던 25살을 맞으면서 이유 없이 빠져들었던 무력감과 회의감  \r\n\r\n한동안 힘들었다. 다들 치열하게, 열심히 사는데 나만 도태되어 소속감 하나 없이 뒤에 떨어져 있는 느낌.\r\n\r\n열심히 회사다니고, 친구들 만나고, 연애 잘 하던 어느 날에 갑자기 찾아온 우울은 날 한없이 집어삼켰고, 뭐라도 되어 있을 줄 알았던 25살의 나는 목표 하나 없이, 아무 욕심 없이 시간이 흐르는 대로 지내고 있었다.\r\n우울하게 보내기를 거의 일주일... 더 이상 이렇게 시간을 헛되게 보낼 수 없다고 생각했고, 다시 작은 것부터 목표를 잡기 시작했다. \r\n\r\n이 글을 쓰는 목적은 '2019년 나 정말 힘들었어. 속상해' 가 아니라  \r\n2020년은 열심히 살아보겠다.  \r\n지난달에 느꼈던 무력감과 회의감을 다시는 마주치지 않을 것이다.  \r\n다시 게으름이 찾아 올 때마다 찾아보기 위해 더 이상 멍청이를 마주하지 않기 위해 쓰는 글.\r\n\r\n공부를 다시 시작하려고 한다. 나는 고등학교, 대학교, 직업의 연관성이 하나도 없다. 다시 말하면 나한테 전문적인 분야가 없다. 지금 하는 일 꽤나 재밌어서 다시 진로를 고민하진 않아도 될 것 같지만, 더 깊고 심도 있게 배우려고 한다.  \r\n지금의 계획을 계산해보면 공부를 끝냈을 때는 아마 30쯤 일텐데 무리일까 싶기도 하지만, 좀 더 나은 사람이 되기 위해 나한테 시간을 투자할 것이다. 1년만 고생하자. 물론 내년이 더 힘들겠지만 지금 고생해야 내년에 내가 웃고 있겠지.\r\n\r\n목표는 자신있게 내가 좋은 사람이라고 소개하는 것. 내가 좋은 사람이 되어 내 주변엔 좋은 사람들이 찾아오도록.\r\n\r\n긍정적으로 생각하면 현재 직장의 출퇴근이 힘들지 않아서 퇴근 후 스터디에 무리가 없고, 가장 중요한 부분중 하나인 나의 팀원들이 좋은 동료이고, 좋은 자극제..? 라서 같이 발전해 나갈 수 있을 것 같고, 이제는 내 주변엔 내 편들 뿐이라 더 이상 휘둘리거나 눈치볼 일도 없다.\r\n\r\n지금 생각해보면 어른이 되어 가는 중에 잠깐 지나가는 성장통이였다. 하지만 나는 2019년에 가장 뜻 깊은 사건 중 하나는 저런 시간을 가졌다는 것이고, 한달이 지난 지금까지 그 텐션이 떨어지지 않았다는 것\r\n\r\n벌써 다이어리는 꾸준히 한달을 넘게 썼고, 자격증과 토익 교재는 벌써 30프로 가까이 끝마쳤다. \r\n할 수 있다. 작심삼일이 10번이면 한달이다.\r\n\r\n내년 2020년을 돌아볼땐 쓸 일이 너무 많아서 신이 난 마음으로 작성하고 싶다. 그동안 많이 쉬었다. 지금 계획했던 목표와 다짐들 잊지 말고 부지런하게 지내자.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/images/cheer_up.jpg\" alt=\"\">\r\n</figure>\r\n</center>\r\n"},"id":"5c93b53d-344a-5f09-8d80-add50aa5cb8e"}},{"node":{"frontmatter":{"title":"level 1-19. x만큼 간격이 있는 n개의 숫자 (Javascript)","category":"Algorithm"},"fields":{"slug":"2020-01-03-level1-19-n_length_number"},"internal":{"content":"# level 1. x만큼 간격이 있는 n개의 숫자\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12954>\r\n\r\n## 문제\r\n\r\n```\r\n함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다. 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- x는 -10000000 이상, 10000000 이하인 정수입니다.\r\n- n은 1000 이하인 자연수입니다.\r\n\r\n#### 입출력 예\r\n\r\n| x   | n   | answer           |\r\n| --- | --- | ---------------- |\r\n| 2   | 5   | [2, 4, 6, 8, 10] |\r\n| 4   | 3   | [4, 8, 12]       |\r\n| -4  | 2   | [-4, -8]         |\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(x, n) {\r\n  var answer = [];\r\n  for (let i = 1; i <= n; i++) {\r\n    answer.push(x*i)\r\n  }\r\n  return answer;\r\n}\r\n```\r\n오래 생각할 필요 없이 반복문으로 돌려서 해결했다.  \r\nx를 n번 반복\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(x, n) {\r\n  return Array(n).fill(x).map((v, i) => (i + 1) * v)\r\n}\r\n```\r\n흠...들어온 n번 자리까지의 배열을 만들고, 내부를 x의 값으로 채웠다. ex)[ 2, 2, 2, 2, 2 ]  \r\n그리고 map() 메서드로 인덱스 번호 순서대로 변경\r\n\r\n```javascript\r\nfunction solution(x, n) {\r\n  return [...Array(n).keys()].map(v => (v + 1) * x);\r\n}\r\n```\r\n흠...들어온 n번 자리까지의 배열을 만들고, keys() 메서드로 인덱스 값으로 채웠다. ex)[ 0, 1, 2, 3, 4 ]  \r\n그리고 map() 메서드로 인덱스 번호 순서대로 변경\r\n\r\n## 배운점\r\n\r\n\r\n**arr.fill(value[, start[, end]])** - start부터 end까지 value 값으로 채운다\r\n**arr.keys(obj)** - 배열의 각 인덱스를 키 값으로 가지는 새로운 Array 객체 반환\r\n"},"id":"190348c1-28dd-5c6f-8d18-ffe86cd9b54a"}},{"node":{"frontmatter":{"title":"개발자를 위한 구글 애널리틱스[Google Analytics] 이벤트 설정","category":"Google"},"fields":{"slug":"2020-01-02-etc-03-google_analitics3"},"internal":{"content":"> <https://analyticsmarketing.co.kr/> 참고  \r\n> 간단하고 불친절하게 개념만 설명합니다. (기본적인 부분 설명 생략)\r\n\r\n# 구글 애널리틱스 [Google Analytics]\r\n\r\n## 자! 이제 GA 이벤트를 설정해볼까나?\r\n\r\n우선 사용자가 웹사이트에 반응을 보였다는 것은 사용자가 우리가 제공하는 상품이나 서비스 혹은 컨텐츠에 관심이 있다로 해석할 수 있습니다.\r\nGA는 웹페이지 로드시에 자동으로 전송하지만, 이벤트는 웹페이지 로드와 별개로 설정해야 하기 때문에 이를 추적하기 위한 별도의 설정을 해야한다.\r\n\r\n## 맞춤 이벤트 추적 설정 전 알아야 할 부분\r\n\r\n```javascript\r\ngtag('event', <action>, {\r\n  'event_category': <category>,\r\n  'event_label': <label>,\r\n  'value': <value>\r\n});\r\n```\r\n위 코드는 이벤트 추적을 하기 위한 가이드 라인이다. 이제 위 가이드에 \r\n\r\n1. 아래 있는 이벤트 정보를 활용하여 가이드를 변경하고, \r\n2. 이벤트를 생성할 코드를 찾아서\r\n3. 코드내에 onclick=\"\" 내장 함수를 삽입해야 한다.\r\n\r\n| 이벤트 정보 | 설명 | 예 |\r\n| --------- | --------- | --------- |\r\n| 카테고리(Category) | 이벤트의 유형 | 전화연결, 동영상, 다운로드, 상담신청|\r\n| `액션(Action)` | 카테고리에 대한 설명 | 카테고리가 동영상이라면 재생, 일시중지, 중지, 완료 |\r\n| 라벨(Label) | 추적할 이벤트에 대한 추가 정보 | 동영상 제목, 파일명 |\r\n| 값(Value) | 특정한 이벤트에 대해 그 자치를 부여 | 숫자, 변수 값 등|\r\n\r\n**액션만 필수 항목이지만 액션과 카테고리는 기본으로 적어주는 것을 권장한다.**\r\n\r\n## 맞춤 이벤트 추적 설정\r\n\r\n마지막이다...!  \r\n개념만 세워주기 위한 포스팅으로 생각하고 세부내용은 안적는다.  \r\n\r\n<https://developers.google.com/analytics/devguides/collection/gtagjs/events> 참고하여 이벤트 이름을 설정할 수 있다.  \r\n\r\n후...머리 깨지겠네;;\r\n\r\n```javascript\r\ngtag('event', '동영상', {\r\n  'event_category': '재생',\r\n  'event_label': '사용법.mp4',\r\n});\r\n```\r\nㄴ가이드 코드를 필자가 예시로 만든 코드\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-analitics-event-onclick.jpg\" alt=\"\">\r\n<figcaption>google analitics 클릭 이벤트를 넣을 태그에 가이드 코드 삽입</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n위 사진처럼 변경하여 html 파일을 열어 이벤트를 넣을 태그 내부에 onclick=\"\" 내장 함수로 넣을 수 있다.  \r\n머리아픔...;\r\n\r\n## 확인하기\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-analitics-event.jpg\" alt=\"\">\r\n<figcaption>google analitics 클릭 이벤트 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n구글 애널리틱스 페이지에서 실시간 > 이벤트 를 들어가면 방금 삽입한 부분에 대한 결과를 찾을 수 있다.  \r\n\r\n## 결과\r\n\r\n지금까지 이벤트가 왜 필요한지, 어떻게 설정하는지 등을 알아보았는데, 이벤트 추적은 매우 중요하지만, 소스 코드를 수정해야 한다는 점에서 사업자나 마케터에게 약간(사실 많이)의 장벽이 있다. 코드를 직접 변경한다는 것은 최소 html에 대한 개념이 어느 정도 있어야 가능하니..  \r\n\r\n하지만...!! 그럴때 구글 태그매니저를 사용하면 이벤트 설정 시 좀 더 쉽게 그리고 더 다양한 이벤트를 추적할 수 있다.  \r\n그러니까...이제 구글 태그매니저에 대한 정보를 알아봅시다...! ^^;\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/images/stop.jpg\" alt=\"\">\r\n</figure>\r\n</center>\r\n"},"id":"06f935fa-67fd-5429-ae45-64b02611438b"}},{"node":{"frontmatter":{"title":"개발자를 위한 구글 애널리틱스[Google Analytics] 활용","category":"Google"},"fields":{"slug":"2020-01-02-etc-02-google_analitics2"},"internal":{"content":"> <https://analyticsmarketing.co.kr/> 참고  \r\n> 간단하고 불친절하게 개념만 설명합니다. (기본적인 부분 설명 생략)\r\n\r\n# 구글 애널리틱스 [Google Analytics]\r\n\r\n## 그러면 이제 '구글 애널리틱스' 로 무엇을 할 수 있을까?\r\n\r\n자 설치를 완료했다는 가정하에 다음 과정을 알아보자.  \r\n  \r\n추적코드는 사용자가 페이지를 방문하는 그 자체로 사용자와 `해당 페이지 사이의 정보를 수집`한다. 추적 코드는 사용자가 사이트에 방문한 순간 **쿠키를 브라우저에 설치**한다.\r\n\r\n* 쿠키는 쉽게 말해 사용자의 브라우저에 저장되는 작은 텍스트 파일입니다. 보통 쿠키를 활용해 사용자의 설정, 과거 이용내역 등을 저장하여 사용자의 정보를 기억할 수 있습니다.\r\n\r\n그리고 쿠키를 활용하여 다양한 정보가 애널리틱스로 전송된다.\r\n\r\n## ‘히트(Hit, 조회)’ 분석\r\n\r\n‘히트’는 사용자와 관련된 유용한 정보가 들어 있는 URL 문자열이다.  \r\n(⊙ө⊙) ?!? 갑자기 무슨 소리지?!?  \r\n어렵게 생각하지 말고 히트는 그냥 자기소개서 라고 생각하자.  \r\n우리가 모르는 사이 전송되는 url(히트) 하나로 사용자의 정보, 페이지, 기기나 해상도 등을 파악하도록 애널리틱스 서버로 전송한다.\r\n\r\n### 히트의 유형\r\n \r\n- ‘페이지뷰(pageview)’ 히트 : 추적코드가 삽입된 웹페이지가 로드될 때 실행\r\n- ‘이벤트(event)’ 히트 : 동영상 재생 버튼, 특정 url 클릭 등 이벤트가 실행될 때 실행\r\n- ‘거래(transaction)’ 히트 : 전자상거래 구매 관련 데이터가 관련되었다면 실행\r\n\r\n그 외에 여러가지가 있지만 위의 히트들을 많이 사용한다.   \r\n위에서 말했듯이 히트가 전송되면 사용자의 데이터를 수집 가능하며 여러 정보들을 파악할 수 있다.  \r\n  \r\n#### 파악할 수 있는 정보\r\n\r\n- 사용자의 위치\r\n- 사용자의 브라우저, 운영체제, 서비스 제공업체에 대한 세부정보, 접속 기기\r\n- 사용자의 연령 및 성별\r\n- 사용자를 사이트로 추천한 소스/매체 등\r\n\r\n## 수집된 데이터의 활용\r\n\r\n보통 많이 활용하는 데이터의 목록으로는 \r\n\r\n- 사용자, 신규 방문자, 세션, 이탈률, 세션당 페이지 수, 평균 세션 시간, 거래수, 수익, 전자상거래 전환율 등\r\n\r\n등을 통계를 낼 수 있고 그 결과로 보고서 등을 만들 수 있다. 개발을 본업으로 하는 필자는... 보고서까지는 파보지 않았다. 인터넷 찾아보면 수집된 데이터를 활용하는 방법에 대해 많이 나오니까 목마른 사람이 검색하시죠.  \r\n<https://analyticsmarketing.co.kr/digital-analytics/google-analytics-basics/2316/> 참고 하세요.\r\n"},"id":"84cf3851-aad7-5e1f-a531-b76218e2f933"}},{"node":{"frontmatter":{"title":"개발자를 위한 구글 애널리틱스[Google Analytics]의 개념","category":"Google"},"fields":{"slug":"2020-01-02-etc-01-google_analitics"},"internal":{"content":"> <https://analyticsmarketing.co.kr/> 참고  \r\n> 간단하고 불친절하게 개념만 설명합니다. (기본적인 부분 설명 생략)\r\n\r\n# 구글 애널리틱스 [Google Analytics]\r\n\r\n## 도대체 '구글 애널리틱스' 는 무엇인가?-?\r\n\r\n말 그대로 **구글**에서 무료로 제공하는 **애널리틱스(Analytics)** 이다.  \r\nAnalytics를 한글로 해석하면 `분석; 분석 정보` 의 의미를 갖고 있다.  \r\n그럼 **웹분석**...이라는 의미는 무엇일까?  \r\n사전적 의미로는 웹사이트 이용 현황을 이해하고 사용자 경험을 최적화하기 위해 웹 데이터를 측정, 수집, 분석 및 보고하는 것이지만, 쉽게 말하면 `내 사이트에 누가, 언제, 어디서, 어떻게, 왜, 무엇을 찾으려고 사용하는지 찾아보는 것`이다.\r\n\r\n## GA 계정 생성\r\n\r\n**!! 구글에서 제공하는 프로그램이기 때문에 반드시 구글 계정 필요!!**\r\n\r\n<http://www.google.com/analytics/> 들어가서 로그인 또는 계정 만들기(무료 사용) 본인에게 필요한 기능 클릭.  \r\n흠... 계정 만드는 방법도 구글링하면 자세히 나온다.  \r\n다만 자주 변경되는 UI 때문에 헷갈릴 수도 있지만, 잘 읽어보면 너무나도 기본적인 내용이라 헷갈릴 부분은 없을 듯 합니다?  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-analitics-join.jpg\" alt=\"\">\r\n<figcaption>google analitics 가입 페이지</figcaption>\r\n</figure>\r\n</center>\r\n  \r\n<https://analyticsmarketing.co.kr/digital-analytics/google-analytics/268/> 참고 하면 쉽게 계정 생성 가능!!\r\n\r\n## GA 추적코드 설치\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-analitics-prev-code.jpg\" alt=\"\">\r\n<figcaption>google analitics 데이터 스트림 설정</figcaption>\r\n</figure>\r\n</center>\r\n\r\n가입 후엔 위 사진과 같이 데이터 스트림(속성) 설정을 할 수 있는 페이지가 나오고 본인에게 필요한 기능으로 가입. 위 사진으로 하는 작업이 내 사이트를 등록하는 과정이다.\r\n\r\n완료하면 아래와 같은 GA 추적코드를 볼 수 있는 페이지가 나온다.  \r\n혹시 보이지 않는다면 왼쪽 메뉴의 관리 > 속성 > 추적 정보 > 추적 코드에서 확인 가능하다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/etc/google-analitics-code.jpg\" alt=\"\">\r\n<figcaption>google analitics 추적코드</figcaption>\r\n</figure>\r\n</center>\r\n\r\n추적코드는 고유한 추적ID를 담고 있으며 자바스크립트 코드로 되어 있다.  \r\n보통 태그라고 부르는 GA 추적코드를 \r\n\r\n1. 웹사이트 내 모든 페이지에서 실행되게 한다.\r\n2. < head > 의 첫 번째 항목으로 붙여넣는다.\r\n\r\n그렇게 되면 사용자가 웹 사이트를 방문할 때마다 이 태그가 실행되면서 방문자 데이터를 수집하여 GA 서버로 전송한다.\r\n만약 태그, < head >를 들어 본적 없을 정도로 개발 언어에 대한 지식이 부족하다면 추적코드 설치 부분은 주변 개발자분을 찾아 부탁하는 것을 권합니다.  \r\n\r\n위에서도 말했듯이 `추적 코드는 사이트 내 모든 페이지에서 태그가 실행`될 수 있도록 해야합니다.  \r\n또한 모바일 웹사이트를 별도로 운영하는 경우, `모바일 페이지에도 스크립트를 설치`하여 데이터가 누락되지 않도록 합니다.  \r\n  \r\n스크립트 삽입이 제대로 되어있다면 **구글 애널리틱스 사이트의 실시간 보고서를 통해 실시간 유입 현황을 바로 파악**할 수 있다.\r\n그 말은 이제 내 웹사이트에 누가 어디서 왜 들어왔는지 확인이 가능하다는 것이다.\r\n\r\n## 추적코드 설치 관련 FAQ\r\n\r\n### 질문1. 추적코드 설치가 무엇인가요?\r\n\r\n위에서 나온 추적코드를 페이지의 html 영역에 코드를 삽입한 그 자체를 설치라고 칭합니다. 코드 삽입 자체로 방문자 데이터 수집이 가능하다는 의미입니다. \r\n\r\n### 질문2. 하나의 웹사이트에 두 개의 추적코드를 심어도 되나요?\r\n\r\n네 가능합니다. 하지만 어떤 태그를 사용하느냐에 따라 설정 방법에 약간 차이가 있습니다. \r\n\r\n### 질문3. 추적코드를 헤드 영역에 심으라고 했는데, 꼭 그래야 하나요?\r\n\r\n사실 어느 위치에 추가하건 크게 무리가 없습니다. 하지만 헤드 영역을 권장하는 이유는 좀 더 정확한 데이터를 수집하기 위해서입니다. 페이지에 진입하면 코드는 위에서 아래로 순차적으로 진행하기 때문에 하단에 있으면 그만큼 늦게 실행됩니다.\r\n"},"id":"bd9f7358-075f-53a6-8a60-4d3147531e94"}},{"node":{"frontmatter":{"title":"level 1-18. 문자열 내림차순으로 배치하기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-31-level1-18-string_descending"},"internal":{"content":"# level 1. 문자열 내림차순으로 배치하기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12917>\r\n\r\n## 문제\r\n\r\n```\r\n문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.\r\ns는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n- str은 길이 1 이상인 문자열입니다.\r\n\r\n#### 입출력 예\r\n\r\n| s         | answer    |\r\n| --------- | --------- |\r\n| \"Zbcdefg\" | \"gfedcbZ\" |\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(s) {\r\n  var answer = Array.from(s).sort().reverse().join('');\r\n  return answer;\r\n}\r\n```\r\n사실 문제 이해 안함. 예시 보니 뒤집는 것 같아서 요리조리 하니까 통과했다...ㅋㅋㅋ  \r\n내장 메소드만 사용해서 설명 없음.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(s) {\r\n  return s.split(\"\").sort((a,b) => a<b ? 1:-1).join(\"\")\r\n}\r\n```\r\nfrom() 대신 split() 사용.  \r\nsort((a,b) => a < b ? 1 : -1) 로 정렬하면서 뒤집음.\r\n\r\n## 배운점\r\n\r\n**arr.from ( arrayLike [, mapFn [, thisArg ]])** - 반복하여 얕은 복사로 새로운 배열 생성  \r\n**arr.join([ separator ])** - separator에 따라 배열을 문자열로 지정( 매개변수 생략하면 ','로 구분됨)\r\n"},"id":"1cd4b409-f374-5722-b0db-a432093aeddb"}},{"node":{"frontmatter":{"title":"level 1-17. 같은 숫자는 싫어 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-30-level1-17-no_same_number"},"internal":{"content":"# level 1. 같은 숫자는 싫어\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12906>\r\n\r\n## 문제\r\n\r\n```\r\n배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,\r\n\r\n- arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.\r\n- arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.\r\n\r\n배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- 배열 arr의 크기 : 1,000,000 이하의 자연수\r\n- 배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수\r\n\r\n#### 입출력 예\r\n\r\ninput | answer \r\n--------- | --------- \r\n[1,1,3,3,0,1,1] | [1,3,0,1]\r\n[4,4,4,3,3] | [4,3]\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(input){\r\n  var answer = [];\r\n\r\n  input.map(function(currentValue, index, arr){\r\n    arr[index] != arr[index+1] && answer.push(arr[index]);\r\n  }) \r\n\r\n  return answer;\r\n}\r\n```\r\n문제 보자 마자 for in 반복문을 떠올렸지만 내장메서드 사용하려고 계속 머리 굴림. map() 메서드 기억해냈지만 완벽한 기억이 아니라 몇 번이나 헤맸다.  \r\n며칠 안풀었더니 또 굳은 머리...  \r\nmap() 메서드 사용해서 반복. 저번에 배웠던 짧은 연산자 사용해서 **arr[index] != arr[index+1]**이 참이면 **answer.push(arr[index])**실행.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(input){\r\n  return arr.filter((val,index) => val != arr[index+1]);\r\n}\r\n```\r\nㅋㅋㅋ..filter()메서드로 바로 return. 아름다운 코드.  \r\n\r\n## 배운점\r\n\r\n반복문 쓰지 말고 내장 메서드 사용해야 하는데 자꾸 반복문 먼저 떠오르고, 반복문이 떠오른 후에는 다른 생각이 나지 않는다...  \r\n정규 표현식 관련 포스팅 시급. 코드 분석은 하는데 사용이 서툴다ㅠㅠ 예제 문제 반복 필수.\r\n\r\n**array.`map`( function ( currentValue [, index] [, arr] ), thisValue )**  \r\n:배열의 각 요소에 대해 제공된 함수를 순서대로 한 번 호출하여 새 배열을 작성  \r\n(콜백함수에 들어가는 첫번째 매개변수는 처리하는 배열의 현재 요소)  \r\n\r\n**array.`filter`( function ( currentValue [, index] [, arr] ), thisValue )**  \r\n:테스트를 통과하는 요소를 걸러내어 배열로 true/false 반환, 없으면 빈 배열\r\n"},"id":"a3545a17-4550-5024-9407-5aa6ae50cdf4"}},{"node":{"frontmatter":{"title":"Javascript 헷갈리는 개념과 예제 정리 심화 1","category":"Javascript"},"fields":{"slug":"2019-12-30-javascript_deepen1"},"internal":{"content":"\r\n# Javascript 헷갈리는 개념과 예제 정리 심화 1\r\n> [출처] (https://helloworldjavascript.net/)\r\n\r\n#### let, const 변수와 블록 스코프\r\n\r\n|       | const  |  let   |  var   |\r\n| :---: | :----: | :----: | :----: |\r\n|  스코프  | 블록 스코프 | 블록 스코프 | 함수 스코프 |\r\n|  재대입  |   X    |   O    |   O    |\r\n|  재선언  |   X    |   X    |   O    |\r\n| 호이스팅  |   X    |   X    |   O    |\r\n| 사용 권장 |  1순위   |  2순위   |  3순위   |\r\n\r\n\r\n"},"id":"39313a09-1d31-5112-99ca-c620f21eb920"}},{"node":{"frontmatter":{"title":"level 1-16. 문자열 내 p와 y의 개수 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-20-level1-16-p_y_length"},"internal":{"content":"# level 1. 문자열 내 p와 y의 개수\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12916>\r\n\r\n## 문제\r\n\r\n```\r\n대문자와 소문자가 섞여있는 문자열 s가 주어집니다. s에 'p'의 개수와 'y'의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. 'p', 'y' 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.\r\n\r\n예를 들어 s가 \"pPoooyY\"면 true를 return하고 \"Pyy\"라면 false를 return합니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n- 문자열 s의 길이 : 50 이하의 자연수\r\n- 문자열 s는 알파벳으로만 이루어져 있습니다.\r\n\r\n#### 입출력 예\r\n\r\ns | return \r\n--------- | --------- \r\n\"pPoooyY\" | true\r\n\"Pyy\" | false\r\n\r\n입출력 예 설명\r\n\r\n1. 'p'의 개수 2개, 'y'의 개수 2개로 같으므로 true를 return 합니다.\r\n2. 'p'의 개수 1개, 'y'의 개수 2개로 다르므로 false를 return 합니다.\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(str){\r\n  var s = str.toUpperCase();\r\n  var pLength = 0;\r\n  var yLength = 0;\r\n  \r\n  for(var i=0; i<s.length; i++){\r\n    if(s[i] == \"P\"){\r\n      pLength++;\r\n    }else if(s[i] == \"Y\"){\r\n      yLength++;\r\n    }\r\n  }\r\n  \r\n  var answer = (pLength != yLength) ? false : true ;\r\n  return answer;\r\n}\r\n```\r\n먼저 문제가 소문자 대문자를 구분하지 않아서 들어오는 s를 toUpperCase() 메서드를 사용하여 대문자로 변환시켜 주었다.\r\n0을 가지는 pLength와 yLength를 변수를 만들고, for 반복문으로 P, Y의 개수를 각각 세어줌.\r\npLength와 yLength의 개수에 따라 answer 를 false 와 true로 return\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(s) {\r\n  return s.match(/p/ig).length == s.match(/y/ig).length;\r\n}\r\n```\r\n정규 표현식으로 대문자 소문자 구별 없이 p, y와 맞는 개수를 찾아서 비교.\r\n```javascript\r\nfunction solution(s) {\r\n  var s = str.toUpperCase();\r\n  return s.split(\"P\").length === s.split(\"Y\").length;\r\n}\r\n```\r\n위 방법과 접근방법은 비슷. split() 메서드로 p, y와 맞는 개수 찾아서 비교 \r\n\r\n## 배운점\r\n\r\n반복문 쓰지 말고 내장 메서드 사용해야 하는데 자꾸 반복문 먼저 떠오르고, 반복문이 떠오른 후에는 다른 생각이 나지 않는다...  \r\n정규 표현식 관련 포스팅 시급. 코드 분석은 하는데 사용이 서툴다ㅠㅠ 예제 문제 반복 필수.\r\n\r\n```javascript\r\n// split() 문자열을 특정 문자를 기준으로 잘라 새 배열 생성\r\n'ppoooyy'.split('p'); // \t[ '', '', 'ooyy' ]\r\n```\r\n"},"id":"d010d06c-dd40-5939-875f-3b4e192b8af2"}},{"node":{"frontmatter":{"title":"Javascript 헷갈리는 개념과 예제 정리 기초","category":"Javascript"},"fields":{"slug":"2019-12-17-javascript_method"},"internal":{"content":"\r\n# Javascript 헷갈리는 개념 예제 정리 기초\r\n> [출처] (https://helloworldjavascript.net/)\r\n\r\n#### 변수\r\n```javascript\r\nlet seven;\r\nconst eight; // 다른 값을 대입 불가 (상수)\r\n```\r\n#### isNaN() 메서드\r\n```javascript\r\nconst thisIsNan = NaN;\r\n\r\n// 주의! 이렇게 하면 안 됩니다.\r\nthisIsNan === NaN; // false\r\n\r\n// 이렇게 해야 합니다.\r\nNumber.isNaN(thisIsNan); // true\r\nObject.is(thisIsNan, NaN); // true\r\n```\r\n#### isFinite() 메서드\r\n```javascript\r\nNumber.isFinite(1); //true\r\nNumber.isFinite(Infinity); // false\r\n```\r\n#### parseInt() 메서드 : 문자열을 숫자로\r\n```javascript\r\nparseInt('123'); // 123\r\nparseInt('110', 2); // 6 (문자열을 2진수로 간주한다.)\r\n\r\nparseInt('hello'); // NaN\r\n```\r\n#### toString() 메서드 : 숫자를 문자로\r\n```javascript\r\n(12345).toString(); // '12345'\r\n(12345).toLocaleString(); // '12,345'\r\n(1.2345).toFixed(2); // '1.23'\r\n```\r\n#### 템플릿 리터럴 (Template Literal) : 여러 줄로 이루어진 문자열도 표현 가능\r\n```javascript\r\nconst name1 = 'Foo';\r\nconst name2 = 'Bar';\r\nconst sentence = `${name1} meets ${name2}!`;\r\n\r\n`hello\r\nworld!\r\n`\r\n```\r\n#### string 객체의 속성과 메서드\r\n```javascript\r\n// 문자열의 길이 알아내기\r\n'hello'.length; // 5\r\n\r\n// 여러 문자열 연결하기\r\n'hello'.concat('fun', 'javascript'); // 'hellofunjavascript'\r\n\r\n// 특정 문자열을 반복하는 새 문자열 생성하기\r\n'*'.repeat(3); // '***'\r\n\r\n// 특정 문자열이 포함되어 있는지 확인하기\r\n'hello javascript'.includes('hello'); // true\r\n'hello javascript'.startsWith('he'); // true\r\n'hello javascript'.endsWith('ript'); // true\r\n'hello javascript'.indexOf('java'); // 6\r\n\r\n// 문자열의 특정 부분을 바꾼 새 문자열 생성하기\r\n'hello javascript'.replace('java', 'type'); // 'hello typescript'\r\n\r\n// 문자열의 일부를 잘라낸 새 문자열 생성하기\r\n'hello'.slice(2, 4); // 'll'\r\n\r\n// 좌우 공백문자를 제거한 새 문자열 생성하기\r\n'   hello  '.trim(); // 'hello'\r\n'   hello  '.trimLeft(); // 'hello  '\r\n'   hello  '.trimRight(); // '   hello'\r\n\r\n// 좌우 공백문자를 추가한 새 문자열 생성하기\r\n'hello'.padStart(8); // '   hello'\r\n'hello'.padEnd(8); // 'hello   '\r\n\r\n// 문자열을 특정 문자를 기준으로 잘라 새 배열 생성하기\r\n'hello!fun!javavscript'.split('!'); // ['hello', 'fun', 'javascript']\r\n'hello'.split(''); // ['h', 'e', 'l', 'l', 'o']\r\n\r\n// 모든 문자를 소문자, 혹은 대문자로 변환한 새 문자열 생성하기\r\n'Hello JavaScript'.toLowerCase(); // 'hello javascript'\r\n'Hello JavaScript'.toUpperCase(); // 'HELLO JAVASCRIPT'\r\n```\r\nJavaScript에서는 아래의 값들은 모두 falsy이고, 이를 제외한 모든 값들은 truthy입니다.\r\n- false\r\n- null\r\n- undefined\r\n- 0\r\n- NaN\r\n- ''\r\n\r\n#### 다른 타입의 값을 진리값으로 변환\r\n```javascript\r\nBoolean('hello'); // true\r\n```\r\nnull과 undefined : 명시적으로 부재를 나타내고 싶다면 null을 사용\r\n(null : 객체가 없음)\r\n```javascript\r\ntypeof null // 'object'\r\ntypeof undefined // 'undefined'\r\n\r\nlet foo; // 값을 대입한 적 없음\r\nlet bar = undefined; // 값을 대입함\r\n```\r\n#### Null Check\r\n```javascript\r\ninput !== null && input !== undefined;\r\n\r\ninput === null || input === undefined;\r\n```\r\n#### 스코프 (Scope) : 변수는 코드의 일정 범위 안에서만 유효\r\n```javascript\r\nconst five = 5; // 최상위 스코프(top-level scope) 혹은 전역 스코프(global scope)\r\nfunction add1(x) {\r\n  function add2(y) {\r\n    return x + y;\r\n  }\r\n  return add2(five);\r\n}\r\nadd1(3); // 8 : 스코프 연쇄(scope chain)\r\n```\r\n#### 배열의 반복문\r\n```javascript\r\nconst arr = [1, 2, 3, 4, 5];\r\n\r\narr.forEach((item, index) => {\r\n  console.log(`배열의 ${index + 1} 번째 요소는 ${item} 입니다.`);\r\n});\r\n\r\n// for of 는 es6에서 도입\r\nfor (let item of arr) {\r\n  console.log(`현재 요소는 ${item} 입니다.`);\r\n};\r\n```\r\n#### 배열 메서드\r\n- from(), isArray(), of()\r\n- fill(), push(), pop(), unshift(), shiff(), splice(), reverse(), sort()\r\n- slice(), map(), concat(), reduce(), filter(), join()\r\n- indexOf(), lastIndexOf(), find(), findIndex()\r\n- includes(), every(), some()\r\n\r\n#### map() 메서드 매개변수 : (누적값, 현재 요소, 인덱스, 배열)\r\n```javascript\r\narr.map((item, index, array) => {\r\n  return item * index;\r\n}); // [0, 2, 6, 12, 20]\r\n```\r\n"},"id":"ffc07efd-1c30-52fa-8337-94b5b3da1842"}},{"node":{"frontmatter":{"title":"자바스크립트의 함수 방식으로 클래스 만들기","category":"Javascript"},"fields":{"slug":"2019-12-17-class_function"},"internal":{"content":"\r\n# 함수 방식으로 클래스 만들기\r\n\r\n## 사용법\r\n\r\n리터럴 방식과 동일하게 `클래스 설계 단계`와 설계한 클래스를 사용하는 단계인 `객체 사용 단계`로 나눠집니다.\r\n\r\n| 구분 | 진행 순서 |\r\n| --- | --- |\r\n클래스 설계 단계 | 1. 문법 <br> 2. 생성자 정의 방법 <br> 3. 프로퍼티 정의 방법 <br> 4. 메서드 정의 방법\r\n객체 사용 단계 | 5. 인스턴스 생성 방법 <br> 6. 객체 외부에서 프로퍼티와 메서드 접근 방법 <br> 7. 객체 내부에서 프로퍼티와 메서드 접근 방법\r\n\r\n### 1. 문법\r\n\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티1 = 초깃값;\r\n  this.프로퍼티2 = 초깃값;\r\n  ...\r\n  this.메서드 : function(){\r\n\r\n  }\r\n  ...\r\n}\r\n\r\nvar 인스턴스 = new 클래스이름();\r\n```\r\n함수 방식 클래스의 경우는 **하나의 함수 내부에 프로퍼티와 메서드를 정의**하는 구조입니다. 프로퍼티와 메서드는 반드시 자기 자신을 나타내는 `this`에 정의해야 합니다.\r\n\r\n```javascript\r\n// 클래스 정의\r\nfunction User(){\r\n  this.name = \"김초코\";\r\n  this.id = \"choco_kim\";\r\n  this.age = 25;\r\n  this.showInfo = function(){\r\n    document.write(\"name = \"+this.userName, \", id = \"+this.id);\r\n  }\r\n}\r\n\r\n// 인스턴스 생성\r\nvar user = new User();\r\n// 메서드 호출\r\nuser.showInfo();\r\n```\r\n자바나 C#과 같은 객체지향 프로그래밍 언어의 경우 다음과 같이 클래스 정의 전용 키워드를 이용해 클래스를 정의합니다..\r\n\r\n```java\r\nclass 클래스이름 {\r\n  // 포장할 프로퍼티와 메서드\r\n}\r\n```\r\n하지만 자바스크립트에서는 클래스를 만들기 위한 키워드가 따로 존재하지 않습니다. 클래스를 만드는 방법은 함수 만드는 방법과 동일합니다. 둘 다 function이라는 키워드를 사용하기 때문에 내부 구문을 확인하지 않고서는 일반 함수인지 클래스인지 구분할 방법은 없습니다. 유일한 방법은 일반적으로 함수이름은 소문자로 시작하며 클래스는 대문자로 시작합니다. 물론 클래스 이름을 소문자로 해도 되지만 오래전부터 내려오는 일반적인 규칙이기 떄문에 특별한 경우를 제외하고는 대문자로 작성해야 합니다.\r\n\r\n함수 이름은 소문자로 만들고 클래스 이름은 대문자로 만듭니다.\r\n\r\n### 2. 생성자 정의 방법\r\n\r\n생성잔는 인스턴스가 만들어지면서 자동으로 호출되는 함수를 말합니다. 생성자에는 주로 프로퍼티를 초기화하는 구문을 작성합니다.\r\n\r\n- JAVA, C# 과 같은 객체지향 프로그래밍에서는 생성자 이외에도 파괴자라는 개념을 제공합니다. 파괴자는 클래스 인스턴스가 파괴될 때 자동으로 호출되는 함수를 말하며 주로 사용하고 있던 데이터를 삭제하는 용도로 사용됩니다. 자바스크립트에서는 제공하지 않습니다.\r\n\r\n함수 방식에서는 생성자는 클래스이름 자체가 생성자이며 인스턴스가 생성될 때 자동 호출됩니다.\r\n\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티 = 초깃값;\r\n  this.메서드 = function(){}\r\n}\r\n\r\nvar 인스턴스 = new 클래스이름();\r\n```\r\n\r\n### 3. 프로퍼티 정의 방법\r\n\r\n함수 방식에서 프로퍼티는 this에 만들어 줍니다.\r\n\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티1 = 초깃값;\r\n  this.프로퍼티2 = 초깃값;\r\n}\r\n```\r\n\r\n### 4. 메서드 정의 방법\r\n\r\n프로퍼티와 마찬가지로 메서드 역시 this에 만들어 줍니다.\r\n\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티1 = 초깃값;\r\n  this.프로퍼티2 = 초깃값;\r\n  this.메서드1 = function(){\r\n  }\r\n  this.메서드2 = function(){\r\n  }\r\n}\r\n```\r\n\r\n### 5. 인스턴스 생성 방법\r\n\r\n함수 방식에서 인스턴스 생성 방법은 '클래스이름' 함수를 호출할 때 앞에 `new` 키워드를 추가해 호출해주면 됩니다.\r\n\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티 = 초깃값;\r\n  this.메서드 = function(){}\r\n}\r\n\r\nvar 인스턴스 = new 클래스이름();\r\n```\r\nnew 를 붙이지 않으면 인스턴스 생성이 아닌 함수 호출이 되어 정상적으로 동작하지 않게 됩니다. \r\n\r\n### 6. 객체 외부에서 프로퍼티와 메서드 접근 방법\r\n\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티1 = 초깃값;\r\n  this.프로퍼티2 = 초깃값;\r\n  this.메서드1 = function(){\r\n  }\r\n  this.메서드2 = function(){\r\n  }\r\n}\r\n\r\nvar 인스턴스 = new 클래스이름();\r\n인스턴스.프로퍼티1;\r\n인스턴스.메서드1;\r\n```\r\n오브젝트 리터럴 방식과 동일하게 함수 방식에서도 **객체 외부에서 객체 내부에 있는 프로퍼티와 메서드에 접근하려면 접근 연산자**를 이용합니다.\r\n\r\n### 7. 객체 내부에서 프로퍼티와 메서드 접근 방법\r\n\r\n함수 방식에서도 객체 내부에서 자신의 프로퍼티와 메서드에 접근하려면 현재 객체 자신을 나타내는 this라는 키워드와 접근 연산자인 점(.)을 이용합니다.\r\n"},"id":"1ff021cb-1da4-57c4-9902-aab7b300989c"}},{"node":{"frontmatter":{"title":"level 1-15. 나누어 떨어지는 숫자 배열 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-16-level1-15-division_array-"},"internal":{"content":"# level 1. 나누어 떨어지는 숫자 배열\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12918>\r\n\r\n## 문제\r\n\r\n```\r\narray의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.\r\ndivisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- arr은 자연수를 담은 배열입니다.\r\n- 정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.\r\n- divisor는 자연수입니다.\r\n- array는 길이 1 이상인 배열입니다.\r\n\r\n#### 입출력 예\r\n\r\n| arr           | divisior | return        |\r\n| ------------- | -------- | ------------- |\r\n| [5, 9, 7, 10] | 5        | [5, 10]       |\r\n| [2, 36, 1, 3] | 1        | [1, 2, 3, 36] |\r\n| [3, 2, 6]     | 10       | [-1]          |\r\n\r\n입출력 예 설명\r\n\r\n1. arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다.\r\n2. arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다.\r\n1. 3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다.\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(arr, divisor) {\r\n  var answer = [];\r\n  for(var i in arr){\r\n    arr[i] % divisor == 0 ? answer.push(arr[i]) : '';\r\n  }\r\n  \r\n  if(answer.length > 0){\r\n    answer.sort(function(a, b){ return a - b;}); \r\n  }else{\r\n    answer.push(-1);\r\n  }\r\n  \r\n  return answer;\r\n}\r\n```\r\n반복문으로 arr의 요소 각각을 divisor로 나누어 나머지가 0 이라면 answer에 push() 메서드로 넣는다.  \r\n나온 결과 answer의 요소가 있다면 오름차순으로 정렬, 없으면 -1을 추가 \r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(arr, divisor) {\r\n  var answer = [];\r\n  arr.map((o) => {\r\n    o % divisor === 0 && answer.push(o);\r\n  })\r\n  return answer.length ? answer.sort((a, b) => a - b) : [-1];\r\n}\r\n```\r\n`map()` 메서드로 새 배열를 만들었다. `&&` 짧은 조건문으로 왼쪽 변이 참이면 오른쪽 변을 실행한다.  \r\n삼항연산자로 return 값 추출 \r\n```javascript\r\nfunction solution(arr, divisor) {\r\n  var answer = arr.filter(v => v % divisor == 0);\r\n  return answer.length == 0 ? [-1] : answer.sort((a,b) => a-b);\r\n}\r\n```\r\n위와 같은 방법이지만, `filter()` 메서드를 사용했다.\r\n\r\n## 배운점\r\n\r\n짧은 조건문\r\n\r\n- `||` : 조건이 거짓일 때 실행\r\n- `&&` : 조건이 참일 때 실행\r\n\r\n**array.`map`( function ( currentValue [, index] [, arr] ), thisValue )**  \r\n:배열의 각 요소에 대해 제공된 함수를 순서대로 한 번 호출하여 새 배열을 작성  \r\n(콜백함수에 들어가는 첫번째 매개변수는 처리하는 배열의 현재 요소)  \r\n\r\n**array.`filter`( function ( currentValue [, index] [, arr] ), thisValue )**  \r\n:테스트를 통과하는 요소를 걸러내어 배열로 true/false 반환, 없으면 빈 배열\r\n"},"id":"82fa6d17-9a0a-5504-a78b-5690d3acccc2"}},{"node":{"frontmatter":{"title":"level 1-14. 문자열 다루기 기본 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-13-level1-14-string"},"internal":{"content":"# level 1. 문자열 다루기 기본 \r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12918>\r\n\r\n## 문제\r\n\r\n```\r\n문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 a234이면 \"False\"를 리턴하고 1234라면 \"True\"를 리턴하면 됩니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n- s는 길이 1 이상, 길이 8 이하인 문자열입니다.\r\n\r\n#### 입출력 예\r\n\r\ns | return \r\n--------- | ---------\r\n\"a234\" | false\r\n\"1234\" | true\r\n\"12345\" | false\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(a, b) {\r\n  var answer = false;\r\n  var condition = s.length == 4 || s.length == 6\r\n  if(condition){\r\n    answer = true;\r\n    for(var i in s){\r\n      if(isNaN(s[i])) {\r\n        return answer = false;\r\n    }\r\n  }\r\n\r\n  return answer;\r\n}\r\n```\r\n변수 answer 초기 값은 false.  \r\n변수 condition 으로 s의 길이 4 또는 6 인지 검사하고, true면 answer의 값을 true로 바꾸고 내부 반복문 실행.  \r\ns의 각각을 isNaN() 메서드로 검사. isNaN이 true일 경우 answer의 값을 false로 변경하고 return\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(a, b) {\r\n  var regex = /^\\d{6}$|^\\d{4}$/;\r\n  return regex.test(s);\r\n}\r\n```\r\n정규표현식으로 문자열의 길이, 내부의 구성까지 변수 한줄로 조건 걸고, test() 메서드로 검사.\r\n\r\n```javascript\r\nfunction solution(a, b) {\r\n  return s.length == 4 || s.length == 6 ? !isNaN(s) : false \r\n}\r\n```\r\n결론부터 쓰면 오류.  \r\n들어오는 s 전체를 isNaN() 메서드로 숫자인지 확인했는데, 지수 형식 (\"1e22\") 를 넣었을 경우 숫자로 인식하여 문제가 된다. \r\n\r\n## 배운점\r\n\r\n정규표현식. 알고 있지만, 필요할 때 검색해서 쓰다 보니, 정확한 개념과 이해도가 떨어진다. 조만간 포스팅 예정\r\n"},"id":"2892f501-f79f-5344-beea-3fa7bd7cf9f1"}},{"node":{"frontmatter":{"title":"자바스크립트의 오브젝트 리터럴 방식으로 클래스 만들기","category":"Javascript"},"fields":{"slug":"2019-12-13-class_literal"},"internal":{"content":"\r\n# 오브젝트 리터럴 방식으로 클래스 만들기\r\n\r\n클래스를 만드는 세 가지 방법 중 가장 간단한 방법입니다.\r\n\r\n## 사용법\r\n\r\n클래스를 만드는 방법은 크게 `클래스 설계 단계`와 설계한 클래스를 사용하는 단계인 `객체 사용 단계`로 나눠집니다.\r\n\r\n| 구분 | 진행 순서 |\r\n| --- | --- |\r\n클래스 설계 단계 | 1. 문법 <br> 2. 생성자 정의 방법 <br> 3. 프로퍼티 정의 방법 <br> 4. 메서드 정의 방법\r\n객체 사용 단계 | 5. 인스턴스 생성 방법 <br> 6. 객체 외부에서 프로퍼티와 메서드 접근 방법 <br> 7. 객체 내부에서 프로퍼티와 메서드 접근 방법\r\n\r\n### 1. 문법\r\n\r\n```javascript\r\nvar 인스턴스 = {\r\n  프로퍼티 : 초깃값,\r\n  ...\r\n  메서드 : function(){\r\n    ...\r\n  },\r\n  ...\r\n}\r\n```\r\n리터럴 방식은 객체 리터럴을 의미하는 `{}` 내부에 프로퍼티와 메서드를 정의(포장)하는 구조입니다. \r\n\r\n### 2. 생성자 정의 방법\r\n\r\n생성자는 인스턴스가 만들어지면서 자동으로 호출되는 함수를 말합니다.  \r\n생성자의 주 용도는 프로퍼티 초기화 역할을 담당합니다.  \r\n리터럴 방식에서는 생성자가 존재하지 않습니다.  \r\n생성자에 대한 설명은 후에 함수 방식 클래스에서 다뤄봅시다.\r\n\r\n### 3. 프로퍼티 정의 방법\r\n\r\n리터럴 방식에서는 다음과 같이 프로퍼티를 정의합니다.\r\n\r\n```javascript\r\nvar 인스턴스 = {\r\n  프로퍼티1 : 초깃값,\r\n  프로퍼티2 : 초깃값,\r\n}\r\n```\r\n콜론을 기준으로 **왼쪽에는 프로퍼티 이름**, **오른쪽에는 값**이 온다. 프로퍼티 구분은 `콤마(,)` 입니다.\r\n\r\n### 4. 메서드 정의 방법\r\n\r\n리터럴 방식에서는 프로퍼티 정의 방법과 동일하게 메서드를 정의합니다.\r\n\r\n```javascript\r\nvar 인스턴스 = {\r\n  프로퍼티1 : 초깃값,\r\n  프로퍼티2 : 초깃값,\r\n  메서드1:fucntion(){\r\n\r\n  },\r\n  메서드2:fucntion(){\r\n\r\n  }\r\n}\r\n```\r\n이로써 클래스 설계 단계가 끝났습니다.\r\n\r\n> 비유하자면 붕어빵을 만들기 위해 붕어빵 틀을 만든 셈입니다.\r\n\r\n### 5. 인스턴스 생성 방법\r\n\r\n> 붕어빵 틀에 재료를 넣고 붕어빵을 만들어봅시다.\r\n\r\n계속 언급했듯이 클래스를 사용하기 위해서는 인스턴스를 생성해야 합니다. 리터럴 방식은 클래스를 정의함과 동시에 자동으로 인스턴스가 만들어집니다. 인스턴스를 만들기 위해 다른 작업을 해주지 않아도 됩니다. 하지만 다른 클래스 정의 방법과 달리 인스턴스를 하나 이상 만들 수 없다는 단점을 가지게 됩니다.\r\n\r\n> 다시 말해, 붕어빵 틀이 있어도 두 개 이상의 붕어빵을 만들 수 없다는 뜻 입니다.\r\n\r\n```javascript\r\nvar 인스턴스 = {\r\n  프로퍼티1 : 초깃값,\r\n  프로퍼티2 : 초깃값,\r\n  메서드1:fucntion(){\r\n\r\n  },\r\n  메서드2:fucntion(){\r\n\r\n  }\r\n}\r\n\r\n인스턴스.프로퍼티;\r\n인스턴스.메서드();\r\n```\r\n객체 외부에서 프로퍼티와 메서드에 접근하려면 다음과 같이 접근연산자 `점(.)`을 사용합니다.\r\n\r\n객체 외부에서 프로퍼티와 메서드에 접근하는 방법은 오브젝트 리터럴 방식 이외에도 함수 방식과 프로토타입 방식 모두 동일합니다.\r\n\r\n덧붙여 설명하자면 jQuery 구문 역시 접근 연산자를 사용한 경우입니다.\r\n\r\n```javascript\r\n$(\"p\").css(\"color\",\"#f00\");\r\n```\r\n함수 이름이 $인 함수를 매개변수 값을 \"p\"로 하여 호출한 것이며, $() 함수에서는 jQuery의 인스턴스를 만들어 리턴해 주기 때문에 접근연산자 점(.)을 이용해 jQuery에서 제공하는 기능 중 css() 기능을 호출해 글자색을 변경하는 구문입니다.\r\n\r\n### 7. 객체 내부에서 프로퍼티와 메서드 접근 방법\r\n\r\n객체 내부에서 자신의 프로퍼티와 메서드에 접근하려면 현재 객체 자신을 나타내는 `this`라는 속성과 접근연산자 점(.)을 사용합니다. \r\n\r\n```javascript\r\nvar 인스턴스 = {\r\n  프로퍼티1 : 초깃값,\r\n  프로퍼티2 : 초깃값,\r\n  메서드1:fucntion(){\r\n    alert(this.프로퍼티1);\r\n    this.메서드2();\r\n  },\r\n  메서드2:fucntion(){\r\n\r\n  }\r\n}\r\n\r\n인스턴스.프로퍼티;\r\n인스턴스.메서드();\r\n```\r\n객체 내부에서 프로퍼티와 메서드에 접근하는 방법은 리터럴 방식, 함수 방식, 프로토 타입 방식 모두 동일합니다. \r\n\r\n## 특징\r\n\r\n### 1. 인스턴스는 하나만 작성 가능.  \r\n : 오브젝트 리터럴 방식은 **정의함과 동시에 인스턴스가 자동**으로 만들어지기 때문에 인스턴스를 만드는 구문을 작성하지 않아도 되지만 인스턴스를 여러 개 만들 수 없는 단점이 있습니다.\r\n \r\n### 2. 주 용도는 여러개의 데이터 포장용\r\n: 인스턴스를 여러 개 만들 수 없어서 여러 개의 데이터를 묶어 값을 **보관**하거나 함수의 매개변수 값으로 **전달**할 때 주로 사용합니다.\r\n\r\n```javascript\r\n// 오브젝트 리터럴 방식으로 데이터 생성\r\nvar userinfo = {\r\n  userName = \"김초코\",\r\n  id = \"choco_kim\",\r\n  age = 25\r\n}\r\n\r\nshowInfo(userinfo);\r\n\r\n// 함수에서 데이터 사용\r\nfunciton showInfo(userinfo){\r\n  document.write(\"name = \"+userInfo.userName, \", id = \"+userInfo.id);\r\n}\r\n```\r\n\r\n## 실무에서 오브젝트 리터럴 사용 예\r\n\r\n```javascript\r\nvar $ct = $(\"#ct1\");\r\n$ct.css({\r\n  \"position\":\"absolute\",\r\n  \"left\":100,\r\n  \"top\":100\r\n})\r\n```\r\n\r\n리터럴은 여러 개의 데이터를 묶을 때 주로 사용합니다.\r\n"},"id":"8f086ba7-66ac-5c1f-87aa-2fddaf78f22f"}},{"node":{"frontmatter":{"title":"자바스크립트의 클래스 관련 기본 개념과 용어정리","category":"Javascript"},"fields":{"slug":"2019-12-12-02-about_class"},"internal":{"content":"\r\n# 클래스 관련 기본 개념과 용어정리\r\n\r\n자바스크립트에서는 클래스 만드는 방법을 세 가지 제공하는데요, 세 가지 방법에서 공통으로 사용하는 클래스 용어와 개념에 대해 학습합니다.\r\n\r\n## 인스턴스\r\n\r\n함수를 사용하려면 함수 호출을 해줘야 하듯 클래스를 사용하려면 일반적으로 인스턴스를 생성해줘야 합니다.\r\n\r\n- 인스턴스를 생성하지 않고 사용하는 클래스도 있습니다. 일단 지금은 모든 클래스는 인스턴스 생성 후 사용할 수 있다고 이해하시면 됩니다. \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/javascript/class-bungeo.jpg\" alt=\"\">\r\n<figcaption>붕어빵 틀은 클래스, 붕어빵은 인스턴스</figcaption>\r\n</figure>\r\n</center>\r\n\r\n클래스는 설계도이고, 인스턴스는 설계도대로 만들어진 결과물이 됩니다.\r\n\r\n---\r\n\r\n실무를 예로 들어 설명하자면 한 페이지에 두 개의 탭패널이 있는 경우 두 개의 클래스를 만드는 것이 아니라 하나의 탭패널 `클래스`를 만든 후 두 개의 탭패널 `인스턴스`를 만들어 사용합니다.\r\n\r\n> 웹페이지 하나에 탭패널이 두 개가 들어가는 경우 탭패널 클래스 인스턴스를 두개 만들어서 사용하면 됩니다.\r\n\r\n인스턴스는 주로 `new`라는 키워드를 이용해 만듭니다.\r\n\r\n```javascript\r\nvar 인스턴스 = new TabPanel();\r\n```\r\n\r\n인스턴스가 만들어지면 이제 클래스에 포장해 놓은 변수(프로퍼티)와 함수(메서드)를 사용할 수 있게 됩니다.\r\n\r\n## 객체란?\r\n\r\n쉽게 설명하면 객체라는 용어는 인스턴스의 다른 말일뿐 두 용어 모두 클래스의 실체를 나타내는 용어입니다.\r\n\r\n아래 구문은 위에서 \"TabPanel 클래스의 `인스턴스` 생성\" 으로 해석했지만,\r\n\r\n```javascript\r\nvar 인스턴스 = new TabPanel();\r\n```\r\n\r\n\"TabPanel 클래스의 `객체` 생성\" 이라고도 해석해도 됩니다.  \r\n좀 더 명확히 구분해 설명하면 인스턴스라는 용어는 new 키워드를 이용해 `클래스의 실체를 생성`할 때 주로 사용하며 객체라는 용어는 인스턴스 생성 후 `클래스에서 제공하는 프로퍼티와 메서드를 사용`할 때 주로 사용합니다.  \r\n\r\n- 인스턴스 예 : 탭패널을 사용하기 위해서는 탭패널의 인스턴스를 먼저 만들어주세요.\r\n- 객체 예 : 특정 탭패널을 동적으로 선택하고 싶다면 탭패널 객체의 A() 메서드를 호출하면 됩니다.\r\n\r\n위의 예처럼 인스턴스와 객체는 동일한 의미를 가질 때도 있고 명확히 구분해서 사용할 때도 있으니 상황에 맞게 선택해서 사용하면 됩니다.\r\n\r\n## 프로퍼티\r\n\r\n클래스 내부에 만드는(포장하는) 변수를 `프로퍼티`라고 부르며 `멤버변수`라고도 부릅니다.\r\n\r\n```javascript\r\nvar 변수 = 값;\r\n```\r\n\r\n프로퍼티에는 주로 객체 내부에서 사용하는 일반적인 정보와 객체 내부 함수(메서드)에서 처리한 결과값이 저장됩니다.\r\n\r\n> 예를 들어 탭패널로 비유하자면 현재 선택된 탭패널의 인덱스 정보나 항목이 프로퍼티에 담기게 됩니다.\r\n\r\n## 메서드\r\n\r\n클래스에 만드는(포장하는) 함수를 `메서드`라고 부르며 `멤버함수`라고도 부릅니다.\r\n\r\n```javascript\r\nfunction 함수(){\r\n\r\n}\r\n```\r\n\r\n메서드는 주로 객체의 프로퍼티 값을 변경하거나 알아내는 기능과 클래스를 대표하는 기능이 담기게 됩니다.\r\n"},"id":"76a65f16-76b0-5f18-9e34-178a02540fed"}},{"node":{"frontmatter":{"title":"자바스크립트의 클래스 소개","category":"Javascript"},"fields":{"slug":"2019-12-12-01-intro_class"},"internal":{"content":"\r\n# Javascript 클래스 소개\r\nJavascript : 프로토타입 기반의 객체지향 언어\r\n\r\n## 클래스란?\r\n\r\n함수가 특정 알고리즘을 포장하는 기술이라면 클래스는 이렇게 만들어진 수많은 변수와 함수 중 연관 있는 변수와 함수만을 선별해 포장하는 기술입니다. 이렇게 클래스로 포장하는 이유는 `객체 단위`로 코드를 그룹화하고 코드를 재사용하기 위해서입니다.\r\n\r\n| | 클래스 | 함수 \r\n--- | --- | ---\r\n포장 내용 | `연관 있는` 변수와 함수 | `특정 기능`을 하는 변수 + 구문\r\n기능 | 객체 단위의 코드 그룹화<br>객체 단위의 중복 코드 제거 및 코드 재사용 | 기능 단위의 코드 그룹화<br>기능 단위의 중복 코드 제거 및 코드 재사용\r\n\r\n### 객체 단위의 코드 그룹화\r\n\r\n앞에서 알아본 것처럼 클래스의 대표적인 기능은 연관 있는 변수와 함수를 그룹화하는 기능입니다.\r\n\r\n- 연관 있는 변수와 함수란?\r\n  - 플젝을 진행하다 보면 함수 개수가 수백, 수천, 수만 개가 만들어지기도 합니다. 그랬을때 코드를 찾기도, 수정하기도 어려워져 관리가 힘들어집니다. 또 다른 문제로는 함수 단위 코딩의 경우 함수 이름이나 변수 이름을 같게 만들어 충돌이 발생하는 사태까지 발생하게 됩니다. \r\n\r\n> 예를 들어봅시다. 우리나라의 전국을 하나의 시로 통합해 관리하는 경우와 같습니다. 만약 이렇다면 전국에 같은 이름을 가진 사람이 엄청 많아질 것 이고 차고자 하는 사람을 효율적으로 찾기가 어렵게 되겠죠?  \r\n>> 이를 해결하기 위해 시도군으로 나눠서 관리합니다. 만약 서울에 사는 김철수를 찾을 때 전국을 찾을 필요 없이 서울에서만 찾으면 됩니다.\r\n\r\n클래스의 역할이 바로 시도군을 나누는 역할입니다.\r\n\r\n### 객체 단위의 중복 코드 제거 및 코드 재사용성\r\n\r\n클래스를 이용하면 객체 단위로 코드를 재사용할 수 있습니다. 예를 들어 탭패널 3개가 들어있는 웹 페이지를 만들어야 하는 경우 클래스 하나로 독립적으로 동작하는 3개의 탭패널을 모두 만들 수 있습니다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/javascript/class-tab-panel.jpg\" alt=\"\">\r\n<figcaption>클래스를 이용하면 클래스 하나로 독립적으로 동작하는 3개의 탭패널을 모두 만들 수 있습니다.</figcaption>\r\n</figure>\r\n</center>\r\n\r\n---\r\n\r\n## 자바스크립트에서 클래스란?\r\n\r\n미리 언급하자면 사실 자바스크립트는 객체지향 크로그래밍 언어에서 기본적으로 제공하는 클래스라는 개념을 제공하지 않습니다. 하지만 자바스크립트에서도 클래스처럼 사용할 수 있는 방법을 세 가지 지원합니다.\r\n\r\n[리터럴 방식]\r\n```javascript\r\nvar 인스턴스 = {\r\n  프로퍼티1: 초깃값,\r\n  프로퍼티2: 초깃값,\r\n\r\n  메서드1:function(){\r\n\r\n  },\r\n  메서드2:function(){\r\n\r\n  },\r\n}\r\n```\r\n[함수 방식]\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티1 = 초깃값;\r\n  this.프로퍼티2 = 초깃값;\r\n\r\n  this.메서드1 = function(){\r\n\r\n  }\r\n  this.메서드2 = function(){\r\n\r\n  }\r\n}\r\n```\r\n[프로토타입 방식]\r\n```javascript\r\nfunction 클래스이름(){\r\n  this.프로퍼티1 = 초깃값;\r\n  this.프로퍼티2 = 초깃값;\r\n}\r\n\r\n클래스이름.prototype.메서드1 = function(){\r\n\r\n}\r\n클래스이름.prototype.메서드2 = function(){\r\n\r\n}\r\n```\r\n\r\n뒤에서 나오는 모든 방법을 모두 클래스라고 부르겠습니다.\r\n\r\n> 자바스크립트 + jQuery 완전정복 스터디3 발췌 및 참고\r\n"},"id":"05f2a371-174b-5ce3-acc5-bd9702bbb703"}},{"node":{"frontmatter":{"title":"브라우저 너비에 따른 반응형 속성 추가","category":"Javascript"},"fields":{"slug":"2019-12-11-response_class"},"internal":{"content":"# 브라우저 너비에 따른 반응형 속성 추가 반응형 사이트 만들기\r\n\r\n## 예제 코드\r\n\r\n```javascript\r\nfunction responsiveImg(){\r\n  var width = $(window).width()\r\n  //var width = document.documentElement.offsetWidth;\r\n  \r\n  var sizeMode = width > 1440 ? 4 : width > 1023 ? 3 : width > 767 ? 2 : 1;\r\n  //var sizeMode = width > 1440 ? 4 \r\n  //             : width > 1023 ? 3 \r\n  //             : width > 767 ? 2 \r\n  //             :              1;\r\n\r\n  document.documentElement.className = document.documentElement.className.replace(/ *s[1-4][1-4]?/g, '')+(' s'+ sizeMode);\r\n});\r\n}\r\n\r\n$(window).on('load resize', function(){\r\n  responsiveImg();\r\n});\r\n\r\n```\r\n\r\n### 풀이\r\n\r\n변수 sizeMode 는 삼항연산자(이중삼항연산자) 사용 (조건이 만족하면 전자를 출력, 아니라면 후자 출력)\r\n\r\n1. 조건 (width가 1440 이상인가)를 실행 -> 만족하면 4를 출력 만족 못하면 2 실행\r\n2. 조건 (width가 1023 이상인가)를 실행 -> 만족하면 3을 출력 만족 못하면 3 실행\r\n3. 조건(width가 767 이상인가)를 실행 -> 만족하면 2를 출력 만족 못하면 1을 출력\r\n\r\n변수 sizeMode는 각각의 값에 따라 반응형 사이즈를 가지고 결과 값을 document에 클래스로 추가\r\n윈도우창 load, resize 될 때 responsiveImg() 실행\r\n"},"id":"ed06f583-e307-58ac-afba-6e5908c2189a"}},{"node":{"frontmatter":{"title":"스크롤 내리면 헤더 위치에 맞게 메뉴 고정","category":"Javascript"},"fields":{"slug":"2019-12-10-scroll_header_fix"},"internal":{"content":"# 스크롤 내리면 헤더 위치에 맞게 메뉴 고정\r\n\r\n## 예제 코드\r\n\r\n```css\r\n.sticky {position: fixed;top: 0;width: 100%;}\r\n```\r\n```javascript\r\nwindow.onscroll = function() {myFunction()};\r\n// 스크롤 할때 myFunction() 실행\r\n\r\nvar header = document.getElementById(\"myHeader\");\r\nvar sticky = header.offsetTop;\r\n\r\nfunction myFunction() {\r\n  if (window.pageYOffset > sticky) {\r\n    header.classList.add(\"sticky\");\r\n  } else {\r\n    header.classList.remove(\"sticky\");\r\n  }\r\n}\r\n\r\n```\r\n\r\n### 풀이\r\n\r\n현재 페이지의 Y값이 header의 좌표값보다 크면 헤더 고정  \r\npageYOffset -> scrollY 과 같음 (브라우저 호환성때문에 pageYOffset를 쓰도록 권장)\r\n\r\n> 참고 : <https://www.w3schools.com/>\r\n"},"id":"55ff5192-7bed-52ba-823c-184581ef3d13"}},{"node":{"frontmatter":{"title":"level 1-13. 2016년 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-10-level1-13-2016"},"internal":{"content":"# level 1. 2016년\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12901>\r\n\r\n## 문제\r\n\r\n```\r\n2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT 입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- 2016년은 윤년입니다.\r\n- 2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)\r\n\r\n#### 입출력 예\r\n\r\na | b | return \r\n--------- | --------- | ---------\r\n5 | 24 | TUE\r\n1 | 1 | FRI\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(a, b) {\r\n  var day = [\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"]\r\n  var setDate = new Date;\r\n  setDate.setFullYear( 2016, a-1, b)\r\n  var answer = setDate.getDay();\r\n  return day[answer];\r\n}\r\n```\r\nDate 객체 생성 후 setFullYear() 메서드로 날짜 지정\r\ngetDay() 메서드로 요일 인덱스 불러와서 day 변수에 저장된 요일을 불러옴.\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(a, b) {\r\n  var date = new Date(2016, (a - 1), b);\r\n  return date.toString().slice(0, 3).toUpperCase();\r\n}\r\n```\r\nDate 객체를 생성할때 특정 날짜를 지정할 수 있다.  \r\nDate 객체 결과엔 요일, 월도 포함되어 object 자료형으로 나온다. toString() 메서드로 string 으로 변환 시킨 후 slice() 메서드로 요일 부분만 잘라내고, toUpperCase() 메서드로 대문자 형식으로 바꿔줌.\r\n\r\n## 배운점\r\n\r\n처음부터 문제 이해하는데 오래걸렸다.  \r\n예시로 들었던 2016년 1월 1일이 금요일이라는 조건이 진짜 있는 날인지, 문제의 조건인지 헷갈려서 어디서부터 잡아야할지 몰랐다. 결국 네이버 달력 검색해서 실제인 조건인지 찾아봤고, 실제 있는 날이였다. 처음부터 그렇다고 말했으면 훨씬 빠르고 쉽게 접근할 수 있었을텐데.  \r\n\r\n또 프로그래머스 페이지 내에 코드 실행 환경에서 new Date(); 를 아무리 실행해도 Date.now() 검색결과로 나오고 new Date 를 실행해도 요일이랑 월이 안나와서 왜 안되는지 답답해서 죽을뻔했다. 결국 또 구글 검색을 할 수 밖에 없었고, 코드는 똑같은데 결과가 안나와서 찾고 찾고 또 찾고.  \r\n\r\n결국 마음에 들지 않는 코드로 문제를 풀었고 그 스트레스가 지금까지 머리를 아프게 함.  \r\n필요없는 day 변수도 싫고 내가 아는 지식이 다르게 나와서 받은 스트레스.\r\n\r\n내일 포스팅하려다가 이거 완성 못시키면 속 뒤집어질 것 같아서 바로 포스팅. 분하다\r\n\r\n---\r\n\r\n```javascript\r\n// Date 객체 생성\r\nvar date = new Date(); // Wed Dec 11 2019 10:30:17 GMT+0900 (한국 표준시)\r\nvar date = new Date(2016, 5, 25, 15, 40, 0); // Sat Jun 25 2016 15:40:00 GMT+0900 (한국 표준시) {}\r\n```\r\nDate 객체의 매개변수가 없으면 현재 날짜와 시간을 가지고 Date 객체를 생성합니다.  \r\nDate 객체의 매개변수가 있으면 그 형태에 따라 특정 날짜와 시간을 가리키는 Date 객체를 생성합니다.\r\n\r\n### getter 메서드\r\n\r\n날짜와 관련된 `정보를 받아오기` 위한 메소드입니다.\r\n\r\nMethod | Description | range\r\n--------- | --------- | --------- \r\n`getDate()` | 현지 시각으로 현재 일자에 해당하는 숫자를 반환함. | 1 ~ 31\r\n`getDay()` | 현지 시각으로 현재 요일에 해당하는 숫자를 반환함. | 0 ~ 6\r\n`getMonth()` | 현지 시각으로 현재 월에 해당하는 숫자를 반환함. | 0 ~ 11\r\n`getFullYear()` | 현지 시각으로 현재 연도를 4비트의 숫자(YYYY)로 반환함. | YYYY\r\ngetHours() | 현지 시각으로 현재 시각에 해당하는 숫자를 반환함. | 0 ~ 23\r\ngetMilliseconds() | 현지 시각으로 현재 시각의 밀리초에 해당하는 숫자를 반환함. | 0 ~ 999\r\ngetMinutes() | 현지 시각으로 현재 시각의 분에 해당하는 숫자를 반환함. | 0 ~ 59\r\ngetSeconds() | 현지 시각으로 현재 시각의 초에 해당하는 숫자를 반환함. | 0 ~ 59\r\ngetTime() | 1970년 1월 1일 0시 0분 0초부터 현재까지의 시간을 밀리초 단위로 환산한 값을 숫자로 반환함. | -\r\ngetTimezoneOffset() | UTC로부터 현재 시각까지의 시간차를 분 단위로 환산한 값을 숫자로 반환함. | -\r\n\r\n### setter 메서드\r\n\r\n날짜와 관련된 `정보를 설정하기` 위한 메소드입니다.\r\n\r\nMethod | Description | range\r\n--------- | --------- | --------- \r\n`setDate()` | 현지 시각으로 특정 일자를 설정함. | 1 ~ 31\r\n`setMonth()` | 현지 시각으로 특정 월을 설정함.| 0 ~ 11\r\n`setFullYear()` | 현지 시각으로 특정 연도를 설정함. (`연도뿐만 아니라 월과 일자도 설정할 수 있음`)| YYYY, MM, DD\r\nsetHours() | 현지 시각으로 특정 시간을 설정함.| 0 ~ 23\r\nsetMilliseconds() | 현지 시각으로 특정 밀리초를 설정함. | 0 ~ 999\r\nsetMinutes() | 현지 시각으로 특정 분을 설정함.| 0 ~ 59\r\nsetSeconds() | 현지 시각으로 특정 초를 설정함.| 0 ~ 59\r\nsetTime() | 1970년 1월 1일 0시 0분 0초부터 밀리초 단위로 표현되는 특정 시간을 설정함.| -"},"id":"4f81434f-2658-5c87-939d-e67855c35451"}},{"node":{"frontmatter":{"title":"level 1-12. 문자열을 정수로 바꾸기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-10-level1-12-change_string"},"internal":{"content":"# level 1. 문자열을 정수로 바꾸기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12925>\r\n\r\n## 문제\r\n\r\n```\r\n문자열 str를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n- str의 길이는 1 이상 5이하입니다.\r\n- str의 맨앞에는 부호(+, -)가 올 수 있습니다.\r\n- str는 부호와 숫자로만 이루어져있습니다.\r\n- str는 \"0\"으로 시작하지 않습니다.\r\n\r\n#### 입출력 예\r\n\r\nstr | return \r\n--------- | ---------\r\n\"1234\" | 1234\r\n\"-1234\" | -1234\r\n\r\n입출력 예 설명  \r\n\r\n- 예를들어 str이 1234이면 1234를 반환하고, -1234이면 -1234를 반환하면 됩니다.\r\n- str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다.\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(str) {\r\n  var answer = Number(str);\r\n  return answer;\r\n}\r\n```\r\nNumber() 메서드로 자료형 변형\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(str) {\r\n  return str/1\r\n}\r\n```\r\n신박. 들어온 자료형을 사칙연산으로 문자가 자동으로 파싱된다고 함\r\n\r\n## 배운점\r\n\r\n이 문제도 가뿐했지만 다른 사람의 풀이는 여전히 대단.\r\n"},"id":"715f1dcb-f42c-5e8a-9524-7607abb417b7"}},{"node":{"frontmatter":{"title":"level 1-11. 짝수와 홀수 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-10-level1-11-odd_even"},"internal":{"content":"# level 1. 짝수와 홀수\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12937>\r\n\r\n## 문제\r\n\r\n```\r\n정수 num이 짝수일 경우 \"Even\"을 반환하고 홀수인 경우 \"Odd\"를 반환하는 함수, solution을 완성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - num은 int 범위의 정수입니다.\r\n  - 0은 짝수입니다.\r\n\r\n#### 입출력 예\r\n\r\nnum | return \r\n--------- | ---------\r\n3 | \"Odd\"\r\n4 | \"Even\"\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(num) {\r\n  var answer = num%2 == 0 ? \"Even\" : \"Odd\"\r\n  return answer;\r\n}\r\n```\r\n삼항연산자로 조건에 따른 answer 를 return\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n접근방법은 나와 비슷해서 따로 적지 않는다.\r\n\r\n## 배운점\r\n\r\n가뿐.\r\n"},"id":"a0f3c961-d0c2-54ca-a76c-0b0c75d01458"}},{"node":{"frontmatter":{"title":"level 1-10. K번째수 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-09-level1-10-number_of_k"},"internal":{"content":"# level 1. K번째수\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/42748>\r\n\r\n## 문제\r\n\r\n```\r\n배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.\r\n\r\n예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면\r\n\r\n  1. array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.\r\n  2. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.\r\n  3. 2에서 나온 배열의 3번째 숫자는 5입니다.  \r\n\r\n배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - array의 길이는 1 이상 100 이하입니다.\r\n  - array의 각 원소는 1 이상 100 이하입니다.\r\n  - commands의 길이는 1 이상 50 이하입니다.\r\n  - commands의 각 원소는 길이가 3입니다.\r\n\r\n#### 입출력 예\r\n\r\narray | commands | return \r\n--------- | --------- | ---------\r\n[1, 5, 2, 6, 3, 7, 4] | [[2, 5, 3], [4, 4, 1], [1, 7, 3]] | [5, 6, 3]\r\n\r\n입출력 예 설명  \r\n  1. [1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.\r\n  1. [1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.\r\n  1. [1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(array, commands) {\r\n  var answer = [];\r\n\r\n  for(var i = 0; i<commands.length; i++){\r\n    var slice_sort = array.slice(commands[i][0]-1, commands[i][1])\r\n                          .sort(function(a, b){ return a - b; }) \r\n                          .splice(commands[i][2] - 1 ,1);\r\n    answer.push(Number(slice_sort));\r\n  }\r\n  \r\n  return answer;\r\n}\r\n```\r\n그동안 공부했던 array 관련 메서드를 활용할 수 있었다.  \r\n1. 들어오는 array `slice()` 메서드를 활용하여 commands의 배열의 첫번째, 두번째 요소로 자름\r\n2. `sort()` 메서드로 오름차순으로 정렬\r\n3. `splice()` 메서드로 commands 의 세번째 요소를 잘라냄\r\n4. 결과로 나온 배열 slice_sort를 숫자열로 바꾸고 answer 변수에 `push()` 로 채워넣고, return\r\n\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(seoul) {\r\n  return commands.map(v => {\r\n    return array.slice(v[0] - 1, v[1]).sort((a, b) => a - b).slice(v[2] - 1, v[2])[0];\r\n  });\r\n}\r\n```\r\n`map()` 메서드로 새 배열을 생성. 내 코드의 push(), Number() 기능을 쓰지 않아도 됨.\r\n\r\n## 배운점\r\n\r\n생각보다 어려웠다. 써야하는 메서드도 많았고 복잡했다. 만명 이상이 문제를 풀은걸 보면 다들 열심히 하나보다. 가만히 있을 순 없음.\r\n\r\n**array.map(function(currentValue, index, arr), thisValue)**  \r\n함수를 호출 한 결과로 새 배열을 작성, 배열의 각 요소에 대해 제공된 함수를 순서대로 한 번 호출 \r\n"},"id":"48853c1f-ff73-598b-81e6-12ba5d94733c"}},{"node":{"frontmatter":{"title":"level 1-9. 서울에서 김서방 찾기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-09-level1-09-kim"},"internal":{"content":"# level 1. 서울에서 김서방 찾기 \r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12919>\r\n\r\n## 문제\r\n\r\n```\r\nString형 배열 seoul의 element중 Kim의 위치 x를 찾아, 김서방은 x에 있다는 String을 반환하는 함수, solution을 완성하세요. seoul에 Kim은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - seoul은 길이 1 이상, 1000 이하인 배열입니다.\r\n  - seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다.\r\n  - \"Kim\"은 반드시 seoul 안에 포함되어 있습니다.\r\n\r\n#### 입출력 예\r\n\r\nseoul | return \r\n--------- | ---------\r\n[\"Jane\", \"Kim\"] | 김서방은 1에 있다\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(seoul) {\r\n  for(var i in seoul){\r\n    if(seoul[i] == 'Kim') return '김서방은 '+i+'에 있다';\r\n  }\r\n}\r\n```\r\n보자마자 for in 문 돌려서 찾아야겠다고 생각했고 최대한 짧고 간결하게 풀어냈다...!\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(seoul) {\r\n  var idx = seoul.indexOf('Kim');\r\n  return \"김서방은 \" + idx + \"에 있다\";\r\n}\r\n```\r\n위에서 말했듯이 반복문을 생각했는데 indexOf() 메서드를 배열에 쓴다는 것은 생각도 못했다...\r\n\r\n## 배운점\r\n\r\n많은 문제들을 풀어봐야 다른 해결책도 생각할 수 있는 것 같다...  \r\nfor in 반복문은 성능을 하락시키는 걸 알았지만...ㅠㅠ 다른 생각이 안났다\r\n\r\n- arr.indexOf(searchElement[, fromIndex]) : Array.prototype.indexOf()\r\n"},"id":"777b73ef-1d2a-534a-b8aa-bd1c97e3ae5a"}},{"node":{"frontmatter":{"title":"level 1-8. 두 정수 사이의 합 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-06-level1-08-sum_of_numbers"},"internal":{"content":"# level 1. 두 정수 사이의 합\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12912>\r\n\r\n## 문제\r\n\r\n```\r\n두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.\r\n예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.\r\n  - a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.\r\n  - a와 b의 대소관계는 정해져있지 않습니다.\r\n\r\n#### 입출력 예\r\n\r\na | b | return \r\n--------- | --------- | ---------\r\n3 | 5 | 12\r\n3 | 3 | 3\r\n5 | 3 | 12\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(a, b) {\r\n  var number = [a, b].sort(function(a, b) {return a - b});\r\n\r\n  var answer = 0;\r\n  var gap = Math.abs(number[1] - number[0]);\r\n  \r\n  var i = 0;\r\n  do{\r\n    answer += (number[0]+i);\r\n    i++;\r\n  }\r\n  while(i <= gap)\r\n  \r\n  return answer;\r\n}\r\n```\r\n변수 number는 매개변수로 들어온 a,b 를 배열로 만들고, `sort()` 메서드를 사용하여 오름차순 순으로 배열한 후 a 값에서 b를 뺀 값을 넣는다.  \r\n  \r\n변수 gap 은 오름차순으로 정렬한 number 배열의 두 수 사이의 절댓값.  \r\n  \r\ndo while 반복문 사용으로 i는 0부터 gap의 값까지 반복을 돈다.\r\n반복을 돌 때 마다 number[0] 즉, 첫번째 배열의 값과 1씩 늘어난 i의 값을 더하여 answer의 안에 넣어준다.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(a, b) {\r\n  return (a+b)*(Math.abs(b-a)+1)/2;\r\n}\r\n```\r\na와 b를 더한 값에 a에서 b를 뺀 값의 절대값에 1을 더한값을 곱하고 2로 나눴다...?\r\n저게 되나 싶었는데 문제들에 전부 적용된다.\r\n진짜 수학으로 박살냄...ㅎ 오져버림...\r\n\r\n```javascript\r\nfunction solution(a, b, answer = 0) {\r\n  for (var i = Math.min(a, b); i <= Math.max(a, b); i++) answer += i;\r\n  return answer;\r\n}\r\n```\r\n처음부터 answer 라는 변수를 0으로 넣어주었다.\r\n반복문으로 a와 b중 작은수를 i의 값으로 넣어주고, 큰 수의 값까지 만큼 반복문을 돌렸다.  \r\nanswer 에 작은 수 부터 큰 수까지 더해줌.\r\n***\r\n\r\n## 배운점\r\n\r\n이 문제도 전에 풀고 후에 포스팅을 하는 중인데 전에 나는 왜 저렇게 풀었는지 모르겠다... 음수에서 고난을 겪었던 건 기억나는데...ㅎ;  \r\n지금 보니 다른 사람의 두 번째 풀이가 정석? 처럼 보인다  \r\n과거의 나는 저 문제를 되게 힘들게 풀었다는게 느껴지네\r\n\r\n- sort() 메서드를 그냥 사용하면 숫자를 문자열로 인식하여 100이 25보다 작다는 결과가 나온다. \r\n- do while 반복문\r\n"},"id":"460ad8c5-d597-5d48-8d63-2274e97c1987"}},{"node":{"frontmatter":{"title":"level 1-7. 가운데 글자 가져오기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-06-level1-07-center_text"},"internal":{"content":"# level 1. 가운데 글자 가져오기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12903>\r\n\r\n## 문제\r\n\r\n```\r\n단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요. 단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - s는 길이가 1 이상, 100이하인 스트링입니다.\r\n\r\n#### 입출력 예\r\n\r\ns | return \r\n--------- | ---------\r\n\"abcde\" | \"c\"\r\n\"qwer\" | \"we\"\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(s) {\r\n  var answer = '';\r\n  var sLength = Math.floor(s.length/2);\r\n\r\n  answer = (s.length % 2 == 0) ? s[sLength-1]+s[sLength] : s[sLength];\r\n  return answer;\r\n}\r\n```\r\n변수 sLength 는 매개변수 s의 개수를 2로 나눈 몫 \r\nanswer 는 s.length를 2로 나눈 나머지가 0 이라면 sLength 번째 문자열과 sLength+1 번째 문자열을 반환.\r\n그렇지 않으면 sLength 번째의 문자열 반환\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(s) {\r\n  return s.substr(Math.ceil(s.length / 2) - 1, s.length % 2 === 0 ? 2 : 1);\r\n}\r\n```\r\n후... `substr()` 지정된 위치의 문자열의 일부를 반환하는 메서드..  \r\n들어온 문자열의 개수를 2로 나눈 수에서 1을 뺀 수(인덱스) 부터 나머지가 0 이면 2글자, 1이면 한글자 반환\r\n넘나 깔끔 + 퍼펙트...\r\n\r\n```javascript\r\nfunction solution(a, b, answer = 0) {\r\n  for (var i = Math.min(a, b); i <= Math.max(a, b); i++) answer += i;\r\n  return answer;\r\n}\r\n```\r\n처음부터 answer 라는 변수를 0으로 넣어주었다.\r\n반복문으로 a와 b중 작은수를 i의 값으로 넣어주고, 큰 수의 값까지 만큼 반복문을 돌렸다.  \r\nanswer 에 작은 수 부터 큰 수까지 더해줌.\r\n\r\n***\r\n\r\n## 배운점\r\n\r\n진짜 기본 메서드 활용할 수 있는게 엄청 많은데...!  \r\n`substr()` `charAt()` `repeat()` `splice()` `reduce()` `sort()` 지금 까지 나온 메서드의 활용법이라도 외워두자..!\r\n\r\nString\r\n\r\n- substr( start [, length] ) : 문자열 일부 추출 [String]\r\n- charAt( index ) : 문자열 반환 [String]\r\n- repeat( index ) : 문자열을 반복하여 반환 [String]\r\n\r\nArray\r\n\r\n- splice( start, length [, itme] ) : 배열의 요소를 제거하거나 추출 [Array]\r\n- reduce( callback [, initialValue] ) : 하나의 결과값을 반환 [Array]\r\n- sort( [compareFunction] ) : 정렬 후 반환 [Array]\r\n"},"id":"37c6b757-e789-59d0-8576-f2e3603d778a"}},{"node":{"frontmatter":{"title":"level 1-6. 제일 작은 수 제거하기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-05-level1-06-smallest-number"},"internal":{"content":"# level 1. 제일 작은 수 제거하기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12935>\r\n\r\n## 문제\r\n\r\n```\r\n정수를 저장한 배열, arr 에서 가장 작은 수를 제거한 배열을 리턴하는 함수, solution을 완성해주세요. 단, 리턴하려는 배열이 빈 배열인 경우엔 배열에 -1을 채워 리턴하세요. 예를들어 arr이 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10]면 [-1]을 리턴 합니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - arr은 길이 1 이상인 배열입니다.\r\n  - 인덱스 i, j에 대해 i ≠ j이면 arr[i] ≠ arr[j] 입니다.\r\n\r\n#### 입출력 예\r\n\r\narr | return \r\n--------- | ---------\r\n[4,3,2,1] | [4,3,2]\r\n[10] | [-1]\r\n[3,1,2,4] | [3,2,4]\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(input) {\r\n  if(input.length > 1){\r\n    var min = Math.min(...input);\r\n    input.splice(input.indexOf(min),1); \r\n  }else{\r\n    input.splice(0,1,-1); \r\n  }\r\n     \r\n  return input;\r\n}\r\n```\r\n매개변수 input의 개수가 1보다 크다면 `Math.min()` 메서드로 매개변수의 제일 작은 수의 인덱스 값이 들어 있는 변수 min 생성  \r\nArray의 배열의 항목을 추가 / 제거하고 제거 된 항목을 반환하는 `splice()` 메서드를 사용하여 변수 min의 인덱스 값에서 1개를 제거 후 반환  \r\n  \r\n매개변수 input의 개수가 1이하 라면 index 0번 부터 1개를 자르고 -1을 넣어서 반환\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(input) {\r\n  input.splice(input.indexOf(Math.min(...input)),1);\r\n  if(arr.length<1) return[-1];\r\n  return input;\r\n}\r\n```\r\n접근법은 같다. 차이점은 위 코드는 변수 지정 없이 splice() 메서드 바로 실행하고, 처음부터 조건을 돌리지 않고 math.min() 메서드 실행하게 하였다.\r\n\r\n***\r\n\r\n## 배운점\r\n\r\n이 문제는 이전에 풀고 후에 포스팅을 하는 중인데, 그 때 어떻게 풀었는지 잘 기억이 안난다...  \r\nMath.min() 메서드에 배열을 넣을때는 앞에 ... 을 붙여주면 되는데 이걸 어떻게 기억하고 있었지...?;  \r\n복습하자..\r\n\r\n- 공부 한 내용 복습하고, 활용하도록 하자!\r\n- 코드를 간결하게 쓰는 시도를 해보자.\r\n- es6 문법 공부를 하자.\r\n"},"id":"982b01f5-3ff3-5dc2-807f-b095050e81e9"}},{"node":{"frontmatter":{"title":"level 1-5. 핸드폰 번호 가리기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-05-level1-05-hide-phone-number"},"internal":{"content":"# level 1. 핸드폰 번호 가리기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12948>\r\n\r\n## 문제\r\n\r\n```\r\n프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다.\r\n전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - s는 길이 4 이상, 20이하인 문자열입니다.\r\n\r\n#### 입출력 예\r\n\r\nphone_number | return \r\n--------- | ---------\r\n01033334444 | *******4444\r\n027778888 | *****8888\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(phone_number) {\r\n  var answer = '';\r\n  var phoneLength = phone_number.length;\r\n\r\n  for(var i = 0; i<phoneLength; i++ ){\r\n    answer += (i<phoneLength-4) ? '*' : phone_number[i]\r\n  }\r\n  return answer;\r\n}\r\n```\r\n들어온 매개변수 phone_number의 글자 수를 체크하여 글자수에서 4를 뺀 수까지는 answer에 \"*\"를 삽입  \r\n그렇지 않으면 매개변수의 i번째 수 삽입\r\n지난 문제들을 참고하여 삼항 연산자를 짧게 사용\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(phone_number) {\r\n  return phone_number.replace(/\\d(?=\\d{4})/g, \"*\");\r\n}\r\n```\r\n정규식을 사용하여 뒤에서 4개의 숫자를 제외하고 * 로 변경\r\n\r\n- \\d : 숫자\r\n- (?=) : 조건\r\n- {} : 개수\r\n\r\n반복문 필요 없이 정규식을 사용해서 깔끔 + 멋있게 작성... 크으...bb\r\n\r\n```javascript\r\nfunction solution(phone_number) {\r\n  var result = \"*\".repeat(phone_number.length - 4) + phone_number.slice(-4);\r\n  return result;\r\n}\r\n```\r\n수박수 문제에서 나왔던 `repeat()` 메서드. (까먹을뻔; reduce()랑 헷갈림;><)  \r\n매개변수 phone_number의 수에서 4를 뺀 수를 반복 + phone_number를 뒤에서 부터 4개를 잘라 합침\r\n\r\n```javascript\r\nfunction solution(phone_number) {\r\n  var result = \"\"\r\n  \r\n  for(var i=0;i< phone_number.length;i++){\r\n    result += i < phone_number.length -4 ? \"*\" : phone_number.charAt(i);\r\n  }  \r\n  return result;\r\n}\r\n```\r\n나와 아주 비슷한 접근법.  \r\n지정된 인덱스의 문자를 리턴 `charAt()` 메서드를 사용 \r\n\r\n***\r\n\r\n## 배운점\r\n\r\n대체로 비슷하게 반복문을 돌려서 조건 값을 구하는 문제는 이제...수월...\r\n새로 얻은 지식들 잊지 말고 다른 문제에서 다시 활용해보자!\r\n\r\n- 공부 한 내용 복습하고, 활용하도록 하자!\r\n"},"id":"40fcadd5-7c11-546b-91a6-e74760b2961e"}},{"node":{"frontmatter":{"title":"level 1-4. 수박수박수박수박수박수? (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-04-level1-04-watermelon"},"internal":{"content":"# level 1. 수박수박수박수박수박수?\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12922>\r\n\r\n## 문제\r\n\r\n```\r\n길이가 n이고, \"수박수박수박수....\"와 같은 패턴을 유지하는 문자열을 리턴하는 함수, solution을 완성하세요. 예를들어 n이 4이면 \"수박수박\"을 리턴하고 3이라면 \"수박수\"를 리턴하면 됩니다.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - n은 길이 10,000이하인 자연수입니다.\r\n\r\n#### 입출력 예\r\n\r\nn | return \r\n--------- | ---------\r\n4 | \"수박수박\"\r\n3 | \"수박수\"\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(n) {\r\n  var answer = '';\r\n  for(var i=1; i<n+1; i++){\r\n    i%2 ? answer += '수' : answer += '박';\r\n    // result += i % 2 ? \"수\" : \"박\";\r\n  }\r\n  return answer;\r\n}\r\n```\r\n매개변수를 for 반복문을 실행하여 1부터 n까지 2로 나누어, 나머지가 0이면 차례로 answer에 \"수\"를 넣고, 나머지가 1이면 \"박\"을 넣는다.  \r\n지난 문제에서 배웠던 삼항 연산자를 활용하였다 ^^!  \r\n밑에 주석 부분은 다른 사람 풀이를 참고하여 중복되는 부분을 앞에서 빼서 더 간단하게 만들었다.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nconst soulution = n => \"수박\".repeat(n).slice(0,n);\r\n```\r\n`repeat()` 메서드를 활용하여 result 값을 반복하였고, 반복된 값에서 slice() 메서드를 활용하여 n번째 문자열까지 골라냄.  \r\n간결하지만 내장 함수를 몰라서 쓸 수 없었던 코드다.\r\n\r\n```javascript\r\nconst solution = n => {\r\n  return \"수박\".repeat(n/2) + (n%2 === 1 ? \"수\" : '');\r\n}\r\n```\r\n위의 풀이와 비슷한 접근법이다. n을 2로 나눈 몫 만큼 \"수박\" 문자열을 반복했고, n을 2로 나눈 값의 나머지가 1이라면 \"수\" 문자열을 추가하였다.\r\n\r\n***\r\n\r\n## 배운점\r\n\r\n반복문, 조건문을 어느 정도 쓸 줄 알아서 문제 푸는 것은 수월했지만, 다른 사람 풀이를 보니 아직 한참 부족하다는 생각이 든다...ㅎ...  \r\n다른 사람들 진짜 다들 천재 만재 들인가...  \r\n새로 얻은 지식들 잊지 말고 다른 문제에서 다시 활용해보자!\r\n\r\n- 공부 한 내용 복습하고, 활용하도록 하자!\r\n- 코드를 간결하게 쓰는 시도를 해보자.\r\n- es6 문법 공부를 하자."},"id":"506866af-5cd9-5298-b170-ed4204e51bcf"}},{"node":{"frontmatter":{"title":"level 1-3. 약수의 합 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-04-level1-03-sum-aliquot"},"internal":{"content":"# level 1. 약수의 합\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12928>\r\n\r\n## 문제\r\n\r\n```\r\n정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - n은 0 이상 3000이하인 정수입니다.\r\n\r\n#### 입출력 예\r\n\r\nn | return \r\n--------- | ---------\r\n12 | 28\r\n5 | 6\r\n\r\n입출력 예 설명  \r\n  1. 12의 약수는 1, 2, 3, 4, 6, 12입니다. 이를 모두 더하면 28입니다.\r\n  1. 5의 약수는 1, 5입니다. 이를 모두 더하면 6입니다.\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(n) {\r\n  var answer = 0;\r\n\r\n  for(var i=1; i<n+1; i++) {\r\n    if( (n%i) == 0){\r\n      answer += i;\r\n    }\r\n  }\r\n  return answer;\r\n}\r\n```\r\n매개변수를 for 반복문을 실행하여 n을 1부터 n까지의 수로 나눠서 나머지가 0이 되는요소들의 합을 구한다.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nlet solution = n => {\r\n  let answer = 0,\r\n    i = 1,\r\n    j = n%2 == 0 ? 1 : 2;\r\n\r\n  for(i; i<n; i=i+j) if(n%i == 0) answer += i;\r\n  return answer+n;\r\n}\r\n```\r\n이건 나랑 비슷하게 접근 방법이지만 es6 문법과 코드를 사용하여 코드를 간결하게 만들어둬서 참고용으로 가져왔다.\r\n\r\n```javascript\r\nfunction solution(n, a=0, b=0) {\r\n  return n <= a/2 ? b : solution(n, a+1, b+=n%a ? 0 : a);\r\n}\r\n```\r\n이건 봐도 모르겠따... 재귀함수 라는데.. 아직 갈길이 멀었다;ㅎㅎ\r\n\r\n***\r\n\r\n## 배운점\r\n\r\n저번 문제와 비슷하게 반복문을 돌려서 조건 값을 구하는 문제는 비교적 수월하다  \r\n\r\n- 코드를 간결하게 쓰는 습관을 들이자.\r\n- es6 문법 공부를 하자\r\n "},"id":"e8b5e06d-1c8c-5020-b2cb-668f51e530cc"}},{"node":{"frontmatter":{"title":"level 1-2. 평균 구하기 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-12-03-level1-02-average"},"internal":{"content":"# level 1. 평균 구하기\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/12944>\r\n\r\n## 문제\r\n\r\n```\r\n정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요.\r\n```\r\n\r\n### 제한사항\r\n\r\n  - arr은 길이 1 이상, 100 이하인 배열입니다.\r\n  - arr의 원소는 -10,000 이상 10,000 이하인 정수입니다.\r\n\r\n#### 입출력 예\r\n\r\narr | return \r\n--------- | ---------\r\n[1,2,3,4] | 2.5\r\n[5,5] | 5\r\n\r\n***\r\n\r\n## 내가 한 풀이\r\n```javascript\r\nfunction solution(arr) {\r\n  var answer = 0;\r\n  for(var i in arr){\r\n    answer += arr[i];\r\n  }\r\n  answer /= arr.length;\r\n  return answer;\r\n}\r\n```\r\n매개변수로 들어온 배열을 for in 반복문을 실행하여 요소들의 합을 구하고  \r\nlength로 나눈다.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(arr){\r\n  return arr.reduce((a, b) => a + b) / arr.length;\r\n}\r\n```\r\nArray 의 메서드 `reduce()`를 사용했다. ( es6를 사용하여 너무나도 간결하고 예쁘게...)  \r\n분석하자면 a,b를 더하여 단일 값으로 재배열 후 length로 나눔. (reduce()는 왼쪽에서 오른쪽으로 실행하며 단일 값으로 재배열)  \r\n\r\n***\r\n\r\n## 배운점\r\n\r\n반복문을 돌려서 조건 값을 구하는 문제는 비교적 수월했다.  \r\n하지만 이번에도...\r\n- `javascript 자체 내장 함수에 대해 더 공부하고 또 공부하고 복습하자.`  \r\n- 삼항연산자 에 대해 더 공부하고 자주 써보자\r\n\r\n저번에 for in 코드는 성능을 하락시키는 코드로, 캐쉬 방식보다 30프로 가량 늦게 측정된다는 댓글을 보고 공부중에, es6 에서 for of 반복문을 찾았다.  \r\n\r\n```javascript\r\nlet myString = \"test\";\r\n\r\n// return 0, 1, 2, 3\r\nfor (let i in myString) {\r\n  console.log(i);\r\n}\r\n\r\n// return t, e, s, t\r\nfor (let i of myString) {\r\n  console.log(i);\r\n}\r\n```\r\n\r\n- for of 는 문자열도 다룰 수 있음\r\n- 내부에 [Symbol.iterator]를 가진 객체라면 어떤 객체든 순회할 수 있음\r\n- 즉 es6 에서 지원하는 모든 컬렉션을 대상으로 사용할 수 있음"},"id":"3c277219-d5f7-5649-92ec-9eaf2d182f77"}},{"node":{"frontmatter":{"title":"MarkDown 문법 정리","category":"Git"},"fields":{"slug":"2019-12-03-git-00-markdown"},"internal":{"content":"\r\n>몇번을 보고 또 봐도 헷갈리는 나레기를 위한 문법 정리!^^ [출처](https://heropy.blog/2017/09/30/markdown/)  \r\n\r\n# 마크다운(MarkDown) 은?  \r\n\r\n파일 확장자가 .md로 된 파일이 마크다운 문법으로 작성된 파일  \r\n사용법이 매우 쉽고, 빠르게 문서를 정리할 수 있음 (문법과 관리 모두 편리)\r\n\r\n---\r\n\r\n## 마크다운 문법(syntax)\r\n\r\n### 제목(Header)\r\n\r\n```\r\n# 제목 1\r\n## 제목 2\r\n### 제목 3\r\n#### 제목 4\r\n##### 제목 5\r\n###### 제목 6\r\n```\r\n결과 =  \r\n  \r\n# 제목 1\r\n## 제목 2\r\n### 제목 3\r\n#### 제목 4\r\n##### 제목 5\r\n###### 제목 6\r\n\r\n\r\n### 강조(Emphasis)\r\n\r\n각각 `<em>` , `<strong>` ,`<del>` 태그로 변환됩니다.\r\n\r\n*이텔릭체는* 텍스트 양 옆에 `*` 혹은 `_`를 사용하세요.  \r\n**두껍게는** `**` 혹은 `__` 사용하세요.  \r\n** _이텔릭체_ 와 두껍게** 를 같이 사용할 수 있습니다.  \r\n~~취소선~~ `~~` 를 사용하세요.  \r\n<u>밑줄</u>은 `<u></u>`를 사용하세요.  \r\n\r\n### 목록(List)\r\n\r\n```\r\n1. 순서가 필요한 목록\r\n1. 순서가 필요한 목록\r\n  - 순서가 필요하지 않은 목록(서브) \r\n  - 순서가 필요하지 않은 목록(서브) \r\n1. 순서가 필요한 목록\r\n  1. 순서가 필요한 목록(서브)\r\n  1. 순서가 필요한 목록(서브)\r\n1. 순서가 필요한 목록\r\n\r\n- 순서가 필요하지 않은 목록에 사용 가능한 기호\r\n  - 대쉬(hyphen)\r\n  * 별표(asterisks)\r\n  + 더하기(plus sign)\r\n```\r\n결과 =\r\n  \r\n1. 순서가 필요한 목록\r\n1. 순서가 필요한 목록\r\n  - 순서가 필요하지 않은 목록(서브) \r\n  - 순서가 필요하지 않은 목록(서브) \r\n1. 순서가 필요한 목록\r\n  1. 순서가 필요한 목록(서브)\r\n  1. 순서가 필요한 목록(서브)\r\n1. 순서가 필요한 목록\r\n\r\n- 순서가 필요하지 않은 목록에 사용 가능한 기호\r\n  - 대쉬(hyphen)\r\n  * 별표(asterisks)\r\n  + 더하기(plus sign)\r\n\r\n### 링크(Links)\r\n\r\n`<a>` 로 변환됩니다.\r\n\r\n```\r\n[GOOGLE](https://google.com)\r\n\r\n[NAVER](https://naver.com \"링크 설명(title)을 작성하세요.\")\r\n\r\n[상대적 참조](../users/login)\r\n\r\n[Dribbble][Dribbble link]\r\n\r\n[GitHub][1]\r\n\r\n문서 안에서 [참조 링크]를 그대로 사용할 수도 있습니다.\r\n\r\n다음과 같이 문서 내 일반 URL이나 꺾쇠 괄호(`< >`, Angle Brackets)안의 URL은 자동으로 링크를 사용합니다.\r\n구글 홈페이지: https://google.com\r\n네이버 홈페이지: <https://naver.com>\r\n\r\n[Dribbble link]: https://dribbble.com\r\n[1]: https://github.com\r\n[참조 링크]: https://naver.com \"네이버로 이동합니다!\"\r\n```\r\n결과 =  \r\n  \r\n[GOOGLE](https://google.com)\r\n\r\n[NAVER](https://naver.com \"링크 설명(title)을 작성하세요.\")\r\n\r\n[상대적 참조](../users/login)\r\n\r\n[Dribbble][Dribbble link]\r\n\r\n[GitHub][1]\r\n\r\n문서 안에서 [참조 링크]를 그대로 사용할 수도 있습니다.\r\n\r\n다음과 같이 문서 내 일반 URL이나 꺾쇠 괄호(`< >`, Angle Brackets)안의 URL은 자동으로 링크를 사용합니다.  \r\n구글 홈페이지: https://google.com  \r\n네이버 홈페이지: <https://naver.com>  \r\n\r\n[Dribbble link]: https://dribbble.com\r\n[1]: https://github.com\r\n[참조 링크]: https://naver.com \"네이버로 이동합니다!\"\r\n\r\n\r\n### 이미지(Images)\r\n\r\n```\r\n<center>\r\n<figure>\r\n<img src=\"/assets/images/promise.jpg\" alt=\"\">\r\n</figure>\r\n</center>\r\n\r\n![대체 텍스트(alternative text)를 입력하세요!](http://www.gstatic.com/webp/gallery/5.jpg \"링크 설명(title)을 작성하세요.\")\r\n[![Vue](/images/vue.png)](https://kr.vuejs.org/)\r\n```\r\n\r\n### 인라인 코드(Code) 강조\r\n\r\n```\r\n`마크다운 문법`\r\n```\r\n결과 =  \r\n  \r\n`마크다운 문법`\r\n\r\n### 블럭 코드(Code) 강조\r\n\r\n`를 3번 이상 입력하고 코드 종류도 적습니다.\r\n\r\n```\r\n    ```html\r\n    <a href=\"https://www.google.co.kr/\" target=\"_blank\">GOOGLE</a>\r\n    ```\r\n    \r\n    ```css\r\n    .list > li {\r\n      position: absolute;\r\n      top: 40px;\r\n    }\r\n    ```\r\n    \r\n    ```javascript\r\n    function func() {\r\n      var a = 'AAA';\r\n      return a;\r\n    }\r\n    ```\r\n```\r\n결과 =\r\n```html\r\n<a href=\"https://www.google.co.kr/\" target=\"_blank\">GOOGLE</a>\r\n```\r\n\r\n```css\r\n.list > li {\r\n  position: absolute;\r\n  top: 40px;\r\n}\r\n```\r\n\r\n```javascript\r\nfunction func() {\r\n  var a = 'AAA';\r\n  return a;\r\n}\r\n```\r\n\r\n### 표(Table)\r\n\r\n```\r\n| 값 | 의미 | 기본값 |\r\n|---|:---:|---:|\r\n| `static` | 유형(기준) 없음 / 배치 불가능 | `static` |\r\n| `relative` | 요소 자신을 기준으로 배치 |  |\r\n| `absolute` | 위치 상 부모(조상)요소를 기준으로 배치 |  |\r\n| `fixed` | 브라우저 창을 기준으로 배치 |  |\r\n\r\n값 | 의미 | 기본값\r\n---|:---:|---\r\n`static` | 유형(기준) 없음 / 배치 불가능 | `static`\r\n`relative` | 요소 **자신**을 기준으로 배치 |\r\n`absolute` | 위치 상 **_부모_(조상)요소**를 기준으로 배치 |\r\n`fixed` | **브라우저 창**을 기준으로 배치 |\r\n```\r\n\r\n결과 =  \r\n  \r\n| 값 | 의미 | 기본값 |\r\n|---|:---:|---:|\r\n| `static` | 유형(기준) 없음 / 배치 불가능 | `static` |\r\n| `relative` | 요소 자신을 기준으로 배치 |  |\r\n| `absolute` | 위치 상 부모(조상)요소를 기준으로 배치 |  |\r\n| `fixed` | 브라우저 창을 기준으로 배치 |  |\r\n\r\n값 | 의미 | 기본값\r\n---|:---|:---\r\n`static` | 유형(기준) 없음 / 배치 불가능 | `static`\r\n`relative` | 요소 **자신**을 기준으로 배치 |\r\n`absolute` | 위치 상 **_부모_(조상)요소**를 기준으로 배치 |\r\n`fixed` | **브라우저 창**을 기준으로 배치 |\r\n\r\n### 인용문(BlockQuote)\r\n\r\n```\r\n인용문(blockQuote)\r\n\r\n> 남의 말이나 글에서 직접 또는 간접으로 따온 문장.\r\n> _(네이버 국어 사전)_\r\n\r\nBREAK!\r\n\r\n> 인용문을 작성하세요!\r\n>> 중첩된 인용문(nested blockquote)을 만들 수 있습니다.\r\n>>> 중중첩된 인용문 1\r\n>>> 중중첩된 인용문 2\r\n>>> 중중첩된 인용문 3\r\n```\r\n결과 =  \r\n  \r\n인용문(blockQuote)\r\n\r\n> 남의 말이나 글에서 직접 또는 간접으로 따온 문장.\r\n> _(네이버 국어 사전)_\r\n\r\nBREAK!\r\n\r\n> 인용문을 작성하세요!\r\n>> 중첩된 인용문(nested blockquote)을 만들 수 있습니다.\r\n>>> 중중첩된 인용문 1\r\n>>> 중중첩된 인용문 2\r\n>>> 중중첩된 인용문 3\r\n\r\n### 수평선(Horizontal Rule)\r\n\r\n```\r\n---\r\n(Hyphens)\r\n\r\n***\r\n(Asterisks)\r\n\r\n___\r\n(Underscores)\r\n```\r\n결과 =  \r\n  \r\n---\r\n(Hyphens)\r\n\r\n***\r\n(Asterisks)\r\n\r\n___\r\n(Underscores)\r\n\r\n### 줄바꿈(Line Breaks)\r\n‘2번의 띄어쓰기’나 `<br>`를 활용할 수 있습니다.\r\n\r\n```\r\n동해물과 백두산이 마르고 닳도록 \r\n하느님이 보우하사 우리나라 만세   <!--띄어쓰기 2번-->\r\n무궁화 삼천리 화려 강산<br>  \r\n대한 사람 대한으로 길이 보전하세  \r\n```\r\n결과 =  \r\n  \r\n동해물과 백두산이 마르고 닳도록  \r\n하느님이 보우하사 우리나라 만세  \r\n무궁화 삼천리 화려 강산<br>\r\n대한 사람 대한으로 길이 보전하세  \r\n"},"id":"52047985-a7ba-541a-a21e-63992bbd54df"}},{"node":{"frontmatter":{"title":"level 1-1. 완주하지 못한 선수 (Javascript)","category":"Algorithm"},"fields":{"slug":"2019-10-02-level1-01-player"},"internal":{"content":"# level 1. 완주하지 못한 선수\r\n> 출처 : <https://programmers.co.kr/learn/courses/30/lessons/42576>\r\n\r\n## 문제\r\n\r\n```\r\n수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.  \r\n  \r\n마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때,  \r\n완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.  \r\n```\r\n\r\n### 제한사항\r\n\r\n  - 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.\r\n  - completion의 길이는 participant의 길이보다 1 작습니다.\r\n  - 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.\r\n  - 참가자 중에는 동명이인이 있을 수 있습니다.\r\n\r\n#### 입출력 예\r\n\r\nparticipant | completion | return\r\n--------- | --------- | ---------\r\n[\"leo\", \"kiki\", \"eden\"]| [\"eden\", \"kiki\"] | \"leo\"\r\n[\"marina\", \"josipa\", \"nikola\", \"vinko\", \"filipa\"] | [\"josipa\", \"filipa\", \"marina\", \"nikola\"] | \"vinko\"\r\n[\"mislav\", \"stanko\", \"mislav\", \"ana\"] | [\"stanko\", \"ana\", \"mislav\"] | \"mislav\"\r\n[\"mislav\", \"mislav\", \"mislav\", \"mislav\"] | [\"stanko\", \"mislav\", \"mislav\"] | \"mislav\"\r\n\r\n***\r\n\r\n## 풀이\r\n```javascript\r\nfunction solution(participant, completion) {\r\n  var part = participant.sort();\r\n  var comp = completion.sort();\r\n  var answer = '';\r\n    \r\n  var i = 0;\r\n  for(i in part){\r\n      if(part[i] != comp[i]){\r\n        answer += part[i];\r\n        break;\r\n      }\r\n  }\r\n  return answer; \r\n}\r\n```\r\n`sort()` 메서드로 매개변수로 들어온 배열을 정렬시키고,  \r\n앞에서부터 차례로 비교해서 값이 다른 배열 값을 리턴한다.\r\n\r\n***\r\n\r\n## 다른사람 풀이\r\n```javascript\r\nfunction solution(participant, completion) {\r\n  participant.sort();\r\n  completion.sort();\r\n\r\n  for(let i in participant) {\r\n    if(participant[i] !== completion[i]) return participant[i];\r\n  }\r\n}\r\n```\r\n나와 비슷한 코드이지만 더 간결하게 풀어내었다.\r\n하지만 for in 코드는 성능을 하락시키는 코드로, 캐쉬 방식보다 30프로 가량 늦게 측정된다는 댓글이 있었다.\r\n\r\n```javascript\r\nfunction solution(participant, completion) {\r\n  var dic = completion.reduce((obj, t) => (obj[t] = obj[t] ? obj[t]+1 : 1 , obj) ,{});\r\n  return participant.find(t=> {\r\n    if(dic[t])\r\n      dic[t] = dic[t]-1;\r\n    else \r\n      return true;\r\n  });\r\n}\r\n```\r\n봐도 잘 모르겠다...  \r\nes6 문법을 더 공부하자는 의미로 가져왔다.\r\n\r\n***\r\n\r\n## 배운점\r\n\r\n처음에 문제풀이 할 때 중첩 반복문 돌려서 배열 정렬하고, 그 안에서 또 배열을 반복하는 코드를 썼었다.  \r\n답은 전부 맞았다.  \r\n하지만 문제 효율성 체크 부분에서 시간 초과로 채점 불가 결과가 나왔고 비슷한 코드만 1293348번 수정했다.  \r\n도대체 답이 맞는데 효율성이 뭐길래...! 라는 멘붕속에서 sort() 메서드라는 약간의 힌트를 얻었고, 10분 후 문제를 해결했다.  \r\n`javascript 자체 내장 함수에 대해 더 공부하고 또 공부하고 복습하자.`\r\n\r\n- 다시한번 `javascript 자체 내장 함수에 대해 더 공부하고 또 공부하고 복습하자.`\r\n- 코드의 효율성을 생각하자.\r\n- 내 코드도 예쁘지만, 다른 사람의 코드도 심도있게 살펴보자.\r\n- es6 문법 공부를 하자\r\n"},"id":"72b0fab0-a5aa-5912-b6d3-480bf2a2c528"}},{"node":{"frontmatter":{"title":"알고리즘 문제 풀이에 앞서","category":"Algorithm"},"fields":{"slug":"2019-10-02-intro"},"internal":{"content":"# 알고리즘 코딩 예제 문제 출처\r\n> 출처 : 프로그래머스 <https://programmers.co.kr/learn/challenges?tab=all_challenges>\r\n\r\n## 다짐\r\n매일 한문제씩 풀겠다고 하지 않겠다.  \r\n그래도 다음 이직할 때 쯤엔 프로그래머스 페이지의 모든 문제를 풀 수 있을 사고를 기르겠다.\r\n알고리즘 단어 그대로 주어진 문제를 논리적으로 해결하는 능력을 키우자.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/images/promise.jpg\" alt=\"\">\r\n<!-- <figcaption>scoreboard preview</figcaption> -->\r\n</figure>\r\n</center>\r\n\r\n## 한마디\r\n\r\n알고리즘 얘기만 듣다가 저번달(2019.09) 실장님이 내주신 과제로 처음 접해보았다. 처음 풀게 된 문제가 실장님의 실수로 알고리즘 마스터만 풀 수 있다는 레벨 5 문제를 받았고, 우리 팀원들은 한 문제로 3일동안 고민했다.  \r\n머리 아프고 복잡하고 힘들었지만, 재밌었고 흥미로웠고, 특히 풀어 냈을 때의 카타르시스...  \r\n다른 사람의 코드를 보고 느끼는 허탈함과 작은 자괴감, 존경심 등 문제를 풀면서 느끼는 깨달음들이 너무 뜻 깊고 작은 문제 하나로 오늘도 한걸음 나아가는 것 같은 단순한 뿌듯함\r\n낙담하지 말고 잘해보쟈!\r\n"},"id":"b489e1a1-75dd-5c19-82c8-9b54a49c6155"}},{"node":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하는 로그인 예제 전체 코드","category":"Nodejs"},"fields":{"slug":"2019-08-22-nodejs-13-login3"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Node.js에서 MongoDB 사용하는 법을 알아본다  \r\n\r\n# Node.js에서 MongoDB 사용하여 만드는 로그인 예제\r\n\r\n[MongoDB 설치 및 명령어 포스트](https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/)  \r\n[Node 에서 MongoDB 사용 및 명령어 포스트](https://hjban-dev.github.io/nodejs/2019/08/21/nodejs-10-mongo1/)\r\n\r\n## 구성\r\n\r\nmongoDB에 local 데이터베이스 안에 users 라는 collection 안에 회원 정보가 있다는 가정하에 예제가 실행된다. 회원 정보에는 id, name, password 필드 있음.  \r\n추가 방법은 위 링크에서 확인\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/mongo-data.jpg\" alt=\"\">\r\n<figcaption>필자의 mongoDB의 users 데이터</figcaption>\r\n</figure>\r\n</center>\r\n\r\n1. 서버 연결\r\n2. public 폴더 생성 후 login.html 생성 및 구축\r\n3. static 미들웨어로 public 폴더 설정\r\n4. router 미들웨어로 post 요청 확인\r\n5. MongoDB 연결 - connectDB() 함수 생성 후 연결\r\n6. body-parser 미들웨어 등록 후 loginData 변수 생성\r\n7. db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 생성\r\n8. authUser 함수실행. 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect\r\n9. 완료\r\n\r\n### 9. 실행\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/login-test.jpg\" alt=\"\">\r\n<figcaption>사용자 정보가 불일치 했을 떄와 일치 했을 때 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n---\r\n\r\n## 로그인 예제 전체 코드\r\n\r\n```javascript\r\nvar http = require('http');\r\nvar express = require('express');\r\n\r\nvar MongoClient = require('mongodb').MongoClient;\r\nvar bodyParser = require('body-parser');\r\n\r\nvar app = express();\r\nvar router = express.Router();\r\n\r\napp.set('port', process.env.PORT || 3000);\r\n\r\napp.use('/public', express.static(__dirname + '/public'));\r\napp.use(bodyParser.urlencoded({extended : false}));\r\n\r\nvar db;\r\nfunction connectDB(){\r\n  var dbURL = 'mongodb://localhost:27017';\r\n  MongoClient.connect(dbURL, function(err, client){\r\n    if(err) throw err;\r\n    db = client.db('local');\r\n    console.log('DB접속 성공 : ', dbURL)\r\n  });\r\n}\r\n\r\nfunction authUser(db, loginData, callback){\r\n  var users = db.collection('users');\r\n\r\n  users.find(loginData).toArray(function(err, docs){\r\n    if(err){\r\n      callback(err, null)\r\n    }\r\n\r\n    if(docs.length > 0){\r\n      console.log('사용자 정보 %s가 있다.', docs[0].name);\r\n      callback(null, docs);\r\n    }else{\r\n      console.log('사용자 정보가 없다');\r\n      callback(null, null)\r\n    }\r\n  });\r\n}\r\n\r\n// router 미들웨어, /process/login 접속 했을 때 실행\r\nrouter.route('/process/login').post(function(req, res){\r\n  console.log('POST - /process/login');\r\n\r\n  var loginData = {\r\n    id : req.body.id,\r\n    password: req.body.password\r\n  }\r\n\r\n  if(db){\r\n    console.log(db)\r\n    authUser(db, loginData, function(err, docs){\r\n      if(err) throw err;\r\n\r\n      if(docs){\r\n        res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\r\n        res.write('<h1>로그인 성공!</h1>');\r\n        res.write(docs[0].name + '님 환영합니다<br>');\r\n        res.write('<a href=\"/public/login.html\">로그아웃</a>');\r\n        res.end();\r\n      }else{\r\n        res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\r\n        res.write('<h1>로그인 실패!</h1>');\r\n        res.write('<a href=\"/public/login.html\">다시 로그인</a>');\r\n        res.end();\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n\r\napp.use(router);\r\nvar server = http.createServer(app);\r\nserver.listen(app.get('port'), function(){\r\n  console.log('connected http://localhost%d', app.get('port'));\r\n  connectDB();\r\n});\r\n```\r\n\r\n위 코드는 KOSMO 노드JS 프로그래밍 수업에서 실행했던 예제이다. 수업 땐 쫓아가기 바빴지만 다시 한번 분석하여 내 코드로 만들어보니 좀 더 깊게 이해가 된다. 명령어를 더 활용하여, 회원가입과 회원탈퇴, 마이페이지 등 도 가능 할 것 같다.  \r\n(좀 더 공부하여 심화 예제 작성 예정)\r\n"},"id":"aabe7399-b350-5b93-ac93-e9b6b76917f4"}},{"node":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하는 로그인 예제 2","category":"Nodejs"},"fields":{"slug":"2019-08-21-nodejs-12-login2"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Node.js에서 MongoDB 사용하는 법을 알아본다  \r\n\r\n# Node.js에서 MongoDB 사용하여 만드는 로그인 예제\r\n\r\n[MongoDB 설치 및 명령어 포스트](https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/)  \r\n[Node 에서 MongoDB 사용 및 명령어 포스트](https://hjban-dev.github.io/nodejs/2019/08/21/nodejs-10-mongo1/)\r\n\r\n## 구성\r\n\r\nmongoDB에 local 데이터베이스 안에 users 라는 collection 안에 회원 정보가 있다는 가정하에 예제가 실행된다. 회원 정보에는 id, name, password 필드 있음.  \r\n추가 방법은 위 링크에서 확인\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/mongo-data.jpg\" alt=\"\">\r\n<figcaption>필자의 mongoDB의 users 데이터</figcaption>\r\n</figure>\r\n</center>\r\n\r\n1. 서버 연결\r\n2. public 폴더 생성 후 login.html 생성 및 구축\r\n3. static 미들웨어로 public 폴더 설정\r\n4. router 미들웨어로 post 요청 확인\r\n5. MongoDB 연결 - connectDB() 함수 생성 후 연결\r\n6. body-parser 미들웨어 등록 후 loginData 변수 생성\r\n7. db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 생성\r\n8. authUser 함수실행. 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect\r\n9. 완료\r\n\r\n### 6. body-parser 미들웨어 등록 후 loginData 불러오기\r\n\r\n#### 6-1. body-parser 모듈 추출, 미들웨어 등록\r\n\r\n```javascript\r\nvar bodyParser = require('body-parser');\r\napp.use(bodyParser.urlencoded({extended : false}));\r\n```\r\n\r\n#### 6-2. loginData 변수 생성\r\n\r\n/public/login.html 에서 입력한 id, pw 정보를 불러오는 loginData 변수 생성\r\n\r\n```javascript\r\nvar loginData = {\r\n  id : req.body.id,\r\n  password: req.body.password\r\n}\r\n```\r\n\r\nloginData 정보 확인\r\n\r\n```javascript\r\nrouter.route('/process/login').post(function(req, res){\r\n  console.log('POST - /process/login');\r\n\r\n  var loginData = {\r\n    id : req.body.id,\r\n    password: req.body.password\r\n  }\r\n\r\n  res.send(loginData);\r\n});\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/logindata.jpg\" alt=\"\">\r\n<figcaption>loginData 확인</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### 7. db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 실행\r\n\r\n#### 7-1. /process/login 페이지로 넘어왔을 때 db정보가 있는지 확인하고 있으면 authUser 함수 실행 \r\n\r\n```javascript\r\nrouter.route('/process/login').post(function(req, res){\r\n  console.log('POST - /process/login');\r\n  // ...\r\n  console.log(db);\r\n  if(db) {\r\n    authUser();\r\n  }\r\n  \r\n  res.send(loginData);\r\n});\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/login-db.jpg\" alt=\"\">\r\n<figcaption>connectDB()실행 후 console 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n#### 7-2. authUser 함수 생성 \r\n\r\nauthUser 함수에는 **db**, **loginData**, **callback 함수**가 매개변수로 들어가고   \r\n**db** 에는 local 데이터베이스의 데이터, **loginData**는 사용자가 입력한 id, pw 정보 들어있음  \r\n\r\n변수 users 에는 db의 **users collection** 만 담아두고  \r\nusers에 fund()메서드 사용하여 매개변수에 loginData 조건 넣은 후 일치하는 데이터 가져오기\r\n\r\n```javascript\r\nfunction authUser(db, loginData, callback) {\r\n  var users = db.collection('users');\r\n  users.find(loginData).toArray(function(err, docs){\r\n    // docs = find() 의 실행 결과 값\r\n    console.log(\"docs >>> \", docs);\r\n    // find(loginData) 가 있으면 배열 안의 객체 형태로 들어가있고,\r\n    // 조건에 맞지 않으면 빈 배열 [] 만 있다\r\n  })\r\n}\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/login-docs.jpg\" alt=\"\">\r\n<figcaption>조건에 따른 docs 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n#### 7-3. error 처리\r\n\r\nerr 안에 데이터 있으면 콜백 함수 실행해서 error 처리\r\n\r\n```javascript\r\nfunction authUser(db, loginData, callback) {\r\n  var users = db.collection('users');\r\n  users.find(loginData).toArray(function(err, docs){\r\n    if(err){\r\n      callback(err, null)\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n#### 7-4. 데이터 조건에 따라 콜백함수 실행\r\n\r\ndocs 배열안에 데이터가 있으면 콜백함수로 docs 보내고 아니면 null 객체 전달\r\n\r\n```javascript\r\nif(docs.length > 0) {\r\n  console.log('사용자 정보 %s가 있다.', docs[0].name);\r\n  callback(null, docs);\r\n} else {\r\n  console.log('사용자 정보가 없다')\r\n  callback(null, null);\r\n  // callback 함수 통해서 req, res 응답 할 수 있음\r\n}\r\n```\r\n\r\n### 8. authUser 함수 : 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect\r\n\r\n정보가 있으면 데이터의 이름을 불러와서 환영하고, 없으면 a 링크로 로그인 페이지에 redirect  \r\n기존의 res.send(loginData); 는 삭제\r\n\r\n```javascript\r\nrouter.route('/process/login').post(function(req, res){\r\n  // ...\r\n\r\n  if(db) {\r\n    authUser(db, loginData, function(err, docs){\r\n      if(err) throw err;\r\n\r\n      if(docs){\r\n        res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\r\n        res.write('<h1>로그인 성공!</h1>');\r\n        res.write(docs[0].name + '님 환영합니다<br>');\r\n        res.write('<a href=\"/public/login.html\">로그아웃</a>');\r\n        res.end();\r\n       }else{\r\n          res.writeHead('200', {'Content-Type':'text/html;charset=utf8'});\r\n          res.write('<h1>로그인 실패!</h1>');\r\n          res.write('<a href=\"/public/login.html\">다시 로그인</a>');\r\n          res.end();\r\n        }\r\n    });\r\n  }\r\n});\r\n```\r\n"},"id":"3a825e4f-dcf4-569d-b020-d37143a53ed7"}},{"node":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하는 로그인 예제 1","category":"Nodejs"},"fields":{"slug":"2019-08-21-nodejs-11-login1"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Node.js에서 MongoDB 사용하는 법을 알아본다  \r\n\r\n# Node.js에서 MongoDB 사용하여 만드는 로그인 예제\r\n\r\n[MongoDB 설치 및 명령어 포스트](https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/)  \r\n[Node 에서 MongoDB 사용 및 명령어 포스트](https://hjban-dev.github.io/nodejs/2019/08/21/nodejs-10-mongo1/)\r\n\r\n## 구성\r\n\r\nmongoDB에 local 데이터베이스 안에 users 라는 collection 안에 회원 정보가 있다는 가정하에 예제가 실행된다. 회원 정보에는 id, name, password 필드 있음.  \r\n추가 방법은 위 링크에서 확인\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/mongo-data.jpg\" alt=\"\">\r\n<figcaption>필자의 mongoDB의 users 데이터</figcaption>\r\n</figure>\r\n</center>\r\n\r\n1. 서버 연결\r\n2. public 폴더 생성 후 login.html 생성 및 구축\r\n3. static 미들웨어로 public 폴더 설정\r\n4. router 미들웨어로 post 요청 확인\r\n5. MongoDB 연결 - connectDB() 함수 생성 후 연결\r\n6. body-parser 미들웨어 등록 후 loginData 변수 생성\r\n7. db정보가 있는지 확인하고, 있으면 사용자 정보 확인하는 authUser 함수 생성\r\n8. authUser 함수실행. 사용자의 정보가 있으면 환영, 없으면 로그인 페이지로 redirect\r\n9. 완료\r\n\r\n### 1. 서버 연결\r\n\r\n아래 코드는 서버 연결하기 위한 코드. (외우는 게 좋다)\r\n\r\n```javascript\r\nvar http = require('http');\r\nvar express = require('express');\r\n\r\nvar app = express();\r\nvar router = express.Router();\r\n\r\napp.set('port', process.env.PORT || 3000);\r\n\r\napp.use(router); // router 미들함수 등록\r\nvar server = http.createServer(app);\r\nserver.listen(app.get('port'), function(){\r\n  console.log('connected http://localhost%d', app.get('port'))\r\n});\r\n```\r\n\r\n### 2. public 폴더 생성 후 login.html 생성 및 구축\r\n\r\nform 태그의 action 속성은 /process/login 으로, method 속성은 post 방식으로 지정\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>/public/login.html</title>\r\n</head>\r\n<body>\r\n  <h1>로그인 페이지</h1>\r\n  <!-- action 속성은 /process/login method 속성은 post로 지정 -->\r\n  <form action=\"/process/login\" method=\"post\">\r\n    <table border=\"1\">\r\n      <tr>\r\n        <td>아이디</td>\r\n        <td><input type=\"text\" name=\"id\"></td>\r\n      </tr>\r\n      <tr>\r\n        <td>비밀번호</td>\r\n        <td><input type=\"password\" name=\"password\"></td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\">\r\n          <input type=\"submit\" value=\"로그인\">\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/public-login.jpg\" alt=\"\">\r\n<figcaption>/public/login.html 페이지 뷰</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### 3. static 미들웨어로 public 폴더 설정\r\n\r\nexpress에 내장된 static 미들웨어 사용\r\n\r\n```javascript\r\napp.use('/public', express.static(__dirname + '/public'));\r\n```\r\n\r\n### 4. router 미들웨어로 post 요청 확인\r\n\r\npost 방식이라 localhost:3000/public/login.html 에서 로그인 버튼으로 확인 가능함\r\n\r\n```javascript\r\nrouter.route('/process/login').post(function(req, res){\r\n  console.log('POST - /process/login');\r\n  res.send();\r\n});\r\n```\r\n\r\n### 5. MongoDB 연결 - connectDB() 함수 생성 후 연결\r\n\r\n#### 5-1. mongodb 모듈 추출 후 MongoClient 생성\r\n\r\n```javascript\r\nvar MongoClient = require('mongodb').MongoClient;\r\n```\r\n\r\n#### 5-2. DB 접속하는 connectDB() 함수 생성\r\n\r\n```javascript\r\nvar db;\r\nfunction connectDB(){\r\n  var dbURL = 'mongodb://localhost:27017';\r\n  MongoClient.connect(dbURL, function(err, client){\r\n    if(err) throw err;\r\n    // db 안에는 local 데이터베이스의 데이터가 들어가있다\r\n    db = client.db('local');\r\n    console.log('DB접속 성공 : ', dbURL);\r\n  });\r\n}\r\n```\r\n\r\ndb는 local 데이터베이스의 데이터, 다시 말해 db 접속이 성공 했을때만 변수안에 정보가 있다는 말\r\n\r\n#### 5-3. server에 connectDB() 실행 코드 추가\r\n\r\n```javascript\r\nvar server = http.createServer(app);\r\nserver.listen(app.get('port'), function() {\r\n  console.log('http://localhost:%d', app.get('port'));\r\n  // connectDB() 추가 \r\n  connectDB();\r\n});\r\n```\r\n"},"id":"b7cba6d9-fc73-57af-842b-3047229b3183"}},{"node":{"frontmatter":{"title":"Node.js에서 MongoDB 사용하기","category":"Nodejs"},"fields":{"slug":"2019-08-21-nodejs-10-mongo"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Node.js에서 MongoDB 사용하는 법을 알아본다  \r\n\r\n# Node.js에서 MongoDB 사용과 메서드\r\n\r\n[MongoDB 설치 및 명령어 포스트](https://hjban-dev.github.io/mongodb/2019/08/08/mongodb-00-mongo/)\r\n\r\n## Mongojs 설치 및 모듈 선언 [npm mongojs 참고](https://www.npmjs.com/package/mongojs)\r\n\r\n- 설치 `npm install mongojs --save`\r\n  (package.json 에서 설치 확인)\r\n- app.js에 해당 모듈 추가 \r\n  - **const MongoClient = require('mongodb').MongoClient**\r\n  - MongoClient : MongoDB 데이터베이스에 연결하면서 상호 작용을 처리하는 Nodejs 라이브러리\r\n- MongoDB 서버에 대한 URL 추가 \r\n -  **const url = 'mongodb://localhost:27017'**  (MongoDB URL의 기본 포트 : 27017)\r\n\r\n```javascript\r\nconst MongoClient = require('mongodb').MongoClient;\r\nconst url = 'mongodb://localhost:27017';\r\n```\r\n\r\n## MongoClient.connect() 사용하여 연결\r\n\r\nMongoClient.connect() 메서드로 mongodb와 연결  \r\nclient.db() 메서드로 데이터 베이스 사용 가능\r\n\r\n```javascript\r\nMongoClient.connect(url, function(err, client) {\r\n  if (err) throw err;\r\n  // mydb 라는 데이터 베이스를 사용\r\n  const dbMydb = client.db(\"mydb\");\r\n});\r\n```\r\n\r\n## collection 생성과 가져오기\r\n\r\ncollection() 메서드로 컬렉션을 한다.  \r\n컬렉션이 없으면 자동 생성됨\r\n\r\n```javascript\r\nconst collection = dbMydb.collection('dogs');\r\n// dbMydb 데이터베이스에 컬렉션 생성 또는 가져오기\r\n```\r\n\r\n## collection에 데이터 추가\r\n\r\ninsertOne() 메소드를 사용하여 dogs 콜렉션에 데이터 추가\r\n\r\n```javascript\r\ncollection.insertOne({name: 'Roger'}, (err, result) => {\r\n  // ....\r\n})\r\n```\r\n\r\ninsertMany() 메서드를 사용하여 여러 항목 추가 가능  \r\n첫 번째 매개 변수로 배열을 전달할 수 있다.\r\n\r\n```javascript\r\ncollection.insertMany([{name: 'Togo'}, {name: 'Syd'}], (err, result) => {\r\n  // ...\r\n})\r\n```\r\n\r\n## 컬렉션 데이터 가져오기\r\n\r\nfind() 메소드를 사용하여 컬렉션에 추가 된 모든 데이터를 가져옵니다.  \r\n추출한 데이터를 toArray()를 사용하여 배열 형태로 반환  \r\n**매개변수 items 는 find() 의 실행 결과값이 들어있음**\r\n\r\n```javascript\r\ncollection.find().toArray((err, items) => {\r\n  console.log(items)\r\n})\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/toarray.jpg\" alt=\"\">\r\n<figcaption>코드 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### 특정 데이터 찾기\r\n\r\n```javascript\r\ncollection.find({name: 'Togo'}).toArray((err, items) => {\r\n  console.log(items)\r\n})\r\n```\r\n\r\n데이터 최상단 하나만 찾기 (toArray() 생략가능)\r\n\r\n```javascript\r\ncollection.findOne({name: 'Togo'}, (err, item) => {\r\n  console.log(item)\r\n})\r\n```\r\n\r\n## 데이터 업데이트\r\n\r\nupdateOne() 메서드 사용  \r\n첫번째 매개변수는 필드 선택, 두번째 매개변수에 조건  \r\n\r\n```javascript\r\ncollection.updateOne({name: 'Togo'}, {'$set': {'name': 'Togo2'}}, (err, item) => {\r\n  console.log(item)\r\n})\r\n```\r\n\r\n## 데이터 삭제\r\n\r\nudeleteOne() 메서드 사용  \r\n첫번째 매개변수는 필드 선택  \r\n\r\n```javascript\r\ncollection.deleteOne({name: 'Togo'}, (err, item) => {\r\n  console.log(item)\r\n})\r\n```\r\n\r\n## 연결 종료\r\n\r\n```javascript\r\nclient.close()\r\n```\r\n"},"id":"5e183fb2-10ec-5a94-9c84-3893531565e9"}},{"node":{"frontmatter":{"title":"Create-react-app 설치 및 실행","category":"React"},"fields":{"slug":"2019-08-19-react-10-create-react-app"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# Create-react-app 설치 및 실행\r\n\r\n## 설치\r\n- React 앱 작성 방법 중 하나인 create-react-app 사용\r\n  - Node.js 가 설치 되어 있어야 함.\r\n  - [nodejs.org](https://nodejs.org/ko/download/) 에서 파일 다운로드 후 설치\r\n  - Node.js 설치하면 NPM 같이 설치 됨\r\n- 설치 후 터미널에서 `npm install -g create-react-app` 명령어 통해서 버전 확인\r\n  - 터미널 여는법 : 윈도우 + r 키 누르거나 윈도우 검색창에 cmd 검색\r\n- myfirstreact 라는 이름의 React 앱 작성\r\n  - 터미널에서 `npx create-react-app myfirstreact` 명령어 \r\n\r\n## Create-react-app\r\n- myfirstreact 폴더로 이동\r\n```\r\n터미널 > cd myfirstreact\r\n```\r\n\r\n- 명령어로 React 앱 실행\r\n```\r\nnpm start\r\n```\r\n- 생성한 React 앱과 함께 새 브라우저 창이 나타남. 그렇지 않았다면 브라우저를 열고 localhost:3000 입력\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/react-app.jpg\" alt=\"\" width=\"600\">\r\n<figcaption>처음 생성한 React 앱</figcaption>\r\n</figure>\r\n</center>\r\n\r\n앞으로 챕터들에서 JavaScript의 ECMAScript6 (ES6) 문법들을 활용합니다\r\n"},"id":"e5f95589-8eaa-5394-909d-fdfe6e3eb941"}},{"node":{"frontmatter":{"title":"scoreboard(클릭으로 점수 +, - 기능) 예제 전체 소스","category":"React"},"fields":{"slug":"2019-08-16-react-09-example5"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# scoreboard(클릭으로 점수 +, - 기능) 전체 소스\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/scoreboard-result.jpg\" alt=\"\" width=\"700\">\r\n<figcaption>scoreboard preview</figcaption>\r\n</figure>\r\n</center>\r\n\r\n```javascript\r\nconst Header = (props) => {\r\n  // 객체 상태인 props를 상수 title, totalPlayers로 변환\r\n  const {title, totalPlayers} = props;\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"h1\">{title}</h1>\r\n      <span className='stats'>Players: {totalPlayers}</span>\r\n    </header>\r\n  );\r\n}\r\n \r\nconst Player = (props) => (\r\n  <div className='player'>\r\n    <span className='player-name'>\r\n      <button className='remove-player'\r\n        onClick={() => props.removePlayer(props.id)}>x</button>\r\n    </span>\r\n    <span className='player-name'>{props.name}</span>\r\n    <Counter/>\r\n  </div>\r\n);\r\n \r\nclass Counter extends React.Component {\r\n  state = {\r\n    score: 0,\r\n  }\r\n \r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  // 기존 incrementScore, decrementScore 함수 changeScore로 변경\r\n  changeScore = (delta) => {\r\n    // 1. state를 변경하는 방법\r\n    // this.state.score += 1;\r\n    // this.setState({score: this.state.score + 1});\r\n    // 2. merge 된다. : 기존 속성 그대로 유지\r\n    // 3. 비동기로 처리\r\n    this.setState(prevState => ({\r\n      score: prevState.score + delta\r\n    }));\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className='counter'>\r\n        <button className='counter-action decrement'\r\n          onClick={() => this.changeScore(-1)}> - </button>\r\n        <span className='counter-score'>{this.state.score}</span>\r\n        <button className='counter-action increment'\r\n          onClick={() => this.changeScore(1)}> + </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nclass App extends React.Component {\r\n  state = {\r\n    players: [\r\n      {name: 'NEJU', id: 1},\r\n      {name: 'HONG', id: 2},\r\n      {name: 'KIM', id: 3},\r\n      {name: 'PARK', id: 4},\r\n    ]\r\n  }\r\n  // 1) player 삭제 콜백 펑션 정의\r\n  handleRemovePlayer = (id) => {\r\n    console.log(id);\r\n \r\n    this.setState(prevState => ({\r\n      players: prevState.players.filter(item => item.id !== id)\r\n    }))\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className='scoreboard'>\r\n        <Header title='My Scoreboard' totalPlayers={this.state.players.length} />\r\n \r\n        {\r\n          this.state.players.map(player => (\r\n            <Player name={player.name} key={player.id} id={player.id}\r\n              removePlayer={this.handleRemovePlayer}/>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nReactDOM.render(<App></App>, document.getElementById('root'))\r\n```\r\n"},"id":"1ec783be-560a-5c2a-86f9-1ab3b860b8db"}},{"node":{"frontmatter":{"title":"scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 4","category":"React"},"fields":{"slug":"2019-08-16-react-08-example4"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 4\r\n\r\n## 클릭시 score 증가하는 이벤트\r\n\r\nincrementScore 함수를 추가하고 JSX에서 클릭 이벤트를 추가한다. onClick에 JSX expression을 추가하는데 함수를 호출하는게 아니라 함수 레퍼런스를 넣어야 한다.  \r\n  \r\n리액트는 명령행 프로그래밍이 아니라 선언형 프로그래밍이다.  \r\n클릭을 하면 클릭시 실행할 function을 정해둔다.\r\n  \r\n여기서 주의할 점은 function을 정의해 놓기 때문에 이 function이 객체에 바인딩되지 않고 따로 떨어져 나오게 된다.  \r\n그래서 function에 this를 사용하게 되면 <u>this가 객체를 가르키니 않고 글로벌 this</u>가 되어 버리기 때문에 이것을 해결하기 위해서 bind() 문법을 사용하거나 es6에서온 arrow 펑션을 사용한다. arrow 펑션안에 사용된 this는 lexical this가 되기 때문에 bind 없이 사용가능하게 된다.\r\n\r\n### 버튼을 클릭시 score 증가하는 이벤트 생성\r\n\r\n```javascript\r\nclass Counter extends React.Component {\r\n  state = {\r\n    score: 0\r\n  };\r\n  \r\n  incrementScore() {\r\n    console.log('increment');\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <button className=\"counter-action decrement\"> - </button>\r\n        <span className=\"counter-score\">{this.state.score}</span>\r\n        <button className=\"counter-action increment\" onClick={this.incrementScore}> + </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nincrementScrore 함수안에는 this.state.score = this.state.score + 1 과 같이 상태를 업데이트를 해서는 안된다.  \r\n상태를 업데이트할때는 반드시 **setState 함수로 업데이트**해야 UI가 re-render된다는것을 기억하자.\r\n\r\n```javascript\r\nincrementScore = () => {\r\n  console.log(this);\r\n  this.setState(\r\n    {score: this.state.score + 1}\r\n  );\r\n}\r\n```\r\n\r\n### 이벤트의 this에서 에러 발생\r\n\r\n하지만, this에서 에러가 발생한다. 함수가 당장 실행되는게 아니라 클릭시 실행되므로 이 함수가 객체에 바인딩되지 않고 분리가 일어나서 bind가 안된 상태가 되었다.\r\n\r\n#### arrow function 사용하여 this 에러 해결하기\r\n\r\narrow function 내에 사용된 this는 lexical this라고 하여 자동적으로 원래 가르키고자하는 scope의 this를 참조하게 된다. 아래와 같이 arrow function을 사용하여 increment 함수표현식을 사용하면된다.  \r\n\r\n```javascript\r\nincrementScore = () => {\r\n  console.log(this);\r\n  this.setState(\r\n    {score: this.state.score + 1}\r\n  );\r\n}\r\n```\r\n\r\ndecrementScore 함수도 동일하게 작성하여 보자  \r\n\r\n```javascript\r\ndecrementScore = () => {\r\n  this.setState(\r\n    {score: this.state.score - 1}\r\n  );\r\n}\r\n```\r\n\r\n### state를 prev state로 변경\r\n\r\nthis.state.score + 1 로 상태를 업데이트하는 것은 `비동기적`으로 렌더링 된다. 즉, 여러번의 이벤트가 일어나면 이 상태가 순서대로 실행되는것을 보장할 수 없는 불일치성 문제를 일으킬 수 있다. 그래서 일치성을 보장하기 위해서는 이전 상태에 기반하여 상태를 업데이트하여야 한다. setState는 이전상태 값에 기반한 콜백 펑션을 제공해준다.  \r\n  \r\nsetState에 지정된 state는 merge 된다. 만일 state에 a, b, c, d 여러개의 상태가 정의되어있다면 setState에 c만 상태를 갱신했다면 c만 merge가 일어나고 나머지 상태 a, b, d 는 그대로 있는다.  \r\n\r\n```javascript\r\nincrementScore = () => {\r\n  this.setState(prevState => {\r\n    return {score: prevState.score + 1}\r\n  });\r\n}\r\n\r\ndecrementScore = () => {\r\n  this.setState(prevState => {\r\n    return {score: prevState.score - 1}\r\n  });\r\n}\r\n```\r\n\r\n### Player 상태 관리\r\n\r\nplayer 삭제 로직을 추가하기 위해서는 자식인 player 컴포넌트가 삭제 요청을 부모에게 보내고 자식이 삭제를 처리해야한다. player 데이터를 최상위 부모인 App 컴포넌트에 위치시켜서 state 컴포넌트로 만들어야 한다.  \r\n  \r\nApp 컴포넌트를 먼저 function 컴포넌트에서 class 컴포넌트로 변경하고 players 라는 state 를 추가한다.\r\n\r\n```javascript\r\n// 클래스 컴포넌트로 변경\r\nclass App extends React.Component {\r\n  state = {\r\n    players: [\r\n      {name: 'NEJU', id: 1},\r\n      {name: 'HONG', id: 2},\r\n      {name: 'KIM', id: 3},\r\n      {name: 'PARK', id: 4},\r\n    ]\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"scoreboard\">\r\n        <Header title=\"My scoreboard\" totalPlayers={this.state.players.length} />\r\n      \r\n        {/*Players List*/}\r\n        { this.state.players.map(item => \r\n          <Player name={item.name} key={item.id.toString()} />) }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nReactDOM.render(<App />, document.getElementById('root'))\r\n```\r\n\r\nplayers 와 같이 SPA 전체에서 공유되어야 할 필요성이 있는 state는 이와같이 `App 컴포넌트에 공유`하여 모든 컴포넌트에서 공유되도록 한다. 이와 같은 state를 application state라고 하고 score와 같이 특정한 컴포넌트에서만 사용되는 state는 local state라고 한다.\r\n\r\n### Player 삭제\r\n\r\nApp 컴포넌트에 삭제 함수 handleRemovePlayer를 추가한다. Player 컴포넌트에 **삭제 함수handleRemovePlayer를 props로 넘긴다**. Player 컴포넌트에서 해당 함수가 넘어왔는지 devtools에서 확인한다.\r\n\r\n```javascript\r\nhandleRemovePlayer = (id) => {\r\n  this.setState(prevState => {\r\n    return {\r\n      players: prevState.players.filter(item => item.id !== id)\r\n    }\r\n  })\r\n}\r\nrender() {\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <Header title=\"My scoreboard\" totalPlayers={this.state.players.length} />\r\n    \r\n      {/*Players List*/}\r\n      { this.state.players.map(item => \r\n        <Player \r\n        name={item.name}\r\n        key={item.id.toString()} \r\n        removePlayer={this.handleRemovePlayer}\r\n        id={item.id} />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nPlayer 컴포넌트에서는 props 로 넘어온 함수를 이용하여 player를 삭제하는 클릭 이벤트를 추가한다.\r\n\r\n\r\n```javascript\r\nconst Player = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"player\">\r\n      <span className=\"player-name\">\r\n        <button className=\"remove-player\" \r\n          onClick={() => props.removePlayer(props.id)}>x</button>\r\n        {props.name}\r\n      </span>\r\n      <Counter />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nprops 로 넘어온 players 는 read only 이므로 수정할 수 없다. 그러므로 players를 소유하고 있는 부모에게 삭제요청을 이벤트로 한다. 데이터의 흐름은 트리의 `상단에서부터 아래로 단방향`으로 흐르고 자식은 수정요청을 이벤트로 하게 된다.  \r\n"},"id":"7f56627b-d4ca-5108-b480-3d54a4ecb1cb"}},{"node":{"frontmatter":{"title":"scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 3","category":"React"},"fields":{"slug":"2019-08-16-react-07-example3"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 3\r\n\r\n## state 사용하여 Counter 컴포넌트 재구성\r\n\r\n### Counter function 컴포넌트를 class 컴포넌트로 변경\r\n\r\nCounter 컴포넌트에서 사용되는 score를 앞에서는 부모로 부터 props 형태로 받았다. 이렇게 부모로부터 물려받게 되면 – + 버튼을 눌러서 score 값을 변경할 수 없다. ( **다시 한번 말하지만 props는 변경 불가** )  \r\n– + 버튼을 눌렀을 때 score 값이 변경이 되어야 하므로 **props를 state로 관리**해야 한다.  \r\n  \r\nCounter 컴포넌트와 같이 특정 컴포넌트에서만 관리되는 state는 local state 라고 하고 다른 컴포넌트와 공유되어야 하는 컴포넌트는 부모에 state를 두고 공유해야 하는데 이와 같은 컴포넌트는 `application 컴포넌트`라고 한다.\r\n\r\nfunction으로 만든 컴포넌트는 props를 parameter로 받아들여서 JSX or React Element를 리턴하는 단순한 컴포넌트로 static한 컴포넌트다.  \r\n입력된 값을읽을 수는 있지만 동적인 상태를 유지할 수는 없다. 그래서 function component를 **stateless function component**라고 하고, 상태유지를 하기 위해서는 먼저 `function component를 class component`로 변경해야 한다.\r\n\r\n```javascript\r\n// class component로 변경\r\nclass Counter extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <button className=\"counter-action decrement\"> - </button>\r\n        <span className=\"counter-score\">{this.props.score}</span>\r\n        <button className=\"counter-action increment\"> + </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n### Counter 컴포넌트의 props를 state로 변경\r\n\r\nscore를 동적인 값으로 만들기 위해서 state로 바꿔야 한다. constructor()를 추가하고 this.state에 score를 추가한다.\r\n\r\n```javascript\r\nclass Counter extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      score: 0\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <button className=\"counter-action decrement\"> - </button>\r\n        <span className=\"counter-score\">{this.state.score}</span>\r\n        <button className=\"counter-action increment\"> + </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nconstructor() 없이 class의 속성으로 선언해도 동일한 결과를 얻는다. constructor()에서 this로 속성을 추가하는것은 <u>es5의 생성자함수와 동일</u>하다. \r\n클래스 바로 아래에 속성으로 추가하는 것은 es6의 퍼블릭 속성인데, 초기 es6 문법에 없다가 stage4 에서 추가된 문법이다. 클래스 바로 아래에 var, let, const 같은 것이 없이 선언되면 클래스의 퍼블릭 속성이라고 기억하자.\r\n\r\n```javascript\r\nclass Counter extends React.Component {\r\n  state = {\r\n    score: 0\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <button className=\"counter-action decrement\"> - </button>\r\n        <span className=\"counter-score\">{this.state.score}</span>\r\n        <button className=\"counter-action increment\"> + </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nReact devtools에서 Counter 컴포넌트에 props 이외에 state가 추가된것을 확인하고 임의의 값으로 변경을 해보자.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/state-check.jpg\" alt=\"\" width=\"255\">\r\n<figcaption>React devtools에서 Counter 컴포넌트에 props와 state 확인</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"ec60e9fa-1627-5750-b076-b17a7e901b72"}},{"node":{"frontmatter":{"title":"React state 개념과 사용","category":"React"},"fields":{"slug":"2019-08-16-react-06-state"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# React state\r\n\r\n## state?\r\n\r\n- 수정될 수 있는 값\r\n- state가 수정되면 ReactDOM.render 메서드가 호출되어 DOM이 업데이트\r\n- DOM을 업데이트해야 한다면 ReactDOM.render 메서드를 다시 호출할 필요 없이 state 값 업데이트\r\n- **시간에 따라 변하는 데이터가 있다면 그 상태를 state로 관리하고 state의 값을 변하면 state와 연결된 뷰가 자동으로 렌더링이 된다.**\r\n\r\n### state 사용하기\r\n\r\n1. 클래스형 컴포넌트 사용\r\n1. props를 state로 변경하기\r\n1. 컴포넌트 생명주기 메서드에서 state 사용하기\r\n\r\n### setState 사용하기\r\n\r\n- state를 업데이트하기 위해서는 반드시 setState 메서드 사용\r\n\r\n```javascript\r\nthis.setState({\r\n\tcomment: 'hello'\r\n})\r\n```\r\nthis.state에 직접 값을 넣는 방법은 constructor 메서드에서 이루어져야 합니다.\r\n\r\n- 비동기적으로 업데이트\r\n\r\n```javascript\r\n// 잘못된 방법\r\nthis.setState({\r\n\tcounter: this.state.counter + this.props.increment\r\n})\r\n```\r\n\r\n```javascript\r\n// 올바른 방법\r\nthis.setState((prevState, props) => {\r\n\tcounter: prevState.counter + props.increment\r\n})\r\n```\r\n\r\n### props 와 state \r\n\r\n| props | state | \r\n|:--------|:--------|\r\n| 부모 컴포넌트가 자식 컴포넌트에게 주는 값 | 컴포넌트 내부에 선언 |\r\n| 수정할 수 없음 | 내부에서 변경 가능 |\r\n"},"id":"0c69dea0-a450-5d0a-81cc-d5bd8a251890"}},{"node":{"frontmatter":{"title":"scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 2","category":"React"},"fields":{"slug":"2019-08-14-react-05-example2"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 2\r\n\r\n## props 사용하여 scoreboard 제작\r\n\r\n### App 컴포넌트 재구성\r\nHeader 컴포넌트를 html attribute처럼 설정한다.  \r\ntitle은 스트링으로 넘어갈 것이고 totalPlayers는 JSX expression으로 설정했으므로 number 타입으로 넘어간다.\r\nJSX에서 주석은 자바스크립트와 같으나 {}로 묶어준다 - **{/* 주석 내용 */}**\r\n\r\n```javascript\r\nconst App = () => {\r\n  return (\r\n    // 이전 코드는 <Header />로 구성되어 있었음\r\n    <div className=\"scoreboard\">\r\n      <Header title=\"My scoreboard\" totalPlayers={1 + 10} />\r\n      \r\n      {/*Players List*/}\r\n      <Player />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n### Header 컴포넌트 재구성\r\n\r\n```javascript\r\nconst Header = (props) => {\r\n  console.log(props); \r\n  // props가 객체로 넘어온다는것을 확인\r\n  // 결과 > {title: \"My scoreboard!\", totalPlayers: 11}\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"h1\">{ props.title }</h1>\r\n      <span className=\"stats\">Players: { props.totalPlayers }</span>\r\n    </header>\r\n  )\r\n}\r\n```\r\n\r\n다시 한번 짚어야 할 것은 pros는 read only (or immutable) 이라는것 이다.  \r\n읽기만 가능. 그 `값을 변경하면 안된다`.  \r\n컴포넌트 트리에서 높은쪽에 있는 부모 컴포넌트가 property 값을 소유하고 있고 또한 수정 등의 컨트롤을 할 수 있지만 **자식이 그 값을 변경하게 되면 리액트는 에러**를 던진다.\r\n\r\n---\r\n\r\n## Player가 한명이 아니라 아래와 같이 여러명이 있을 경우\r\n\r\n### Player의 name 과 score props를 App 컴포넌트에서 전달\r\n\r\n```javascript\r\nconst App = () => {\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <Header title=\"My scoreboard\" totalPlayers={1 + 10} />\r\n      \r\n      {/*Players List 반복*/}\r\n      <Player name=\"LDK\" score={50} />\r\n      <Player name=\"HONG\" score={60} />\r\n      <Player name=\"KIM\" score={70} />\r\n      <Player name=\"PARK\" score={80} />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nPlayer 컴포넌트를 여러번 쓰는 방법 대신 정보를 가지고 있는 json Array 데이터를 만들자.  \r\nReact는 자바스크립트 언어만 사용해서 반복문 구현 가능  \r\n\r\n```javascript\r\nconst players = [\r\n  {name: 'LDK', score: 30},\r\n  {name: 'HONG', score: 40},\r\n  {name: 'KIM', score: 50},\r\n  {name: 'PARK', score: 60},\r\n];\r\n```\r\n\r\n**Player 컴포넌트에서 name** 을 표시하고 **score는 하위 컴포넌트인 Counter 컴포넌트**로 다시 넘겨야 한다.  \r\n\r\n```javascript\r\nconst Player = (props) => {\r\n  return (\r\n    <div className=\"player\">\r\n      <span className=\"player-name\">\r\n        {/* 반복 */}\r\n        {props.name} \r\n      </span>\r\n      \r\n      {/* props 전달 */}\r\n      <Counter score={props.score} /> \r\n    </div>\r\n  );\r\n}\r\n \r\nconst Counter = (props) => {\r\n  return (\r\n    <div className=\"counter\">\r\n      <button className=\"counter-action decrement\"> - </button>\r\n      <span className=\"counter-score\">{props.score}</span>\r\n      <button className=\"counter-action increment\"> + </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n위의 players json Array를 렌더링할 때 top-level 엘리먼트인 `App`에 `props`로 입력한 후에 다시 App 컴포넌트에서 props로 받은 후에 player에게 전달  \r\nprops 최상단 엘리먼트가 모든 props를 다 가지고 있다가 그걸 자식에게 넘겨주는 형태가 바람직  \r\n\r\n```javascript\r\nconst App = (props) => {\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <Header title=\"My scoreboard\" totalPlayers={props.initialPlayers.length} />\r\n      \r\n      {/* 2. 받아온 initialPlayers props를 새로운 배열을 리턴 후 player에 넘겨줌 */}\r\n      { \r\n      props.initialPlayers.map(item => \r\n        <Player name={item.name} score={item.score} />) \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\n// 1. {players} 를 initialPlayers로 JSX 문법 사용하여 전달\r\nReactDOM.render(<App initialPlayers={players} />, document.getElementById('root'));\r\n```\r\n\r\n- map은 새로운 배열을 리턴한다.  \r\n- JSX expression은 모두 { } 안에 포함되어져야 한다.  \r\n- 실행은 잘되지만 콘솔창을 보면 warning이 발생한다.  \r\n- player Array를 특정한 key로 구분해야 한다.  \r\n- 상수 players 객체안에 id값을 추가하여 player 각각 key값을 넣어준다.  \r\n\r\n```javascript\r\nconst players = [\r\n  {name: 'LDK', score: 30, id: 1},\r\n  {name: 'HONG', score: 40, id: 2},\r\n  {name: 'KIM', score: 50, id: 3},\r\n  {name: 'PARK', score: 60, id: 4},\r\n];\r\nconst App = (props) => {\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <Header title=\"My scoreboard\" totalPlayers={props.initialPlayers.length} />\r\n      \r\n      {/*Players List*/}\r\n      { \r\n        props.initialPlayers.map(item => \r\n        <Player \r\n        name={item.name} \r\n        score={item.score} \r\n        key={item.id.toString()} />) \r\n      }\r\n    </div>\r\n  );\r\n}\r\nReactDOM.render(<App initialPlayers={players} />, document.getElementById('root'));\r\n```\r\n"},"id":"d3ed7648-d017-5903-98ca-93bfe91e1b73"}},{"node":{"frontmatter":{"title":"scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 1","category":"React"},"fields":{"slug":"2019-08-13-react-04-example1"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# scoreboard(클릭으로 점수 +, - 기능) 예제 만들기 1\r\n\r\n## 구성\r\nHeader 컴포넌트와 Player 컴포넌트로 구성  \r\n- Header 안에는 title과 플레이어 수로 구성  \r\n- Player 안에는 선수 이름과 점수로 구성  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/scoreboard.jpg\" alt=\"\" width=\"563\">\r\n<figcaption>scoreboard preview</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### Header 컴포넌트\r\n\r\nfunction 컴포넌트로 제작  \r\n\r\n```javascript\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"h1\">Scoreboard</h1>\r\n      <span className=\"stats\">Players: 1</span>\r\n    </header>\r\n  );\r\n}\r\n \r\nReactDOM.render(<Header />, document.getElementById('root'));\r\n```\r\n\r\n같은 코드를 ECMAScript6 화살표 함수 사용  \r\n\r\n```javascript\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n    <h1 className=\"header\">Scoreboard</h1>\r\n    <span className=\"stats\">Players: 1</span>\r\n  </header>\r\n);\r\n \r\nReactDOM.render(<Header />, document.getElementById('root'));\r\n```\r\n\r\n### Player 컴포넌트\r\n\r\n이름 부분과 점수 부분 제작  \r\n\r\n```javascript\r\nconst Player = () => {\r\n  return (\r\n    <div className=\"player\">\r\n      <span className=\"player-name\">\r\n        Neju\r\n      </span>\r\n      <div className=\"counter\">\r\n        <button className=\"counter-action decrement\"> - </button>\r\n        <span className=\"counter-score\">35</span>\r\n        <button className=\"counter-action increment\"> + </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\nReactDOM.render(<Player />, document.getElementById('root'));\r\n```\r\n\r\n점수 부분을 counter 컴포넌트로 분리  \r\n\r\n```javascript\r\nconst Player = () => {\r\n  return (\r\n    <div className=\"player\">\r\n      <span className=\"player-name\">\r\n        LDK\r\n      </span>\r\n      <Counter />\r\n    </div>\r\n  );\r\n}\r\n \r\nconst Counter = () => {\r\n  return (\r\n    <div className=\"counter\">\r\n      <button className=\"counter-action decrement\"> - </button>\r\n      <span className=\"counter-score\">35</span>\r\n      <button className=\"counter-action increment\"> + </button>\r\n    </div>\r\n  );\r\n}\r\n \r\nReactDOM.render(<Player />, document.getElementById('root'));\r\n```\r\n\r\n### App 컴포넌트\r\n\r\n전체를 감싸는 App 컴포넌트 생성 후 렌더링  \r\n\r\n```javascript\r\nconst App = () => {\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <Header />\r\n      \r\n      {/*Players List*/}\r\n      <Player />\r\n    </div>\r\n  );\r\n}\r\n \r\nReactDOM.render(<App />, document.getElementById('root'));\r\n```\r\n"},"id":"1cc6bac4-3938-5c46-80ea-c600559e9ed0"}},{"node":{"frontmatter":{"title":"React props 개념과 사용","category":"React"},"fields":{"slug":"2019-08-13-react-03-props"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# React props\r\n\r\n## props?\r\n\r\n- 컴포넌트에서 사용할 데이터 중 변하지 않는 데이터를 다룰 때 사용\r\n- 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 사용\r\n- 부모 컴포넌트로 받은 데이터, 값을 바꿀 수 없는 데이터 `read only`\r\n- props 형태는 string, array, object, function 어떤 타입이든 상관없이 지정\r\n\r\n### 함수형 컴포넌트에서 props 사용하기\r\n\r\n```javascript\r\nfunction Square(props){\r\n  return(\r\n    <h1>{props.number} square is {props.number * props.number}</h1>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  // Attribute로 number를 넘겨줌\r\n  <Square number=\"2\" />,\r\n  document.getElementById('root')\r\n)\r\n```\r\n\r\n<Square/> JSX 태그에 Attribute로 number가 정의되어 있는 것을 볼 수 있습니다  \r\n이 **number attribute는 Square 컴포넌트의 인자**로 넘어가게 되는데, 이것을 props라고 합니다. \r\n\r\n### 클래스형 컴포넌트에서 props 사용하기\r\n\r\n자바스크립트의 클래스에서 클래스 안의 메서드를 사용하기 위해서는 `this 메서드`를 사용해야 합니다.  \r\n\r\n```javascript\r\nclass TestClass{\r\n  printLog(){\r\n  \tconsole.log(\"print\");\r\n  }\r\n  printer(){\r\n\tthis.printLog();\r\n\t// this 메서드 사용\r\n  }\r\n}\r\n```\r\n\r\n위 TestClass는 printLog 메서드와 printer 메서드 2개의 메서드가 존재하고,  \r\nprinter 메서드에서 printLog 메서드를 사용하기 위해서는 this.printLog()와 같이 **this 메서드**를 통하여 사용하게 됩니다.  \r\n마찬가지로 props 또한 this 메서드를 통해 사용해야 합니다.  \r\n\r\n```javascript\r\nclass Square extends React.Component{\r\n  render(){\r\n  \treturn(\r\n\t  <h1>{this.props.number} square is {this.props.number * this.props.number}</h1>\r\n\t  // 클래스형 컴포넌트로 변경되어 this.props.number 으로 변경\r\n  \t);\r\n  }\r\n}\r\nReactDOM.render(\r\n  <Square number=\"2\" />,\r\n  document.getElementById('root')\r\n)\r\n```\r\n\r\n함수형 컴포넌트를 클래스형 컴포넌트로 바꾼 예제이다. props.number가 this.props.number으로 변경되었다.\r\n\r\n### 수정 불가능한 props\r\n\r\n**함수형 컴포넌트, 클래스형 컴포넌트 모두 props는 수정할 수 없습니다.**\r\n\r\n#### 순수 함수(pure function)\r\n\r\n- 함수의 인자를 수정하지 않는 함수를 **순수 함수(pure function)**\r\n```javascript\r\nfunction pure(a, b){\r\n  return a + b;\r\n}\r\n```\r\n\r\n- 함수 안에서 인자가 수정되는 함수는 순수하지 않은 함수\r\n```javascript\r\nfunction impure(account, amount){\r\n  account.total += amount\r\n}\r\n```\r\n\r\n## props 기본값 설정하기\r\n\r\ndefaultProps를 설정하여 props의 기본값(default value)을 정의할 수 있습니다.  \r\nClassName.defaultProps = {propsName:value} 형태로 사용합니다.\r\n\r\n```javascript\r\nUserInfo.defaultProps = {\r\n\tjob: 'programmer'\r\n}\r\n```\r\n"},"id":"71115aba-c5cc-5cb1-a9af-cf70aa0cd04f"}},{"node":{"frontmatter":{"title":"React 컴포넌트(Component)","category":"React"},"fields":{"slug":"2019-08-12-react-02-component"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# 컴포넌트(Component)\r\n\r\n## Component?\r\n\r\n- UI를 독립적이고 재사용 가능한 조각으로 만든다\r\n- 컴포넌트에는 function component 와 class component 두가지가 있다\r\n  - 되도록이면 function 컴포넌트 사용 권장\r\n  - class 컴포넌트는 React.Component라는 부모 클래스를 상속받았기 때문에 더 많은 기능을 가지고 있지만 그것은 그만큼 메모리와 리소스를 더 사용\r\n- 컴포넌트를 생성할 때 `첫 글자는 대문자`\r\n  - 소문자는 html 태그이고 대문자는 리액트 컴포넌트를 의미\r\n\r\n## 함수형 컴포넌트 - Functional Component\r\n\r\nstate나 컴포넌트 생명주기(Lifecycle) 메서드를 사용하지 않는다면 함수형 컴포넌트 권장  \r\n가벼워서 첫 마운팅(화면에 처음 컴포넌트를 그려 주는 것)이 빠르다\r\n\r\n```javascript\r\nfunction Welcome(props){\r\n  return(\r\n  \t<h1>Hello! {props.name}</h1>\r\n  )\r\n}\r\n```\r\n\r\nECMAScript6 화살표 함수 사용\r\n\r\n```javascript\r\nconst Welcome = (props) => {\r\n  return(\r\n  \t<h1>Hello! {props.name}</h1>\r\n  )\r\n}\r\n```\r\n\r\n## 클래스형 컴포넌트 - Class Component\r\n\r\n컴포넌트 생명주기 메서드를 사용해야 하는 경우나 state를 사용해야 할 경우 반드시 class 컴포넌트 사용\r\n\r\n```javascript\r\nclass Welcome extends React.Component{\r\n  render(){\r\n  \treturn <h1>Hello! {this.props.name}</h1>\r\n  }\r\n}\r\n```\r\n\r\n### 함수형 컴포넌트와 클래스 컴포넌트의 차이점\r\n\r\n1. render 함수에서 React element 리턴\r\n2. this.props 사용\r\n\r\n## 컴포넌트 렌더링 하기\r\n\r\n앞 장에서 element를 렌더링할때 DOM 태그를 랜더링 했다\r\n\r\n```javascript\r\nconst element = <Welcome name=\"neju\" />;\r\n```\r\n\r\nDOM 태그뿐만 아니라 사용자가 정의한 태그(컴포넌트)도 렌더링할 수 있습니다 \r\n\r\n```javascript\r\nfunction Welcome(props){\r\n  return(\r\n    <h1>Hello! {props.name}</h1>\r\n  )\r\n}\r\n\r\nconst element = <Welcome name=\"neju\" />; // Welcome 컴포넌트 사용\r\nReactDOM.render(\r\n  element,\r\n  document.getElementById('root')\r\n);\r\n```\r\n"},"id":"26bc530e-dcd0-51a6-a93c-7aca22922317"}},{"node":{"frontmatter":{"title":"React에서 JSX 사용하기","category":"React"},"fields":{"slug":"2019-08-12-react-01-jsx"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# React에서 JSX 사용하기\r\n\r\n## JSX?\r\n- JavaScript + XML의 합성어\r\n- `자바스크립트의 확장문법`\r\n\r\n### React Element를 생성하는 두가지 방법\r\n\r\n#### 1. React.createElement 메서드 사용\r\n```javascript\r\nconst element = React.createElement(\r\n  'h1', // 엘리먼트 혹은 노드\r\n  {className: 'title'}, // 속성\r\n  'Hello world' // 자식 노드\r\n);\r\n```\r\n\r\n#### 2. JSX 사용\r\n```javascript\r\nconst element = (\r\n  <h1 className=\"test\">\r\n\tHello, world\r\n  </h1> \r\n);\r\n```\r\n## babel - Unexpected token error\r\n\r\n위의 app.js 를 실행하면 Unexpected token error 발생  \r\nJSX문법이 제대로 컴파일이 되지 않았음  \r\nㄴ 브라우저들에게 JSX문법 이해시켜 줄(=컴파일) `컴파일러`가 필요  \r\n가장 대표적인 컴파일러 `babel` 사용  \r\nindex.html에 아래 스크립트 추가\r\n\r\n```html\r\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\r\n<script type=\"text/babel\" src=\"./app.js\"></script>\r\n```\r\n\r\n다시 말해, JSX는 `자바스크립트의 모든 문법을 지원`한다\r\n\r\n### app.js의 title과 desc를 JSX로 구성\r\n\r\n```javascript\r\nconst title = <h1>My First React Element</h1> // JSX 문법\r\nconst desc = <p>This is Description</p> // JSX 문법\r\n \r\nconst header = React.createElement(\r\n  'header',\r\n  null,\r\n  title, desc\r\n);\r\n \r\nReactDOM.render(header, document.getElementById('root'))\r\n```\r\n\r\n### header부분도 JSX로 구성\r\n\r\n두 줄 이상인 경우는 `()`로 감싸는게 가독성을 위해서 좋다. () 가 없다고 틀린 문법은 아니다.\r\n\r\n```javascript\r\nconst header = (\r\n  <header>\r\n    <h1>My First React Element</h1>\r\n    <p>This is Description</p>\r\n  </header>\r\n);\r\n\r\nReactDOM.render(header, document.getElementById('root'));\r\n```\r\n\r\n## JSX EXPRESSION\r\n\r\nJSX를 좀 더 동적으로 만들기 위해서는 태그 내부에 자바스크립트 변수를 `{}` 로 감싸서 삽입할 수 있다. \r\n\r\n```javascript\r\nconst title = 'My First React Element';\r\nconst desc = 'This is Description';\r\nconst myTitleId = 'main-title';\r\nconst name = 'neju';\r\n \r\nconst header = (\r\n  <header>\r\n    <h1 id={myTitleId}>{name} {title}</h1>\r\n    <p className=\"main-desc\">{desc}</p>\r\n  </header>\r\n);\r\n\r\nReactDOM.render(header, document.getElementById('root'));\r\n```\r\n\r\nJSX에서 속성은 카멜 표기법(Camel Case)으로 표현  \r\nㄴ ex) class - className, tabindex - tabIndex\r\n"},"id":"e492374d-ac76-5a52-9136-253aa81dc3a2"}},{"node":{"frontmatter":{"title":"React 소개와 프로젝트 생성","category":"React"},"fields":{"slug":"2019-08-12-react-00-intro"},"internal":{"content":"> ReactJS 이 정도는 알아야지 - 이효범 교재와 KOSMO React 프로그래밍 수업을 듣고 정리합니다.  \r\n> [w3school](https://www.w3schools.com) 참고\r\n\r\n# React 소개와 프로젝트 생성\r\n\r\n## React?\r\n- React는 사용자 인터페이스를 구축하기위한 JavaScript 라이브러리\r\n- 가상 DOM 사용 `동적 UI`  React는 단지 ReactDOM.render로 DOM으로 렌더링되도록 한다.\r\n- 단방향 데이터 흐름 지향 `개발과 유지보수가 편리한 재사용 가능한 UI 구성`\r\n\r\n### 프로젝트 생성 준비\r\n1. react 폴더 생성 후 app.js 와 index.html 생성\r\n1. index파일 body 태그 밑에 개발 요소 삽입\r\n\r\n#### 1. index.html 구성\r\n\r\nindex.html의 body 태그 안에 아래 태그들을 삽입 \r\n\r\n```html\r\n<body>\r\n<div id=\"root\">\r\n  <!--RootDOM Node = ReactDOM에 의해 #root태그에 모든 태그가 그려짐--> \r\n</div>\r\n<script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\r\n<script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\r\n<script src=\"./app.js\"></script>\r\n</body>\r\n```\r\n- 대부분 ReactJS로 구현된 앱은 `하나의 RootDOM Node`를 가진다\r\n- **react** 스크립트는 core 부분에 해당, **react-dom** 스크립트는 웹을 개발할때 필요한 요소\r\n\r\n#### 2. app.js 구성\r\n\r\napp.js에 ReactElement를 생성 \r\n- `element`란 **ReactJS 앱을 구성하는 가작 작은 단위**\r\n- 컴포넌트는 주어진 조건에 맞게 **element 생성 후 반환**\r\n- **컴포넌트는 함수, element는 리턴 값** - 다음장에서 부가 설명\r\n\r\ncreateElement는 3가지 파라메터를 가진다  \r\n첫번째는 **엘리먼트 혹은 노드**, 두번째는 **속성**, 세번째는 **자식 노드**\r\n\r\n```javascript\r\nconst title = React.createElement(\r\n  'h1', // 엘리먼트 혹은 노드\r\n  { id: 'main-title', title: 'This is a title'}, // 속성\r\n  'My First React Element' // 자식 노드\r\n);\r\n\r\nconsole.log(title);\r\nReactDOM.render(title, document.getElementById('root'));\r\n// 첫번째는 화면에 그려줄 React element, 두번째는 container, 세번째는 callback(생략가능)\r\n```\r\n\r\n### 실행하기\r\nindex.html 실행\r\napp.js에서 생성한 컴포넌트 확인\r\n( 소스 수정 후에 웹페이지가 업데이트가 안되면 control-shift-r 을 눌러서 캐쉬를 지운 후 새로 고침 )\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/react/index-html.jpg\" alt=\"\" width=\"600\">\r\n<figcaption>컴포넌트로 속성이 들어간 h1태그</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n#### 컴포넌트 예제\r\n\r\nheader element를 만들고 header element의 자식으로 **title** 과 **desc element**를 포함하도록 한다\r\n\r\n```javascript\r\n// title element 생성후 리턴\r\nconst title = React.createElement(\r\n  'h1',\r\n  { id: 'main-title', title: 'This is a title'},\r\n  'My First React Element'\r\n);\r\n\r\n// desc element 생성후 리턴\r\nconst desc = React.createElement(\r\n  'p',\r\n  null,\r\n  'This is Description'\r\n);\r\n\r\n// header element 내부에 title과 desc 포함\r\nconst header = React.createElement(\r\n  'header',\r\n  null,\r\n  title, desc\r\n);\r\n\r\n// header Element를 DOM으로 렌더링\r\nReactDOM.render(header, document.getElementById('root'));\r\n```\r\n\r\n---\r\n\r\n### react 렌더링\r\n1. react는 실제 DOM 노드(ex - h1, div, span)를 만들지 않고 DOM 노드를 서술하는 **자바스크립트 객체를 생성**  ㄴ createElement()를 사용하여 자바스크립트 객체 생성\r\n1. render() 메서드가 실행  ㄴ createElement()로 만들어진 자바스크립트 객체를 실제 DOM으로 만들고 업데이트해주는 역할\r\n1. 처음에 한번 전체 DOM을 렌더링 한 이후에는 **필요한 부분만 업데이트**를 하게 된다.  ㄴ 메모리에 올라간 자바스크립트 객체에서 변경된 부분을 찾은 후 매핑되는 DOM 만 업데이트\r\n"},"id":"47d22f88-0342-544c-8a16-847eea8d0c25"}},{"node":{"frontmatter":{"title":"Nodejs Session 생성 및 사용","category":"Nodejs"},"fields":{"slug":"2019-08-08-nodejs-09-session"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Session 개념을 세우고 사용하는 법을 알아본다  \r\n\r\n# Nodejs Session 생성 및 사용\r\n\r\n## Session 배경\r\n\r\n- 쿠키보다 더 안전하고 많은 데이터를 저장하는 저장 방식\r\n- 데이터를 `웹 서버`에 저장 웹 브라우저는 Session ID만 갖고 있어서 쿠키보다 더 안전  \r\n\r\n## Express-Session [적용방법](https://www.npmjs.com/package/express-session)\r\n\r\n- 설치 `npm install express-session --save`\r\n  - package.json 에서 설치 확인\r\n- app.js에 해당 모듈 추가 `expressSession = require('express-session');`\r\n- express 프로세스 app에 express-session 미들웨어 연결( 외우는게 좋다 )  \r\n  `app.use(session({ secret , resave , saveUninitialized }))`\r\n  - secret - 필수항목 이 값으로 세션을 암호화 하여 저장.\r\n  - resave - 세션을 언제나 저장할 지 정하는 값 false를 권장하지만 필요에 따라 true로 설정\r\n  - saveUninitialized - 세션이 저장할 내용이 없어도 uninitialized 상태로 미리 저장.  \r\n  ex) 방문자 추적할 때 사용  \r\n\r\n### session 저장하는 방법\r\n\r\n```javascript\r\nreq.session.객체명 // 객체 방식 선호\r\n```\r\n\r\n### session 삭제하는 방법\r\n\r\n```javascript\r\nreq.session.destroy(function(err) {}) // 세션 삭제\r\n```\r\n\r\n#### session 생성 및 삭제 예제 \r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\nvar sessionParser = require('express-session'); // 모듈 추출\r\nvar router = express.Router();\r\n\r\nvar port = process.env.port || 3000; // 삼항 연산자로 포트번호 지정\r\n\r\n// express-session 미들웨어 연결 (외울 필요 있음)\r\napp.use(sessionParser({\r\n  secret: 'my key', // 암호화 하여 저장.\r\n  resave: true, // 언제나 저장할 지 정하는 값\r\n  saveUninitialized: true // 저장할 내용이 없어도 uninitialized 상태로 미리 저장\r\n}));\r\n\r\nrouter.route('/confirm').get(function (req, res) {\r\n  let msg = `세션이 존재하지 않습니다.`\r\n  if (req.session.user) {\r\n    msg = `${req.session.user.age}살 ${req.session.user.name}님 안녕! 세션의 생성된 시간 : ${req.session.user.createCurTime}`;\r\n  }\r\n  res.send(msg);\r\n});\r\n\r\nrouter.route('/').get(function (req, res) {\r\n  if(req.session.user){\r\n    console.log(`세션이 이미 존재합니다.`);\r\n  }else{\r\n    // session 생성\r\n    req.session.user = {\r\n      \"name\" : \"neju money\",\r\n      \"age\" : 25,\r\n      \"createCurTime\" : new Date()\r\n    }\r\n    console.log(`세션 생성`);\r\n  }\r\n  res.redirect(`/confirm`);\r\n});\r\n\r\n// session 삭제 후 redirect\r\nrouter.route('/destroy').get(function(req,res){\r\n  req.session.destroy();\r\n  console.log(`session을 삭제하였습니다.`);\r\n  res.redirect(`/confirm`);\r\n});\r\n\r\napp.use('/', router);\r\napp.listen(port, function () {\r\n  console.log(`${port}번 포트로 서버가 작동합니다.`);\r\n});\r\n```\r\n- session 활용하여 로그인, 로그아웃 기능도 구현 가능\r\n  - public 폴더에 login.html 생성 내부에 input이 포함된 form 태그 구현\r\n  - body-parser로 id, nickname, pw 등 정보 추출\r\n  - session 정보 저장 후 환영 정보 전송\r\n  - 환영 정보에 로그아웃 버튼에 세션 삭제 기능 추가\r\n"},"id":"afc2638c-f7f3-5736-9907-bdeb03587d1c"}},{"node":{"frontmatter":{"title":"MongoDB 설치 및 실행","category":"MongoDB"},"fields":{"slug":"2019-08-08-mongodb-00-mongo"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n\r\n# MongoDB 설치 및 실행\r\n\r\n## MongoDB?\r\n\r\n- NoSQL 데이터베이스\r\n- 데이터 관련 형식은 JSON 과 유사\r\n- 데이터베이스 및 객체 컬렉션 을 만드는데 사용할 수 있는 JavaScript API를 제공\r\n\r\n## 설치\r\n\r\n[mongodb.com](https://www.mongodb.com) 에서 파일 다운로드 후 설치  \r\n설치 후 cmd에 mongo 라고 입력 했을 때 찾지 못하면 path환경 변수에 입력필요  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/mongodb/mongo-strart.jpg\" alt=\"\">\r\n<figcaption>cmd에 mongo 라고 입력한 후의 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### path환경 변수 입력방법\r\n\r\n1. mongo 다운 받은 경로에서 bin 폴더 안에 mongo.exe 파일 찾기\r\n1. 경로 복사 (ex - C:\\Program Files\\MongoDB\\Server\\4.0\\bin)\r\n1. 내 pc 아이콘 위에서 마우스 오른쪽 클릭 - 속성 선택\r\n1. 환경변수 클릭 - 시스템 변수 - path 클릭\r\n1. 새로만들기 - 복사한 경로 붙여 넣고 확인\r\n1. cmd 새로 열어서 mongo 입력하고 확인\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/mongodb/how-to-path1.jpg\">\r\n<figcaption>3. 내 pc 아이콘 위에서 마우스 오른쪽 클릭</figcaption>\r\n</figure>\r\n</center>\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/mongodb/how-to-path2.jpg\" alt=\"\" width=\"800\">\r\n<figcaption>4. 환경변수 - 시스템 변수 - path 클릭</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## RDBMS와 MongoDB의 명칭 비교\r\n\r\n| RDBMS | MongoDB | \r\n|:--------|:--------|\r\n| TABLE | COLLECTION |\r\n| ROW | DOCUMENT |\r\n| COLUMN | FIELD |\r\n| PRIMARY KEY | OBJECT_ID Field |\r\n| RELATIONSHIP | EMBEDED & LINK |\r\n\r\n### RDB와 MongoDB 쿼리 비교\r\n\r\n| RDB | MongoDB | \r\n|:--------|:--------|\r\n| create table emp(no number(3)) | db.createCollection({\"emp\"}) |\r\n\r\n## MongoDB 사용하기 - 명령어 I\r\n\r\n- 설치 확인  \r\n**mongo**  \r\n- 데이터베이스 지정 또는 생성 (use 명령어를 사용 하면 DB 자동 생성)  \r\n**use local** > (local 데이터베이스 사용한다는 의미)\r\n- 현재 사용중인 db명 출력  \r\n**db** > (local 데이터베이스 사용하고 있다는 의미)  \r\n- db에 users 컬렉션 만들고 데이터 저장 (save({}) 명령어로 자동 생성 및 저장)  \r\n**db.users.save({name:'네주', age:25})** > (결과 : WriteResult({ \"nInserted\" : 1 }))\r\n- users컬렉션에 있는 모든 문서 객체들 반환  \r\n**db.users.find()** \r\n- users컬렉션에 있는 모든 문서 객체들 <u>정렬하여</u> 반환  \r\n**db.users.find().pretty()**  \r\n참고) ObjectId는 자동 생성, 유일한 값을 가지므로 같은 값 입력 안됨.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/mongodb/mongo-use-local.png\" alt=\"\">\r\n<figcaption>명령어 실행 결과</figcaption>\r\n</figure>\r\n</center>\r\n\r\n## MongoDB 사용하기 - 명령어 II\r\n\r\n### 다양한 find() 사용법\r\n\r\ndb.collection.find(query, projection)  \r\n\r\n| query | 필더 선택 | \r\n|:--------|:--------|\r\n| projection| 일치하는 필더에서 반환 할 필드 지정 |\r\n\r\n- db.car.find({name:'K7'}); (name:'K7' 반환)\r\n- db.car.find({name:'K7'},{_id:false}); > (name:'K7'의 _id필드 제외 반환)\r\n- db.car.find({price:{$gte:2000}}, {_id:false});\r\n- db.car.find({price:{$gt:2000}},{_id:false});\r\n- db.car.find({price:{$lte:2000}},{_id:false});\r\n- db.car.find({price:{$lt:2000}},{_id:false});\r\n- db.car.find({price:{$gte:2000}}, {_id:false}).count(); > (조건의 필더 개수)\r\n- db.car.findOne();\r\n- db.car.find().sort({name:1});\r\n- db.car.find().sort({name:-1});\r\n\r\n### 데이터 수정\r\n\r\ndb.car.update({name:'K7'},{$set:{price:1000}},false,false);\r\n\r\n- 첫번째 파라미터 : 검색조건\r\n- 두번째 파라미터: 변경할 내용\r\n- 세번째 파라미터: 일치하는 항목 없을 경우 새로 생성 여부\r\n- 네번째 파라미터: 일치하는 항목이 여러개일 경우 모두 수정할지 여부\r\n\r\n## MongoDB 사용하기 - 명령어 III\r\n\r\n- 도큐먼트(데이터) 제거  \r\n**db.car.remove({price:{$lte:1000}});**\r\n- 새로운 컬렉션 생성 (use 명령에 포함 되어 있음)  \r\n**db.createCollection('newCar');** \r\n- 모든 컬렉션 목록 보기  \r\n**db.getCollectionNames()** \r\n- 현재 DB에서 컬렉션 제거  \r\n**db.car.drop()** \r\n- 현재 접속 DB 제거  \r\n**db.dropDatabase()** \r\n- 빠져나오기  \r\n**exit**\r\n"},"id":"e84da2a7-3c10-5267-a626-59faf5b3bc92"}},{"node":{"frontmatter":{"title":"Nodejs Cookie 생성 및 사용","category":"Nodejs"},"fields":{"slug":"2019-08-07-nodejs-08-cookie"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Cookie 개념을 세우고 사용하는 법을 알아본다  \r\n\r\n# Nodejs Cookie 생성 및 사용\r\n\r\n## Cookie 배경\r\n\r\n- http 라는 통신 방식은 요청과 응답이 이루어지고 나면 연결이 끊김.\r\n- 이전에 사용했던 <u>사용자, 브라우저 등의 정보를 지속적으로 유지하기 위해 개발</u>\r\n  - ex) 사용자가 웹 페이지를 방문하면 방문자의 이름을 쿠키에 저장할 수 있습니다.\r\n  - 다음에 사용자가 페이지를 방문하면 쿠키는 방문자의 이름을 \"기억\"합니다.\r\n- 클라이언트 `웹브라우저`에 저장하고 같은 주소의 사이트에서만 유효  \r\n\r\n## Cookie [적용방법](https://www.npmjs.com/package/cookie-parser)\r\n\r\n- 설치 `npm install cookie-parser --save`\r\n  - package.json 에서 설치 확인\r\n- app.js에 해당 모듈 추가 `var cookieParser = require('cookie-parser')`\r\n- express 프로세스 app에 cookie-parse 미들웨어 연결  \r\n  `app.use(cookieParser())`  \r\n\r\n### cookie 저장하는 방법\r\n\r\n```javascript\r\nres.cookie('cookie name', 'cookie value', option)\r\n```\r\n\r\n### 컴퓨터가 가지고 있는 cookie 확인 하는 방법\r\n\r\n```javascript\r\nreq.cookies.[cookie name]\r\n```\r\n#### cookie로 방문 횟수 추적 예제 \r\n\r\n```javascript\r\nvar express = require('express');\r\nvar cookieParser = require('cookie-parser');\r\n\r\nvar app = express();\r\n\r\n// cookieParser 미들웨어 연결\r\napp.use(cookieParser());\r\n\r\napp.get('/', (req, res) => {\r\n  // 쿠키가 없다면 초기화 있다면 쿠키값을 받아옴\r\n\tif(req.cookies.count == undefined){\r\n\t\tvar count = 0;\r\n\t}else{\r\n\t\tvar count = parseInt(req.cookies.count);\r\n\t\tres.cookie('count',count+1);\r\n\t}\r\n    res.send('count: ' + req.cookies.count);\r\n  }\r\n);\r\n\r\napp.listen(3000, () => {\r\n  console.log('server start on port 3000');\r\n});\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/cookie-count.jpg\" alt=\"\" width=\"397\">\r\n<figcaption>cookie로 방문 횟수 추적 예제</figcaption>\r\n</figure>\r\n</center>\r\n\r\n#### cookie 세팅 후 정보 활용\r\n\r\n```javascript\r\nrouter.route('/process/showCookie').get(function(req, res) {\r\n  console.log('/process/showCookie 요청 들어옴 ...');\r\n  // end() 문자열을 인자로 사용, send() 객체나 수식을 인자로 사용.\r\n  res.send(req.cookies);\r\n});\r\n\r\nrouter.route('/process/setCookie').get(function(req, res) {\r\n  // 쿠키는 사용자측 PC에 생성 된다.\r\n  res.cookie('user', {\r\n    id: 'KIM',\r\n    name: '방탄소년단',\r\n    authorized: true\r\n  });\r\n  \r\n  // showCookie로 redirect\r\n  res.redirect('/process/showCookie');\r\n}); \r\n```\r\nsetCookie에서 쿠키를 웹 브라우저에 설정   \r\n/process/showCookie로 redirect  \r\n설정된 cookie 정보로 응답  \r\n개발자 도구의 Network 탭에서 새로 고침후 showCookie에서 cookie 정보 확인  \r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/cookie.jpg\" alt=\"\" width=\"600\">\r\n<figcaption>개발자 도구에서 웹 브라우저에 저장된 cookie 확인</figcaption>\r\n</figure>\r\n</center>\r\n"},"id":"3ea7c70e-f436-546d-8c03-07f244042088"}},{"node":{"frontmatter":{"title":"POST방식을 이용한 정보의 전달","category":"Nodejs"},"fields":{"slug":"2019-08-06-nodejs-07-post"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> post 방식을 통한 정보의 전달 방법에 대해서 살펴보고 express에서 post를 다루는 방법을 배운다.\r\n\r\n# POST 방식을 이용한 정보의 전달\r\n\r\n## POST방식 소개\r\n\r\n- 서버에 있는 정보를 가져오는 것(GET)이 아닌 **사용자의 정보를 서버에 전송(POST)** 하는 방식\r\n- ex.사용자의 로그인 정보를 전송하거나, 작성한 글을 서버로 전송하는 것\r\n- 본문영역(body)에 파라미터가 들어간다.  \r\n\r\n## POST 방식으로 전송된 데이터의 사용 방법\r\n\r\n- post 방식으로 데이터를 전송하면 app.get이 아닌 `app.post` 메소드에 콘트롤러를 연결 시켜서 실행 시킬 수 있으며, 추가로 `미들웨어`가 필요하다.\r\n  - 요청방식 처리 메서드는 get(), post(), put(), del() 있고 get 요청이외의 요청에서 요청 매개변수를 추출하려면 body parser 미들웨어가 필요함\r\n- **body-parser 미들웨어** : post 방식으로 전송된 데이터 요청 파라미터 확인할 수 있게 도와주는 플러그인(확장기능)  \r\n\r\n### body-parser 적용방법 [참고]([https://www.npmjs.com/package/body-parser])\r\n- 설치 `npm install body-parser`\r\n- app.js에 해당 모듈 추가 `var bodyParser = require('body-parser')`\r\n- app.js에 bodyParser 미들웨어 연결  \r\n  `app.use(bodyParser.urlencoded({ extended: false }))`  \r\n  url 방식으로 파싱하겠다는 의미  \r\n  - false : String, Array 타입 가능  \r\n  - true : 어떤 타입이든 상관 없음\r\n  - app.use(bodyParser.json()) : json 만 구문 분석하는 미들웨어를 리턴\r\n- 사용자에게 받은 모든 요청들은 bodyParser가 제일 먼저 실행되고, 사용자가 post 방식으로 전송한 데이터가 있다면, req 객체가 원래 갖고 있지 않았던 body라는 객체를 bodyParser가 추가한다. 그리고 사용자가 전송한 데이터의 name 속성이 id 이라면 body객체의 id 속성에 그 값을 넣는다.  \r\n\r\n---\r\n\r\n## 제출양식(form) 예시\r\n\r\n### 템플릿 엔진 ejs를 사용하여 form.ejs 파일 작성\r\n\r\n**form의 method 속성을 post로 지정**\r\n\r\n```html\r\n<form action=\"/form_receiver\" method=\"post\">\r\n  <table>\r\n    <tr>\r\n      <th>아이디</th>\r\n      <td><input type=\"text\" name=\"id\"></td>\r\n    </tr>\t\r\n    <tr>\r\n      <th>비밀번호</th>\r\n      <td><input type=\"text\" name=\"password\"></td>\r\n    </tr>\r\n    <tr>\r\n      <th colspan=\"2\">\r\n        <input type=\"submit\" value=\"submit\">\r\n      </th>\r\n    </tr>\r\n  </table>\r\n</form>\r\n```\r\n\r\n### form.ejs에서 넘어온 정보 추출\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express()\r\nvar bodyParser = require('body-parser')\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\n// body-parser 미들웨어 실행, application/x-www-form-urlencoded 파싱\r\n\r\napp.post('/form_receiver', function(req, res) {\r\n  // post 방식으로 접근한 /form_receiver 에서 body에 있는 요청 정보 불러옴\r\n  var id = req.body.id;\r\n  var pw = req.body.password;\r\n  res.send(id+','+pw);\r\n});\r\n```\r\n## GET과 POST의 차이\r\n- GET 방식으로 정보를 전송하면 정보가 URL에 표시되어 보안의 문제가 있다.\r\n  - 하지만 GET, POST 모두 보안에 불완전한 기술이다\r\n- GET 방식은 URL 길이 제한의 문제가 있다.\r\n- GET : 헤더에 요청 정보를 넣는다 / POST : 바디(본문)에 요청 정보를 넣는다.  \r\n"},"id":"5d0fc8c3-cb5e-5e77-9601-2fa16d55119d"}},{"node":{"frontmatter":{"title":"GET방식을 이용한 정보의 전달, 쿼리스트링","category":"Nodejs"},"fields":{"slug":"2019-08-05-nodejs-06-get"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> URL을 통해서 애플리케이션에 정보를 전달하는 방법에 대해서 알아본다.\r\n\r\n# GET방식을 이용한 정보의 전달, 쿼리스트링\r\n\r\n## GET방식 소개\r\n\r\n- 사용자의 접속(요청)에 따라서 어플리케이션이 응답한 정보를 웹브라우저에 `URL을 확인하여 정보를 가져오는 것`을 GET 방식이라 한다.\r\n- 경우에 따라서는 쿼리스트링을 통해서 어떠한 정보를 앱에 요청해서 가져오기도 한다.\r\n\r\n### 주소 문자열 요청 파라미터\r\n\r\n- 주소문자열은 protocol, host, query string등으로 구분된다.\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/querystring.jpg\" alt=\"\" width=\"438\">\r\n<figcaption>URL의 구성요소</figcaption>\r\n</figure>\r\n</center>\r\n\r\n\r\n## Express의 query 객체의 사용 - 쿼리스트링  \r\n\r\n- 하나의 path(라우터) 에서 경우에 따라 다른 결과를 보여줄 떄 쿼리스트링이 사용된다.\r\n- url 내의 쿼리스트링을 가져오려면 `req.query` 를 사용해야한다.\r\n\r\n```javascript\r\nvar url = 'http://localhost:3000/topic?id=2'\r\n// 위 주소에서 query.id = 2 가 된다.\r\n// id는 바뀔 수 있음 ex) http://localhost:3000/topic?page=2\r\n```\r\n\r\n- express api reference [req.query](http://expressjs.com/en/4x/api.html#req) 참고\r\n  - cmd에서 express 설치 필요 (npm install express --save)\r\n- & 기호로 나눠진 복수의 쿼리스트링을 가져오는 것도 가능하다.\r\n\r\n```javascript\r\napp.get('/topic', function(req, res) {\r\n  // url이 http://test.com/topic?id=neju&name=money 일때\r\n  res.send(req.query.id+' , '+req.query.name); // neju , money 출력\r\n})\r\n```\r\n\r\n### query 객체의 활용\r\n\r\n```javascript\r\napp.get('/topic', function(req, res){\r\n  var topic = [\r\n    'javascript is...',\r\n    'nodejs is...',\r\n    'express is...'\r\n  ];\r\n  var output = `\r\n    <li><a href=\"/topic?id=0\">js</a></li>\r\n    <li><a href=\"/topic?id=1\">nodejs</a></li>\r\n\t<li><a href=\"/topic?id=2\">express</a></li>\r\n\t${topic[req.query.id]}\r\n    `\r\n  // 선택한 링크에 따라서 다른 정보를 출력하는 동적인 애플리케이션\r\n  res.send(output);\r\n})\r\n```\r\n\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/query-ex1.jpg\" alt=\"\" width=\"370\">\r\n<figcaption>url query에 따른 정보 출력</figcaption>\r\n</figure>\r\n</center>\r\n\r\n### 쿼리스트링이 아닌 path 방식의 URL의 사용\r\n```javascript\r\napp.get('/topic/:id', function(req, res){\r\n  // path 방식 /:id 를 통해 기존의 /topic?id=2 값을 /topic/2 로 가져올 수 있다.\r\n  var topics = [\r\n    'Javascript is....',\r\n    'Nodejs is...',\r\n    'Express is...'\r\n  ];\r\n  var output = `\r\n  <a href=\"/topic/0\">JavaScript</a><br>\r\n  <a href=\"/topic/1\">Nodejs</a><br>\r\n  <a href=\"/topic/2\">Express</a><br><br>\r\n  ${topics[req.params.id]}\r\n  ` \r\n  // path 방식을 사용하는 url의 경우 params를 통해서 값을 가져올 수 있음\r\n  res.send(output);\r\n})\r\n```\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/query-ex2.jpg\" alt=\"\" width=\"370\">\r\n<figcaption>url path 방식에 따른 정보 출력</figcaption>\r\n</figure>\r\n</center>\r\n\r\npath 방식으로 복수 정보 처리 가능\r\n\r\n```javascript\r\napp.get('/topic/:id/:mode', function(req, res){\r\n  res.send(req.params.id+' , '+req.params.mode)\r\n});\r\n```\r\n<center>\r\n<figure>\r\n<img src=\"/assets/post-img/nodejs/query-ex3.jpg\" alt=\"\" width=\"370\">\r\n<figcaption>url path 방식에 따른 복수 정보 출력</figcaption>\r\n</figure>\r\n</center>\r\n\r\n- Restful api 등을 통해서 시맨틱 URL을 잘 사용하는 방법에 대해서 익힐 수 있다.\r\n"},"id":"2f7f6e68-51ff-5c22-b54d-d2ec737c059e"}},{"node":{"frontmatter":{"title":"Express모듈의 Router, Static 미들웨어","category":"Nodejs"},"fields":{"slug":"2019-08-05-nodejs-05-router"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> 미들웨어의 개념을 잡고 router 미들웨어와 static 미들웨어를 알아본다.  \r\n\r\n# 미들웨어\r\n\r\n- 쉽게 말해 요청과 응답 사이에서 특수 기능을 수행  (모듈의 구성요소 중 하나가 미들웨어)\r\n- app객체의 use()메서드로 미들웨어 등록\r\n- 따지고 보면 미들웨어 실행 후 라우터 실행\r\n\r\n## Static 미들웨어\r\n\r\n- 정적 파일을 제공할때 사용하는 미들웨어\r\n  - 정적 파일 : 기본적인 css 파일이나 js 파일 같이 아무리 요청해도 변경되지 않는 파일\r\n  - ex) public 폴더의 login.html 과 logout.html등을 제공하고 싶을 때 사용\r\n- express에 내장된 static 미들웨어를 사용하거나 serve-static 외부 모듈을 설치해서 사용\r\n\r\n### exprss.static 사용 예시\r\n\r\n```javascript\r\napp.use(express.static('public'));\r\n```\r\n\r\n- 하지만 express.static 매개변수에 들어가는 경로는 node 프로세스가 실행되는 폴더를 기준으로 하는 상대경로이다. \r\n- Express 앱을 다른 디렉토리에서 실행하는 경우에는 제공하려는 폴더의 절대 경로를 사용하는 것이 더 안전\r\n\r\n```javascript\r\napp.use('/static', express.static(__dirname + '/public'));\r\n```\r\n\r\n## 라우팅\r\n\r\n- 개념 : 사용자의 요청에 대한 정보를 제공하는 것을 `라우트(route)한다`라고 표현\r\n- 간단하게 풀면 `요청에 따라 다른 기능을 실행`시키는 것\r\n- 어렵게 풀면 URI(또는 경로) 및 특정한 HTTP 요청 메소드(GET, POST 등) 요청에 애플리케이션이 응답하는 방법을 결정하는 것\r\n- 각 라우트는 하나 이상의 핸들러 함수를 가질 수 있으며, 그 함수는 라우트가 **일치할 때 실행**\r\n\r\n### 라우트의 기본 구조\r\n\r\n라우트 정의에는 다음과 같은 구조가 필요\r\n- app은 express의 인스턴스\r\n- METHOD는 HTTP 요청 메소드\r\n- PATH는 서버에서의 경로\r\n- HANDLER는 라우트가 일치할 때 실행되는 함수\r\n\r\n```javascript\r\napp.METHOD(PATH, HANDLER)\r\n```\r\n\r\n#### HTTP 요청 메소드\r\n\r\n| 메서드 이름 | 설명 |\r\n|:--------|:--------|\r\n| app.get() | get 요청 처리 |\r\n| app.post() | post 요청 처리 |\r\n| app.put() | put 요청 처리 |\r\n| app.delete() | delete 요청 처리 |\r\n\r\n\r\n### 기본적인 router 미들웨어 예시\r\n\r\nrouter 미들웨어는 라우팅을 구현하는 미들웨어\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\n\r\n// 사용자의 '/' get 요청에 서버는 hello world로 응답\r\napp.get('/', function(req, res) {\r\n  res.send('hello world');\r\n});\r\n```\r\n"},"id":"c6bd1c00-5a9b-5611-852d-efbb1ae9ddfe"}},{"node":{"frontmatter":{"title":"Express 모듈 설치와 사용","category":"Nodejs"},"fields":{"slug":"2019-08-05-nodejs-04-express"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Express 모듈 설치 후 Express에서 제공하는 미들웨어와 라우터 사용 웹 서버 만들기\r\n\r\n# Express 모듈 설치와 사용\r\n- Express는 자체적인 기능을 갖춘 라우팅 및 미들웨어 웹 프레임워크\r\n\r\n## Express 모듈 정의\r\n- Node.js만 사용하여 웹 앱을 만드는 것은 어렵고 복잡함\r\n- 위 사항들을 간단하게 만들어주는 다양한 도구 중 가장 대표적인 것이 Express\r\n- [express 홈페이지](http://expressjs.com/ko/) 참고\r\n\r\n### Express 설치\r\n- 터미널에서 `npm init`을 통해 해당 프로젝트 폴더를 npm 패키지로 만든다.\r\n- `npm install express --save` 입력 후 package.json 에서 확인\r\n- node_modules 폴더에 파일이 설치되고 완료! \r\n\r\n---\r\n\r\n### 코드작성\r\n\r\nrequire() 함수로 설치된 express 모듈 추출  \r\n상수 app 으로 웹 서버를 시작\r\n\r\n```javascript\r\nconst express = require('express');\r\nconst app = express(); // express의 인스턴스\r\n\r\napp.use(function(req, res){\r\n  res.send('hello Node user!');\r\n});\r\n\r\n// 웹 서버 로컬호스트 3000번 포트 실행\r\napp.listen(3000, function(){\r\n  console.log('connected 3000 port!');\r\n});\r\n```\r\n\r\n### 코드실행\r\n- 터미널에서 node app.js 입력하여 파일을 실행\r\n- 브라우저에 http://localhost:3000 로 접속하여 결과 확인\r\n\r\n---\r\n\r\n## express() 메소드 호출으로 만든 app 객체의 주요 메서드\r\n\r\n| 메서드 이름 | 설명 | \r\n|:--------|:--------|\r\n| use(path, function) | 미들웨어 함수를 사용 |\r\n| app.get(path, callback [, callback ...]) | 특정 패스로 요청된 정보 처리 |\r\n| app.set(name, value) | 서버 설정 속성 지정. 지정한 속성을 get() 메서드로 확인할 수 있음. |\r\n| app.get(name) | app.set() 메서드로 서버 설정을 위해 지정했던 속성 확인 |\r\n\r\nget(path, callback [, callback ...]) 메서드는 요청방식 처리 메서드로 다음장에서 더 알아봅시다.\r\n\r\n### 코드작성\r\n\r\n**아래 코드는 웹 서버 실행을 위해 익숙해져야 함.**\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\n\r\napp.get('/',function(req, res){\r\n  // get 요청 방식으로 접근한 서버 호스트 접속했을 때 실행\r\n  res.send('hello Node.js user!');\r\n});\r\napp.get('/login',function(req, res){\r\n  // get 요청 방식으로 접근한 서버 호스트/login 접속했을 때 실행\r\n  res.send('<h1>login please. Node.js user!</h1>');\r\n});\r\n\r\napp.listen(3000, function(){\r\n  console.log('connected 3000 port!');\r\n});\r\n```\r\n브라우저에 http://localhost:3000, http://localhost:3000/login 로 접속하여 결과 확인\r\n"},"id":"73b49509-a114-5ab6-b862-4ebaf84442c8"}},{"node":{"frontmatter":{"title":"Nodejs 내부 모듈 File system","category":"Nodejs"},"fields":{"slug":"2019-08-05-nodejs-03-filesystem"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> File system 모듈을 이용해서 파일을 제어하는 법을 알아본다.  \r\n\r\n# File System 모듈\r\n\r\n- 노드의 파일시스템은 동기식 IO와 비동기식 IO를 함께 제공\r\n- Node.js 사이트의 [File System](https://nodejs.org/api/fs.html) 참고\r\n\r\n## fs모듈의 readFile() 메서드\r\n\r\n- readFileSync(path[, options]) : 동기식 IO파일을 읽어 들입니다.\r\n- readFile(path[, options], callback) : 비동기식 IO파일을 읽어 들입니다.\r\n\r\n### readFile() 메서드로 알아보는 동기 방식과 비동식 방식의 차이\r\n\r\n#### 동기 방식의 코드 진행\r\n\r\n- 위에서 아래로 `순차적` 진행\r\n\r\n```javascript\r\nvar fs = require('fs'); // fs모듈 추출\r\n\r\n// 파일을 동기식 IO로 읽어 들입니다.\r\nvar data = fs.readFileSync('./package.json', 'utf8');\r\n\r\n// 읽어 들인 데이터를 출력합니다.\r\nconsole.log(data);\r\n```\r\n\r\n#### 비동기 방식의 코드 진행\r\n\r\n- 실행 코드 `동시` 진행\r\n\r\n```javascript\r\nvar fs = require('fs'); // fs모듈 추출\r\n\r\n// 파일을 비동기식 IO로 읽어 들입니다.\r\nfs.readFile('./package.json', 'utf8', function(err, data) {\r\n  // 읽어 들인 데이터를 출력합니다.\r\n  console.log(data);\r\n});\r\n\r\n// 위 readFile() 메서드가 실행 되면서 동시 시작\r\nconsole.log('package.json 파일이 노출 되기 전에 실행');\r\n```\r\n\r\n## fs모듈의 writeFile() 메서드\r\n\r\n- writeFileSync(file, data[, options]) : 동기식 IO파일을 씁니다.\r\n- writeFile(file, data[, options], callback) : 비동기식 IO파일을 씁니다.\r\n\r\n### writeFile() 메서드 사용 예시 코드\r\n\r\n```javascript\r\nvar fs = require('fs'); // fs모듈 추출\r\n\r\nvar message = 'Hello World!';\r\n\r\n//파일에 데이터를 쓴다.\r\nfs.writeFile('./output.txt', message, function(err) {\r\n  if(err) {\r\n    console.log('Error : ' + err);\r\n  }\r\n  console.log('output.txt 파일에 데이터 쓰기 완료!');\r\n});\r\n```\r\n- message를 내용이 삽입된 output.txt 확인\r\n\r\n## Stream 방식으로 파일 읽고 쓰기\r\n\r\n- 위에서의 방식들은 파일을 통째로 읽음\r\n- 데이터를 Stream 방식으로 읽는것이 메모리, 속도 등에서 효율적\r\n- fs.createReadStream(path[, options]) : 파일을 읽기 위한 스트림 객체를 만든다.\r\n- fs.createWriteStream(path[, options]) : 파일을 쓰기 위한 스트림 객체를 만든다.\r\n\r\n```javascript\r\nvar fs = require('fs');\r\n\r\nvar inname = './output.txt';\r\nvar outname = './output2.txt';\r\n\r\nfs.exists(outname, function(exists) {\r\n  // fs.exists(path, callback) 사용하여 outname이 존재하는지 확인\t\r\n  if(exists) {\r\n\t  fs.unlink(outname, function(err) {\r\n      // 존재하면 fs.unlink(path, callback)사용하여 삭제\r\n      if(err) throw err;\r\n    });\r\n    console.log('파일이 삭제됨.');\r\n  }\r\n  \r\n  var infile = fs.createReadStream(inname, {flags:'r'});\r\n  var outfile = fs.createWriteStream(outname, {flags: 'w'});\r\n\r\n  infile.pipe(outfile);\r\n  //복제할 내용.pipe() 메소드로 연결하면 파일의 내용이 복사\r\n  console.log('스트리밍 방식으로 복제 완료');\r\n});\r\n```\r\n\r\n### 파일을 열 때 사용하는 대표적인 플래그\r\n\r\n- 'r' : 읽기에 사용하는 플래그. 파일 없으면 예외 발생\r\n- 'w' : 쓰기에 사용하는 플래그. 파일 없으면 만들어지고 있으면 덮어씀.\r\n- 'w+' : 읽기와 쓰기 모두 사용 가능. 파일 없으면 만들어 짐. 덮어쓰기.\r\n- 'a+' : 읽기와 추가에 모두 사용가능. 파일이 없으면 만들어 짐. 내용 추가.\r\n\r\n#### pipe() 와 http 모듈\r\n\r\n- 읽은 파일은 서버에 노출도 가능\r\n\r\n```javascript\r\nvar http = require('http');\r\nvar fs = require('fs');\r\n\r\n\r\nvar server = http.createServer(function(req, res) {\r\n  var instream = fs.createReadStream('./output.txt');\r\n  //응답 스트림과 pipe() 연결하여 노출\r\n  instream.pipe(res);\r\n});\r\n\r\nserver.listen(3000, function() {\r\n  console.log('서버실행 >>> http://localhost:3000');\r\n})\r\n```\r\n"},"id":"0e774f7a-2250-534e-80e1-c5a325058b62"}},{"node":{"frontmatter":{"title":"Nodejs 모듈과 NPM","category":"Nodejs"},"fields":{"slug":"2019-08-05-nodejs-02-module"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Nodejs를 이용해서 간단한 서버 애플리케이션을 만들어 본다.\r\n  \r\n# 모듈과 NPM - nodejs 모듈\r\n\r\n## 모듈 기초\r\n\r\n- `모듈 = 부품` 한 덩어리\r\n- 웹서버를 처음부터 끝까지 만드는 것은 어렵고 복잡한 일 / nodejs 에서는 기본적인 웹서버를 만들어 놓고(내부 모듈), 사용자가 쓸 수 있도록 함 \r\n\r\n### Nodejs의 내부 모듈\r\n\r\n- 내부 모듈은 노드 설치시 기본으로 설치. require() 사용하여 불러올 수 있음\r\n- 내장 모듈에 대한 정보 > [nodejs api](http://nodejs.org/api)\r\n\r\n---\r\n\r\n## http 모듈 호출 코드\r\n\r\n```javascript\r\nconst http = require('http');\r\n// 사용자가 nodejs에서 제공하는(내부모듈) http 라는 모듈(부품)이 필요하면 require 함수를 통해서 http 모듈을 가져오고 상수에 담는다.\r\n```\r\n\r\nhttp 모듈 사용 설명서 : [nodejs document](https://nodejs.org/dist/latest-v10.x/docs/api/http.html)\r\n- http.createServer() 메소드 : http 모듈의 Server객체를 리턴\r\n- http.createServer().listen() 메소드\r\n\r\n`모듈을 사용하기 위해서는 require라는 함수로 호출`한다.  \r\nnodejs는 기본적으로 앱을 만들기 위한 부품을 기본적으로 제공한다. (ex. http, path, os)  \r\n모듈의 사용설명서는 nodejs 사이트의 [document](https://nodejs.org/dist/latest-v6.x/docs/api/)에서 확인 가능하다.\r\n\r\n## path 모듈 호출 코드\r\n\r\n```javascript\r\nconst path = require('path'); //내부모듈 path 불러옴\r\n\r\nconst curPath = path.join('/Users/newDir', 'app.exe'); //path모듈 내부의 메서드 join()사용\r\n// 매개변수를 합쳐 하나의 패스로 만들어줌. 구분자는 알아서 조정\r\nconsole.log(curPath); //\\Users\\newDir\\app.exe\r\n\r\nconst filename = \"C:\\Users\\newDir\\app.exe\";\r\nconst dirname = path.dirname(filename); // 경로명 -> C:\\Users\\newDir\r\nconst basename = path.basename(filename); // 파일이름 -> app.exe\r\nconst extname = path.extname(filename); // 확장자명 -> .exe \r\nconsole.log(dirname, basename, extname); \r\n```\r\n\r\nhttp 모듈 사용 설명서 : [nodejs document](https://nodejs.org/dist/latest-v10.x/docs/api/path.html)\r\n\r\n### 터미널\r\n\r\n```shell\r\n$ node path.js\r\n\\Users\\newDir\\app.exe\r\nC:\\Users\\newDir app.exe .exe\r\n```\r\n\r\n---\r\n\r\n## npm 소개\r\n- **npm = Node Package Manager** (command , cmd 라고 부르기도 함)\r\n- node.js 를 설치하면 자동으로 함께 설치\r\n- npm은 Node 계의 **앱스토어**!\r\n  - 모듈의 설치, 삭제, 버전관리\r\n- 외부 모듈 사용시에 npm에서 설치 필요\r\n- [npm 사이트](https://www.npmjs.com/)\r\n\r\n### 명령 프롬프트 기본 명령어\r\n\r\n| 명령어 | 설명 | \r\n|:--------|:--------|\r\n| dir | 현재 폴더의 요소를 출력합니다. |\r\n| cd 폴더명 | 특정 폴더로 이동합니다. |\r\n| .. | 상위폴더 |\r\n| mkdir 폴더명 | 폴더 생성 |\r\n| D: | D 드라이버로 이동. |\r\n\r\n## npm 사용법\r\n\r\n### npm 초기화\r\n- cmd 창에 `npm init` 입력\r\n- 새 npm 패키지 설정이라는 말은 = package.json 파일 생성\r\n  - **package.json**은 프로젝트에 대한 표. 해당 프로젝트의 이름, 버전, 사용되는 모듈 등의 정보가 적혀있고, 이 파일 하나로 모듈 의존성 모듈 관리도 진행할 수 있다. \r\n  - <u>어떤 오픈 소스를 다운 받을 때 package.json만 있다면 해당 프로젝트가 사용하는 모듈이 어떤 것인지 알 수 있다.</u>\r\n\r\n### npm 에서 외부 모듈 설치\r\n- cmd 창에 `npm install 모듈명 --save` 입력\r\n  - --save 명령어를 입력으로 package.json 에서 설치된 모듈과 버전 확인이 가능하다.\r\n"},"id":"7f32fc96-91fb-56f5-b5d3-4a6652467d41"}},{"node":{"frontmatter":{"title":"Nodejs 간단한 웹 앱 만들기","category":"Nodejs"},"fields":{"slug":"2019-08-05-nodejs-01-webapp"},"internal":{"content":"\r\n> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.  \r\n> Nodejs를 이용해서 간단한 서버 에플리케이션을 만들어 본다.\r\n\r\n# nodejs 간단한 웹 앱 만들기\r\n\r\n## nodejs 서버연결\r\n\r\n### 서버연결을 위한 코드\r\n\r\n[node.org > about](https://nodejs.org/en/about/) 에서 파일 복사 후 `webserver.js` 생성 후 붙여넣기\r\nhttp 내부 모듈을 불러와서 hostname의 port로 서버 생성 후 연결 (밑에서 해석)\r\n\r\n```javascript\r\nconst http = require('http');\r\n\r\nconst hostname = '127.0.0.1';\r\nconst port = 3000;\r\n\r\nconst server = http.createServer((req, res) => {\r\n  res.statusCode = 200;\r\n  res.setHeader('Content-Type', 'text/plain');\r\n  res.end('Hello World\\n');\r\n});\r\n\r\nserver.listen(port, hostname, () => {\r\n  console.log(`Server running at http://${hostname}:${port}/`);\r\n});\r\n```\r\n\r\n터미널에서 `node webserver.js` 실행\r\n서버 종료할 때는 Ctrl + C \r\n\r\n```\r\n$ node webserver.js\r\nServer running at http://127.0.0.1:3000/\r\n```\r\n\r\n웹브라우저를 통해 http://127.0.0.1:3000/ (로컬호스트)의 3000번 포트 경로에 접속하면 브라우저에 `hello world` 가 출력\r\n\r\n### 내용\r\n\r\n- webserver.js 자바스크립트의 코드가 웹 브라우저를 통해서 요청한 내용을 받아서 서버 생성 후 hello world 라는 텍스트를 노출을 명령\r\n- 우리의 웹브라우저는 화면에 hello world를 출력  \r\n\r\n---\r\n\r\n## nodejs 서버연결을 위한 코드 해석하기\r\n\r\n### 서버연결을 위한 코드와 해석\r\n\r\n```javascript\r\nconst http = require('http'); // http 내부 모듈 추출\r\n// require()는 javascript 표준 API는 아님. Node.js에서 모듈을 불러오는 특별한 목적을 가진 내장 함수 \r\n\r\nconst hostname = '127.0.0.1'; // 서버 컴퓨터의 ip\r\nconst port = 3000; // 목적 포트. 컴퓨터에는 0 ~ 65535번의 포트(port) 존재\r\n\r\n// createServer 명령을 통해 서버 한대를 만든다.\r\nconst server = http.createServer((req, res) => { \r\n  // 매개 변수로 요청의미의 req, 응답의미의 res\r\n  // 사용자에게 응답한다는 의미의 res에 속성 및 메서드 연결\r\n  res.statusCode = 200; // 통신 성공\r\n  res.setHeader('Content-Type', 'text/plain');\r\n  res.end('Hello World\\n');\r\n});\r\n\r\nserver.listen(port, hostname, () => {\r\n  // 만든 서버가 컴퓨터에 리스닝을 하도록 함\r\n  // 첫번째 매개변수는 포트번호, 두번째 매개변수는 ip \r\n  console.log(`Server running at http://${hostname}:${port}/`);\r\n});\r\n```\r\n"},"id":"dac86f03-5019-5cd7-a54c-a6110da9b2e4"}},{"node":{"frontmatter":{"title":"Nodejs 설치 및 실행","category":"Nodejs"},"fields":{"slug":"2019-08-01-nodejs-00-install-exec"},"internal":{"content":"> [생활코딩 Node.js 강의](https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9#) 와 KOSMO 노드JS 프로그래밍 수업을 듣고 정리합니다.\r\n\r\n# nodejs 설치 및 실행\r\n\r\n## Node.js?\r\n- 크롬V8엔진 기반으로 개발된 자바스크립트(JavaScript)를 이용하여 서버 프로그래밍을 할 수 있도록 해주는 플랫폼\r\n\r\n## 설치\r\n1. [nodejs.org](https://nodejs.org/ko/download/) 에서 파일 다운로드 후 설치\r\n  - node.js의 홀수 버전은 지속적으로 기능을 추가하는 stable 버전\r\n  - 짝수 버전은 안정적이고 지속적인 지원을 약속하는 LTS(Long Time Supports)버전. 짝수 버전 선호\r\n1. 또는 npm 을 통하여 설치 (installing Node.js via package manager)\r\n1. 설치 후 터미널에서 `node --version` 명령어 통해서 버전 확인\r\n  - 터미널 여는법 : 윈도우 + r 키 누르거나 윈도우 검색창에 cmd 검색\r\n\r\n## 실행\r\n\r\n폴더 생성 후 js 파일 작성 (ex. nodejs/hello.js)\r\n\r\n```javascript\r\nconsole.log('hello');\r\n```\r\n\r\n`터미널 > cd nodejs (js 파일이 들어있는 폴더로 이동) > node hello.js`\r\n\r\n```\r\n$ node hello.js\r\nHello world\r\n```\r\n"},"id":"faacb0a9-af78-5b9f-b1fd-890dd1bbe37f"}},{"node":{"frontmatter":{"title":"git 개념 정리 및 기본 용어, 소스트리","category":"Git"},"fields":{"slug":"2019-08-01-git-00-intro"},"internal":{"content":"> 인프런 강의 중 [정호영 - git과 github](https://www.inflearn.com/course/git-and-github) 수업을 듣고 중요 내용을 정리합니다.  \r\n\r\n\r\n# git 은?  \r\n\r\n- 형상 관리 시스템(Verson Control System) 의 한 종류입니다. 주로 개발자들이 프로그램과 관련된 파일들을 저장하는 데 사용합니다. 게임의 세이브 포인트와 유사한데, 언제든지 저장 시점으로 되돌아 갈 수 있습니다. 여기서는 세 가지 기본 기념만 배우려 합니다.\r\n\r\n---\r\n\r\n## 스테이지에 올린다 (add)\r\n\r\n- 앞에서 커밋하기 전에 저장을 원하는 파일들을 묶는 일을 해야 한다고 했습니다. 이 작업을 '스테이지에 파일을 올린다' 고 합니다. 혹은 줄여서 간단히 `add` 라고도 합니다.\r\n\r\n\r\n## 커밋 (commit)\r\n\r\n- 게임의 세이브에 해당하는 행동을 git에서는 `commit` 이라고 합니다. 다시 말해서 여러분은 언제든지 커밋한 시점으로 되돌아 갈 수 있습니다 . 커밋을 하려면 저장을 원하는 파일들을 묶어서 커밋 명령을 수행하면 됩니다.\r\n\r\n1. 반드시 한 번에 하나의 논리적 작업만을 커밋합니다.\r\n1. 커밋 메시지는 공유하는 내용입니다. 의미 있는 내용을 적습니다.\r\n\r\n## github에 업로드 (push)\r\n\r\n- 커밋을 하면 이제 현재 작업 내용의 세이브 데이터가 내 컴퓨터에 저장됩니다. 이걸 github에 업로드하면 다른 사람이랑 공유할 수도 있고, 내 컴퓨터의 데이터가 날아가도 안전하게 다시 복구할 수 있습니다. github에 업로드하는 걸 git에서는 `push` 라고 합니다.\r\n\r\n---\r\n\r\n# Source Tree 사용\r\n\r\n-  git 을 편리하고 직관적으로 사용하게 도와주는 프로그램\r\n\r\n\r\n## Source Tree를 통해서 저장소 클론 (clone)\r\n\r\n- 소스트리의 `Clone` 또는 '복제 / 생성' 메뉴를 통해 github 에서 생성한 저장소를 클론해 올 수 있습니다. github에서 생성한 저장소 주소를 넣어주면 됩니다. 보통 \"내문서\" 아래에 저장소 이름과 같은 새로운 폴더가 만들어집니다.\r\n\r\n---\r\n\r\n# 요약 \r\n\r\n- add: 내 컴퓨터에서 작업한 파일들을 스테이지에 추가\r\n- commit: 스테이지에 올라온 파일들을 가지고 내 컴퓨터에 저장 (세이브와 같다.)\r\n- push: 커밋들을 원격 저장소에 업로드\r\n- clone: 원격 저장소 (github)를 내 컴퓨터에 복사해 온다.\r\n"},"id":"6f70db50-6043-5a40-96d5-488ff9f43bb6"}}]}}}